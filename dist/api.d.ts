/**
 * Kill Bill
 * Kill Bill is an open-source billing and payments platform
 *
 * The version of the OpenAPI document: 0.24.10
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { Configuration } from './configuration';
import { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import { RequestArgs, BaseAPI } from './base';
/**
 *
 * @export
 * @interface Account
 */
export interface Account {
    /**
     *
     * @type {string}
     * @memberof Account
     */
    'accountId'?: string;
    /**
     *
     * @type {string}
     * @memberof Account
     */
    'name'?: string;
    /**
     *
     * @type {number}
     * @memberof Account
     */
    'firstNameLength'?: number;
    /**
     *
     * @type {string}
     * @memberof Account
     */
    'externalKey'?: string;
    /**
     *
     * @type {string}
     * @memberof Account
     */
    'email'?: string;
    /**
     *
     * @type {number}
     * @memberof Account
     */
    'billCycleDayLocal'?: number;
    /**
     *
     * @type {string}
     * @memberof Account
     */
    'currency'?: AccountCurrencyEnum;
    /**
     *
     * @type {string}
     * @memberof Account
     */
    'parentAccountId'?: string;
    /**
     *
     * @type {boolean}
     * @memberof Account
     */
    'isPaymentDelegatedToParent'?: boolean;
    /**
     *
     * @type {string}
     * @memberof Account
     */
    'paymentMethodId'?: string;
    /**
     *
     * @type {string}
     * @memberof Account
     */
    'referenceTime'?: string;
    /**
     *
     * @type {string}
     * @memberof Account
     */
    'timeZone'?: string;
    /**
     *
     * @type {string}
     * @memberof Account
     */
    'address1'?: string;
    /**
     *
     * @type {string}
     * @memberof Account
     */
    'address2'?: string;
    /**
     *
     * @type {string}
     * @memberof Account
     */
    'postalCode'?: string;
    /**
     *
     * @type {string}
     * @memberof Account
     */
    'company'?: string;
    /**
     *
     * @type {string}
     * @memberof Account
     */
    'city'?: string;
    /**
     *
     * @type {string}
     * @memberof Account
     */
    'state'?: string;
    /**
     *
     * @type {string}
     * @memberof Account
     */
    'country'?: string;
    /**
     *
     * @type {string}
     * @memberof Account
     */
    'locale'?: string;
    /**
     *
     * @type {string}
     * @memberof Account
     */
    'phone'?: string;
    /**
     *
     * @type {string}
     * @memberof Account
     */
    'notes'?: string;
    /**
     *
     * @type {boolean}
     * @memberof Account
     */
    'isMigrated'?: boolean;
    /**
     *
     * @type {number}
     * @memberof Account
     */
    'accountBalance'?: number;
    /**
     *
     * @type {number}
     * @memberof Account
     */
    'accountCBA'?: number;
    /**
     *
     * @type {Array<AuditLog>}
     * @memberof Account
     */
    'auditLogs'?: Array<AuditLog>;
}
export declare const AccountCurrencyEnum: {
    readonly Aed: "AED";
    readonly Afn: "AFN";
    readonly All: "ALL";
    readonly Amd: "AMD";
    readonly Ang: "ANG";
    readonly Aoa: "AOA";
    readonly Ars: "ARS";
    readonly Aud: "AUD";
    readonly Awg: "AWG";
    readonly Azn: "AZN";
    readonly Bam: "BAM";
    readonly Bbd: "BBD";
    readonly Bdt: "BDT";
    readonly Bgn: "BGN";
    readonly Bhd: "BHD";
    readonly Bif: "BIF";
    readonly Bmd: "BMD";
    readonly Bnd: "BND";
    readonly Bob: "BOB";
    readonly Brl: "BRL";
    readonly Bsd: "BSD";
    readonly Btn: "BTN";
    readonly Bwp: "BWP";
    readonly Byr: "BYR";
    readonly Bzd: "BZD";
    readonly Cad: "CAD";
    readonly Cdf: "CDF";
    readonly Chf: "CHF";
    readonly Clp: "CLP";
    readonly Cny: "CNY";
    readonly Cop: "COP";
    readonly Crc: "CRC";
    readonly Cuc: "CUC";
    readonly Cup: "CUP";
    readonly Cve: "CVE";
    readonly Czk: "CZK";
    readonly Djf: "DJF";
    readonly Dkk: "DKK";
    readonly Dop: "DOP";
    readonly Dzd: "DZD";
    readonly Egp: "EGP";
    readonly Ern: "ERN";
    readonly Etb: "ETB";
    readonly Eur: "EUR";
    readonly Fjd: "FJD";
    readonly Fkp: "FKP";
    readonly Gbp: "GBP";
    readonly Gel: "GEL";
    readonly Ggp: "GGP";
    readonly Ghs: "GHS";
    readonly Gip: "GIP";
    readonly Gmd: "GMD";
    readonly Gnf: "GNF";
    readonly Gtq: "GTQ";
    readonly Gyd: "GYD";
    readonly Hkd: "HKD";
    readonly Hnl: "HNL";
    readonly Hrk: "HRK";
    readonly Htg: "HTG";
    readonly Huf: "HUF";
    readonly Idr: "IDR";
    readonly Ils: "ILS";
    readonly Imp: "IMP";
    readonly Inr: "INR";
    readonly Iqd: "IQD";
    readonly Irr: "IRR";
    readonly Isk: "ISK";
    readonly Jep: "JEP";
    readonly Jmd: "JMD";
    readonly Jod: "JOD";
    readonly Jpy: "JPY";
    readonly Kes: "KES";
    readonly Kgs: "KGS";
    readonly Khr: "KHR";
    readonly Kmf: "KMF";
    readonly Kpw: "KPW";
    readonly Krw: "KRW";
    readonly Kwd: "KWD";
    readonly Kyd: "KYD";
    readonly Kzt: "KZT";
    readonly Lak: "LAK";
    readonly Lbp: "LBP";
    readonly Lkr: "LKR";
    readonly Lrd: "LRD";
    readonly Lsl: "LSL";
    readonly Ltl: "LTL";
    readonly Lvl: "LVL";
    readonly Lyd: "LYD";
    readonly Mad: "MAD";
    readonly Mdl: "MDL";
    readonly Mga: "MGA";
    readonly Mkd: "MKD";
    readonly Mmk: "MMK";
    readonly Mnt: "MNT";
    readonly Mop: "MOP";
    readonly Mro: "MRO";
    readonly Mur: "MUR";
    readonly Mvr: "MVR";
    readonly Mwk: "MWK";
    readonly Mxn: "MXN";
    readonly Myr: "MYR";
    readonly Mzn: "MZN";
    readonly Nad: "NAD";
    readonly Ngn: "NGN";
    readonly Nio: "NIO";
    readonly Nok: "NOK";
    readonly Npr: "NPR";
    readonly Nzd: "NZD";
    readonly Omr: "OMR";
    readonly Pab: "PAB";
    readonly Pen: "PEN";
    readonly Pgk: "PGK";
    readonly Php: "PHP";
    readonly Pkr: "PKR";
    readonly Pln: "PLN";
    readonly Pyg: "PYG";
    readonly Qar: "QAR";
    readonly Ron: "RON";
    readonly Rsd: "RSD";
    readonly Rub: "RUB";
    readonly Rwf: "RWF";
    readonly Sar: "SAR";
    readonly Sbd: "SBD";
    readonly Scr: "SCR";
    readonly Sdg: "SDG";
    readonly Sek: "SEK";
    readonly Sgd: "SGD";
    readonly Shp: "SHP";
    readonly Sll: "SLL";
    readonly Sos: "SOS";
    readonly Spl: "SPL";
    readonly Srd: "SRD";
    readonly Std: "STD";
    readonly Svc: "SVC";
    readonly Syp: "SYP";
    readonly Szl: "SZL";
    readonly Thb: "THB";
    readonly Tjs: "TJS";
    readonly Tmt: "TMT";
    readonly Tnd: "TND";
    readonly Top: "TOP";
    readonly Try: "TRY";
    readonly Ttd: "TTD";
    readonly Tvd: "TVD";
    readonly Twd: "TWD";
    readonly Tzs: "TZS";
    readonly Uah: "UAH";
    readonly Ugx: "UGX";
    readonly Usd: "USD";
    readonly Uyu: "UYU";
    readonly Uzs: "UZS";
    readonly Vef: "VEF";
    readonly Vnd: "VND";
    readonly Vuv: "VUV";
    readonly Wst: "WST";
    readonly Xaf: "XAF";
    readonly Xcd: "XCD";
    readonly Xdr: "XDR";
    readonly Xof: "XOF";
    readonly Xpf: "XPF";
    readonly Yer: "YER";
    readonly Zar: "ZAR";
    readonly Zmw: "ZMW";
    readonly Zwd: "ZWD";
    readonly Btc: "BTC";
};
export type AccountCurrencyEnum = typeof AccountCurrencyEnum[keyof typeof AccountCurrencyEnum];
/**
 *
 * @export
 * @interface AccountEmail
 */
export interface AccountEmail {
    /**
     *
     * @type {string}
     * @memberof AccountEmail
     */
    'accountId'?: string;
    /**
     *
     * @type {string}
     * @memberof AccountEmail
     */
    'email': string;
    /**
     *
     * @type {Array<AuditLog>}
     * @memberof AccountEmail
     */
    'auditLogs'?: Array<AuditLog>;
}
/**
 *
 * @export
 * @interface AccountTimeline
 */
export interface AccountTimeline {
    /**
     *
     * @type {Account}
     * @memberof AccountTimeline
     */
    'account'?: Account;
    /**
     *
     * @type {Array<Bundle>}
     * @memberof AccountTimeline
     */
    'bundles'?: Array<Bundle>;
    /**
     *
     * @type {Array<Invoice>}
     * @memberof AccountTimeline
     */
    'invoices'?: Array<Invoice>;
    /**
     *
     * @type {Array<InvoicePayment>}
     * @memberof AccountTimeline
     */
    'payments'?: Array<InvoicePayment>;
}
/**
 *
 * @export
 * @interface AdminPayment
 */
export interface AdminPayment {
    /**
     *
     * @type {string}
     * @memberof AdminPayment
     */
    'lastSuccessPaymentState'?: string;
    /**
     *
     * @type {string}
     * @memberof AdminPayment
     */
    'currentPaymentStateName'?: string;
    /**
     *
     * @type {string}
     * @memberof AdminPayment
     */
    'transactionStatus'?: string;
}
/**
 *
 * @export
 * @interface AuditLog
 */
export interface AuditLog {
    /**
     *
     * @type {string}
     * @memberof AuditLog
     */
    'changeType'?: string;
    /**
     *
     * @type {string}
     * @memberof AuditLog
     */
    'changeDate'?: string;
    /**
     *
     * @type {string}
     * @memberof AuditLog
     */
    'objectType'?: AuditLogObjectTypeEnum;
    /**
     *
     * @type {string}
     * @memberof AuditLog
     */
    'objectId'?: string;
    /**
     *
     * @type {string}
     * @memberof AuditLog
     */
    'changedBy'?: string;
    /**
     *
     * @type {string}
     * @memberof AuditLog
     */
    'reasonCode'?: string;
    /**
     *
     * @type {string}
     * @memberof AuditLog
     */
    'comments'?: string;
    /**
     *
     * @type {string}
     * @memberof AuditLog
     */
    'userToken'?: string;
    /**
     *
     * @type {Entity}
     * @memberof AuditLog
     */
    'history'?: Entity;
}
export declare const AuditLogObjectTypeEnum: {
    readonly Account: "ACCOUNT";
    readonly AccountEmail: "ACCOUNT_EMAIL";
    readonly BlockingStates: "BLOCKING_STATES";
    readonly Bundle: "BUNDLE";
    readonly CustomField: "CUSTOM_FIELD";
    readonly Invoice: "INVOICE";
    readonly Payment: "PAYMENT";
    readonly Transaction: "TRANSACTION";
    readonly InvoiceItem: "INVOICE_ITEM";
    readonly InvoicePayment: "INVOICE_PAYMENT";
    readonly Subscription: "SUBSCRIPTION";
    readonly SubscriptionEvent: "SUBSCRIPTION_EVENT";
    readonly ServiceBroadcast: "SERVICE_BROADCAST";
    readonly PaymentAttempt: "PAYMENT_ATTEMPT";
    readonly PaymentMethod: "PAYMENT_METHOD";
    readonly Tag: "TAG";
    readonly TagDefinition: "TAG_DEFINITION";
    readonly Tenant: "TENANT";
    readonly TenantKvs: "TENANT_KVS";
};
export type AuditLogObjectTypeEnum = typeof AuditLogObjectTypeEnum[keyof typeof AuditLogObjectTypeEnum];
/**
 *
 * @export
 * @interface BlockPrice
 */
export interface BlockPrice {
    /**
     *
     * @type {string}
     * @memberof BlockPrice
     */
    'unitName'?: string;
    /**
     *
     * @type {number}
     * @memberof BlockPrice
     */
    'size'?: number;
    /**
     *
     * @type {number}
     * @memberof BlockPrice
     */
    'price'?: number;
    /**
     *
     * @type {number}
     * @memberof BlockPrice
     */
    'max'?: number;
}
/**
 *
 * @export
 * @interface BlockingState
 */
export interface BlockingState {
    /**
     *
     * @type {string}
     * @memberof BlockingState
     */
    'blockedId'?: string;
    /**
     *
     * @type {string}
     * @memberof BlockingState
     */
    'stateName'?: string;
    /**
     *
     * @type {string}
     * @memberof BlockingState
     */
    'service'?: string;
    /**
     *
     * @type {boolean}
     * @memberof BlockingState
     */
    'isBlockChange'?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof BlockingState
     */
    'isBlockEntitlement'?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof BlockingState
     */
    'isBlockBilling'?: boolean;
    /**
     *
     * @type {string}
     * @memberof BlockingState
     */
    'effectiveDate'?: string;
    /**
     *
     * @type {string}
     * @memberof BlockingState
     */
    'type'?: BlockingStateTypeEnum;
    /**
     *
     * @type {Array<AuditLog>}
     * @memberof BlockingState
     */
    'auditLogs'?: Array<AuditLog>;
}
export declare const BlockingStateTypeEnum: {
    readonly Subscription: "SUBSCRIPTION";
    readonly SubscriptionBundle: "SUBSCRIPTION_BUNDLE";
    readonly Account: "ACCOUNT";
};
export type BlockingStateTypeEnum = typeof BlockingStateTypeEnum[keyof typeof BlockingStateTypeEnum];
/**
 *
 * @export
 * @interface BulkSubscriptionsBundle
 */
export interface BulkSubscriptionsBundle {
    /**
     *
     * @type {Array<Subscription>}
     * @memberof BulkSubscriptionsBundle
     */
    'baseEntitlementAndAddOns': Array<Subscription>;
}
/**
 *
 * @export
 * @interface Bundle
 */
export interface Bundle {
    /**
     *
     * @type {string}
     * @memberof Bundle
     */
    'accountId': string;
    /**
     *
     * @type {string}
     * @memberof Bundle
     */
    'bundleId'?: string;
    /**
     *
     * @type {string}
     * @memberof Bundle
     */
    'externalKey'?: string;
    /**
     *
     * @type {Array<Subscription>}
     * @memberof Bundle
     */
    'subscriptions'?: Array<Subscription>;
    /**
     *
     * @type {BundleTimeline}
     * @memberof Bundle
     */
    'timeline'?: BundleTimeline;
    /**
     *
     * @type {Array<AuditLog>}
     * @memberof Bundle
     */
    'auditLogs'?: Array<AuditLog>;
}
/**
 *
 * @export
 * @interface BundleTimeline
 */
export interface BundleTimeline {
    /**
     *
     * @type {string}
     * @memberof BundleTimeline
     */
    'accountId'?: string;
    /**
     *
     * @type {string}
     * @memberof BundleTimeline
     */
    'bundleId'?: string;
    /**
     *
     * @type {string}
     * @memberof BundleTimeline
     */
    'externalKey'?: string;
    /**
     *
     * @type {Array<EventSubscription>}
     * @memberof BundleTimeline
     */
    'events'?: Array<EventSubscription>;
    /**
     *
     * @type {Array<AuditLog>}
     * @memberof BundleTimeline
     */
    'auditLogs'?: Array<AuditLog>;
}
/**
 *
 * @export
 * @interface Catalog
 */
export interface Catalog {
    /**
     *
     * @type {string}
     * @memberof Catalog
     */
    'name'?: string;
    /**
     *
     * @type {string}
     * @memberof Catalog
     */
    'effectiveDate'?: string;
    /**
     *
     * @type {Array<string>}
     * @memberof Catalog
     */
    'currencies'?: Array<CatalogCurrenciesEnum>;
    /**
     *
     * @type {Array<Unit>}
     * @memberof Catalog
     */
    'units'?: Array<Unit>;
    /**
     *
     * @type {Array<Product>}
     * @memberof Catalog
     */
    'products'?: Array<Product>;
    /**
     *
     * @type {Array<PriceList>}
     * @memberof Catalog
     */
    'priceLists'?: Array<PriceList>;
}
export declare const CatalogCurrenciesEnum: {
    readonly Aed: "AED";
    readonly Afn: "AFN";
    readonly All: "ALL";
    readonly Amd: "AMD";
    readonly Ang: "ANG";
    readonly Aoa: "AOA";
    readonly Ars: "ARS";
    readonly Aud: "AUD";
    readonly Awg: "AWG";
    readonly Azn: "AZN";
    readonly Bam: "BAM";
    readonly Bbd: "BBD";
    readonly Bdt: "BDT";
    readonly Bgn: "BGN";
    readonly Bhd: "BHD";
    readonly Bif: "BIF";
    readonly Bmd: "BMD";
    readonly Bnd: "BND";
    readonly Bob: "BOB";
    readonly Brl: "BRL";
    readonly Bsd: "BSD";
    readonly Btn: "BTN";
    readonly Bwp: "BWP";
    readonly Byr: "BYR";
    readonly Bzd: "BZD";
    readonly Cad: "CAD";
    readonly Cdf: "CDF";
    readonly Chf: "CHF";
    readonly Clp: "CLP";
    readonly Cny: "CNY";
    readonly Cop: "COP";
    readonly Crc: "CRC";
    readonly Cuc: "CUC";
    readonly Cup: "CUP";
    readonly Cve: "CVE";
    readonly Czk: "CZK";
    readonly Djf: "DJF";
    readonly Dkk: "DKK";
    readonly Dop: "DOP";
    readonly Dzd: "DZD";
    readonly Egp: "EGP";
    readonly Ern: "ERN";
    readonly Etb: "ETB";
    readonly Eur: "EUR";
    readonly Fjd: "FJD";
    readonly Fkp: "FKP";
    readonly Gbp: "GBP";
    readonly Gel: "GEL";
    readonly Ggp: "GGP";
    readonly Ghs: "GHS";
    readonly Gip: "GIP";
    readonly Gmd: "GMD";
    readonly Gnf: "GNF";
    readonly Gtq: "GTQ";
    readonly Gyd: "GYD";
    readonly Hkd: "HKD";
    readonly Hnl: "HNL";
    readonly Hrk: "HRK";
    readonly Htg: "HTG";
    readonly Huf: "HUF";
    readonly Idr: "IDR";
    readonly Ils: "ILS";
    readonly Imp: "IMP";
    readonly Inr: "INR";
    readonly Iqd: "IQD";
    readonly Irr: "IRR";
    readonly Isk: "ISK";
    readonly Jep: "JEP";
    readonly Jmd: "JMD";
    readonly Jod: "JOD";
    readonly Jpy: "JPY";
    readonly Kes: "KES";
    readonly Kgs: "KGS";
    readonly Khr: "KHR";
    readonly Kmf: "KMF";
    readonly Kpw: "KPW";
    readonly Krw: "KRW";
    readonly Kwd: "KWD";
    readonly Kyd: "KYD";
    readonly Kzt: "KZT";
    readonly Lak: "LAK";
    readonly Lbp: "LBP";
    readonly Lkr: "LKR";
    readonly Lrd: "LRD";
    readonly Lsl: "LSL";
    readonly Ltl: "LTL";
    readonly Lvl: "LVL";
    readonly Lyd: "LYD";
    readonly Mad: "MAD";
    readonly Mdl: "MDL";
    readonly Mga: "MGA";
    readonly Mkd: "MKD";
    readonly Mmk: "MMK";
    readonly Mnt: "MNT";
    readonly Mop: "MOP";
    readonly Mro: "MRO";
    readonly Mur: "MUR";
    readonly Mvr: "MVR";
    readonly Mwk: "MWK";
    readonly Mxn: "MXN";
    readonly Myr: "MYR";
    readonly Mzn: "MZN";
    readonly Nad: "NAD";
    readonly Ngn: "NGN";
    readonly Nio: "NIO";
    readonly Nok: "NOK";
    readonly Npr: "NPR";
    readonly Nzd: "NZD";
    readonly Omr: "OMR";
    readonly Pab: "PAB";
    readonly Pen: "PEN";
    readonly Pgk: "PGK";
    readonly Php: "PHP";
    readonly Pkr: "PKR";
    readonly Pln: "PLN";
    readonly Pyg: "PYG";
    readonly Qar: "QAR";
    readonly Ron: "RON";
    readonly Rsd: "RSD";
    readonly Rub: "RUB";
    readonly Rwf: "RWF";
    readonly Sar: "SAR";
    readonly Sbd: "SBD";
    readonly Scr: "SCR";
    readonly Sdg: "SDG";
    readonly Sek: "SEK";
    readonly Sgd: "SGD";
    readonly Shp: "SHP";
    readonly Sll: "SLL";
    readonly Sos: "SOS";
    readonly Spl: "SPL";
    readonly Srd: "SRD";
    readonly Std: "STD";
    readonly Svc: "SVC";
    readonly Syp: "SYP";
    readonly Szl: "SZL";
    readonly Thb: "THB";
    readonly Tjs: "TJS";
    readonly Tmt: "TMT";
    readonly Tnd: "TND";
    readonly Top: "TOP";
    readonly Try: "TRY";
    readonly Ttd: "TTD";
    readonly Tvd: "TVD";
    readonly Twd: "TWD";
    readonly Tzs: "TZS";
    readonly Uah: "UAH";
    readonly Ugx: "UGX";
    readonly Usd: "USD";
    readonly Uyu: "UYU";
    readonly Uzs: "UZS";
    readonly Vef: "VEF";
    readonly Vnd: "VND";
    readonly Vuv: "VUV";
    readonly Wst: "WST";
    readonly Xaf: "XAF";
    readonly Xcd: "XCD";
    readonly Xdr: "XDR";
    readonly Xof: "XOF";
    readonly Xpf: "XPF";
    readonly Yer: "YER";
    readonly Zar: "ZAR";
    readonly Zmw: "ZMW";
    readonly Zwd: "ZWD";
    readonly Btc: "BTC";
};
export type CatalogCurrenciesEnum = typeof CatalogCurrenciesEnum[keyof typeof CatalogCurrenciesEnum];
/**
 *
 * @export
 * @interface CatalogValidation
 */
export interface CatalogValidation {
    /**
     *
     * @type {Array<CatalogValidationError>}
     * @memberof CatalogValidation
     */
    'catalogValidationErrors'?: Array<CatalogValidationError>;
}
/**
 *
 * @export
 * @interface CatalogValidationError
 */
export interface CatalogValidationError {
    /**
     *
     * @type {string}
     * @memberof CatalogValidationError
     */
    'errorDescription'?: string;
}
/**
 *
 * @export
 * @interface ComboHostedPaymentPage
 */
export interface ComboHostedPaymentPage {
    /**
     *
     * @type {Account}
     * @memberof ComboHostedPaymentPage
     */
    'account'?: Account;
    /**
     *
     * @type {PaymentMethod}
     * @memberof ComboHostedPaymentPage
     */
    'paymentMethod'?: PaymentMethod;
    /**
     *
     * @type {HostedPaymentPageFields}
     * @memberof ComboHostedPaymentPage
     */
    'hostedPaymentPageFields'?: HostedPaymentPageFields;
    /**
     *
     * @type {Array<PluginProperty>}
     * @memberof ComboHostedPaymentPage
     */
    'paymentMethodPluginProperties'?: Array<PluginProperty>;
    /**
     *
     * @type {Array<AuditLog>}
     * @memberof ComboHostedPaymentPage
     */
    'auditLogs'?: Array<AuditLog>;
}
/**
 *
 * @export
 * @interface ComboPaymentTransaction
 */
export interface ComboPaymentTransaction {
    /**
     *
     * @type {Account}
     * @memberof ComboPaymentTransaction
     */
    'account'?: Account;
    /**
     *
     * @type {PaymentMethod}
     * @memberof ComboPaymentTransaction
     */
    'paymentMethod'?: PaymentMethod;
    /**
     *
     * @type {PaymentTransaction}
     * @memberof ComboPaymentTransaction
     */
    'transaction'?: PaymentTransaction;
    /**
     *
     * @type {Array<PluginProperty>}
     * @memberof ComboPaymentTransaction
     */
    'paymentMethodPluginProperties'?: Array<PluginProperty>;
    /**
     *
     * @type {Array<PluginProperty>}
     * @memberof ComboPaymentTransaction
     */
    'transactionPluginProperties'?: Array<PluginProperty>;
    /**
     *
     * @type {Array<AuditLog>}
     * @memberof ComboPaymentTransaction
     */
    'auditLogs'?: Array<AuditLog>;
}
/**
 *
 * @export
 * @interface CustomField
 */
export interface CustomField {
    /**
     *
     * @type {string}
     * @memberof CustomField
     */
    'customFieldId'?: string;
    /**
     *
     * @type {string}
     * @memberof CustomField
     */
    'objectId'?: string;
    /**
     *
     * @type {string}
     * @memberof CustomField
     */
    'objectType'?: CustomFieldObjectTypeEnum;
    /**
     *
     * @type {string}
     * @memberof CustomField
     */
    'name': string;
    /**
     *
     * @type {string}
     * @memberof CustomField
     */
    'value': string;
    /**
     *
     * @type {Array<AuditLog>}
     * @memberof CustomField
     */
    'auditLogs'?: Array<AuditLog>;
}
export declare const CustomFieldObjectTypeEnum: {
    readonly Account: "ACCOUNT";
    readonly AccountEmail: "ACCOUNT_EMAIL";
    readonly BlockingStates: "BLOCKING_STATES";
    readonly Bundle: "BUNDLE";
    readonly CustomField: "CUSTOM_FIELD";
    readonly Invoice: "INVOICE";
    readonly Payment: "PAYMENT";
    readonly Transaction: "TRANSACTION";
    readonly InvoiceItem: "INVOICE_ITEM";
    readonly InvoicePayment: "INVOICE_PAYMENT";
    readonly Subscription: "SUBSCRIPTION";
    readonly SubscriptionEvent: "SUBSCRIPTION_EVENT";
    readonly ServiceBroadcast: "SERVICE_BROADCAST";
    readonly PaymentAttempt: "PAYMENT_ATTEMPT";
    readonly PaymentMethod: "PAYMENT_METHOD";
    readonly Tag: "TAG";
    readonly TagDefinition: "TAG_DEFINITION";
    readonly Tenant: "TENANT";
    readonly TenantKvs: "TENANT_KVS";
};
export type CustomFieldObjectTypeEnum = typeof CustomFieldObjectTypeEnum[keyof typeof CustomFieldObjectTypeEnum];
/**
 *
 * @export
 * @interface Duration
 */
export interface Duration {
    /**
     *
     * @type {string}
     * @memberof Duration
     */
    'unit'?: DurationUnitEnum;
    /**
     *
     * @type {number}
     * @memberof Duration
     */
    'number'?: number;
}
export declare const DurationUnitEnum: {
    readonly Days: "DAYS";
    readonly Weeks: "WEEKS";
    readonly Months: "MONTHS";
    readonly Years: "YEARS";
    readonly Unlimited: "UNLIMITED";
};
export type DurationUnitEnum = typeof DurationUnitEnum[keyof typeof DurationUnitEnum];
/**
 *
 * @export
 * @interface Entity
 */
export interface Entity {
    /**
     *
     * @type {string}
     * @memberof Entity
     */
    'createdDate'?: string;
    /**
     *
     * @type {string}
     * @memberof Entity
     */
    'updatedDate'?: string;
    /**
     *
     * @type {string}
     * @memberof Entity
     */
    'id'?: string;
}
/**
 *
 * @export
 * @interface EventSubscription
 */
export interface EventSubscription {
    /**
     *
     * @type {string}
     * @memberof EventSubscription
     */
    'eventId'?: string;
    /**
     *
     * @type {string}
     * @memberof EventSubscription
     */
    'billingPeriod'?: EventSubscriptionBillingPeriodEnum;
    /**
     *
     * @type {string}
     * @memberof EventSubscription
     */
    'effectiveDate'?: string;
    /**
     *
     * @type {string}
     * @memberof EventSubscription
     */
    'catalogEffectiveDate'?: string;
    /**
     *
     * @type {string}
     * @memberof EventSubscription
     */
    'plan'?: string;
    /**
     *
     * @type {string}
     * @memberof EventSubscription
     */
    'product'?: string;
    /**
     *
     * @type {string}
     * @memberof EventSubscription
     */
    'priceList'?: string;
    /**
     *
     * @type {string}
     * @memberof EventSubscription
     */
    'eventType'?: EventSubscriptionEventTypeEnum;
    /**
     *
     * @type {boolean}
     * @memberof EventSubscription
     */
    'isBlockedBilling'?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof EventSubscription
     */
    'isBlockedEntitlement'?: boolean;
    /**
     *
     * @type {string}
     * @memberof EventSubscription
     */
    'serviceName'?: string;
    /**
     *
     * @type {string}
     * @memberof EventSubscription
     */
    'serviceStateName'?: string;
    /**
     *
     * @type {string}
     * @memberof EventSubscription
     */
    'phase'?: string;
    /**
     *
     * @type {Array<AuditLog>}
     * @memberof EventSubscription
     */
    'auditLogs'?: Array<AuditLog>;
}
export declare const EventSubscriptionBillingPeriodEnum: {
    readonly Daily: "DAILY";
    readonly Weekly: "WEEKLY";
    readonly Biweekly: "BIWEEKLY";
    readonly ThirtyDays: "THIRTY_DAYS";
    readonly ThirtyOneDays: "THIRTY_ONE_DAYS";
    readonly SixtyDays: "SIXTY_DAYS";
    readonly NinetyDays: "NINETY_DAYS";
    readonly Monthly: "MONTHLY";
    readonly Bimestrial: "BIMESTRIAL";
    readonly Quarterly: "QUARTERLY";
    readonly Triannual: "TRIANNUAL";
    readonly Biannual: "BIANNUAL";
    readonly Annual: "ANNUAL";
    readonly Sesquiennial: "SESQUIENNIAL";
    readonly Biennial: "BIENNIAL";
    readonly Triennial: "TRIENNIAL";
    readonly NoBillingPeriod: "NO_BILLING_PERIOD";
};
export type EventSubscriptionBillingPeriodEnum = typeof EventSubscriptionBillingPeriodEnum[keyof typeof EventSubscriptionBillingPeriodEnum];
export declare const EventSubscriptionEventTypeEnum: {
    readonly StartEntitlement: "START_ENTITLEMENT";
    readonly StartBilling: "START_BILLING";
    readonly PauseEntitlement: "PAUSE_ENTITLEMENT";
    readonly PauseBilling: "PAUSE_BILLING";
    readonly ResumeEntitlement: "RESUME_ENTITLEMENT";
    readonly ResumeBilling: "RESUME_BILLING";
    readonly Phase: "PHASE";
    readonly Change: "CHANGE";
    readonly StopEntitlement: "STOP_ENTITLEMENT";
    readonly StopBilling: "STOP_BILLING";
    readonly ServiceStateChange: "SERVICE_STATE_CHANGE";
};
export type EventSubscriptionEventTypeEnum = typeof EventSubscriptionEventTypeEnum[keyof typeof EventSubscriptionEventTypeEnum];
/**
 *
 * @export
 * @interface HostedPaymentPageFields
 */
export interface HostedPaymentPageFields {
    /**
     *
     * @type {Array<PluginProperty>}
     * @memberof HostedPaymentPageFields
     */
    'formFields'?: Array<PluginProperty>;
}
/**
 *
 * @export
 * @interface HostedPaymentPageFormDescriptor
 */
export interface HostedPaymentPageFormDescriptor {
    /**
     *
     * @type {string}
     * @memberof HostedPaymentPageFormDescriptor
     */
    'kbAccountId'?: string;
    /**
     *
     * @type {string}
     * @memberof HostedPaymentPageFormDescriptor
     */
    'formMethod'?: string;
    /**
     *
     * @type {string}
     * @memberof HostedPaymentPageFormDescriptor
     */
    'formUrl'?: string;
    /**
     *
     * @type {{ [key: string]: object; }}
     * @memberof HostedPaymentPageFormDescriptor
     */
    'formFields'?: {
        [key: string]: object;
    };
    /**
     *
     * @type {{ [key: string]: object; }}
     * @memberof HostedPaymentPageFormDescriptor
     */
    'properties'?: {
        [key: string]: object;
    };
    /**
     *
     * @type {Array<AuditLog>}
     * @memberof HostedPaymentPageFormDescriptor
     */
    'auditLogs'?: Array<AuditLog>;
}
/**
 *
 * @export
 * @interface Invoice
 */
export interface Invoice {
    /**
     *
     * @type {number}
     * @memberof Invoice
     */
    'amount'?: number;
    /**
     *
     * @type {string}
     * @memberof Invoice
     */
    'currency'?: InvoiceCurrencyEnum;
    /**
     *
     * @type {string}
     * @memberof Invoice
     */
    'status'?: InvoiceStatusEnum;
    /**
     *
     * @type {number}
     * @memberof Invoice
     */
    'creditAdj'?: number;
    /**
     *
     * @type {number}
     * @memberof Invoice
     */
    'refundAdj'?: number;
    /**
     *
     * @type {string}
     * @memberof Invoice
     */
    'invoiceId'?: string;
    /**
     *
     * @type {string}
     * @memberof Invoice
     */
    'invoiceDate'?: string;
    /**
     *
     * @type {string}
     * @memberof Invoice
     */
    'targetDate'?: string;
    /**
     *
     * @type {string}
     * @memberof Invoice
     */
    'invoiceNumber'?: string;
    /**
     *
     * @type {number}
     * @memberof Invoice
     */
    'balance'?: number;
    /**
     *
     * @type {string}
     * @memberof Invoice
     */
    'accountId'?: string;
    /**
     *
     * @type {string}
     * @memberof Invoice
     */
    'bundleKeys'?: string;
    /**
     *
     * @type {Array<InvoiceItem>}
     * @memberof Invoice
     */
    'credits'?: Array<InvoiceItem>;
    /**
     *
     * @type {Array<InvoiceItem>}
     * @memberof Invoice
     */
    'items'?: Array<InvoiceItem>;
    /**
     *
     * @type {Array<string>}
     * @memberof Invoice
     */
    'trackingIds'?: Array<string>;
    /**
     *
     * @type {boolean}
     * @memberof Invoice
     */
    'isParentInvoice'?: boolean;
    /**
     *
     * @type {string}
     * @memberof Invoice
     */
    'parentInvoiceId'?: string;
    /**
     *
     * @type {string}
     * @memberof Invoice
     */
    'parentAccountId'?: string;
    /**
     *
     * @type {Array<AuditLog>}
     * @memberof Invoice
     */
    'auditLogs'?: Array<AuditLog>;
}
export declare const InvoiceCurrencyEnum: {
    readonly Aed: "AED";
    readonly Afn: "AFN";
    readonly All: "ALL";
    readonly Amd: "AMD";
    readonly Ang: "ANG";
    readonly Aoa: "AOA";
    readonly Ars: "ARS";
    readonly Aud: "AUD";
    readonly Awg: "AWG";
    readonly Azn: "AZN";
    readonly Bam: "BAM";
    readonly Bbd: "BBD";
    readonly Bdt: "BDT";
    readonly Bgn: "BGN";
    readonly Bhd: "BHD";
    readonly Bif: "BIF";
    readonly Bmd: "BMD";
    readonly Bnd: "BND";
    readonly Bob: "BOB";
    readonly Brl: "BRL";
    readonly Bsd: "BSD";
    readonly Btn: "BTN";
    readonly Bwp: "BWP";
    readonly Byr: "BYR";
    readonly Bzd: "BZD";
    readonly Cad: "CAD";
    readonly Cdf: "CDF";
    readonly Chf: "CHF";
    readonly Clp: "CLP";
    readonly Cny: "CNY";
    readonly Cop: "COP";
    readonly Crc: "CRC";
    readonly Cuc: "CUC";
    readonly Cup: "CUP";
    readonly Cve: "CVE";
    readonly Czk: "CZK";
    readonly Djf: "DJF";
    readonly Dkk: "DKK";
    readonly Dop: "DOP";
    readonly Dzd: "DZD";
    readonly Egp: "EGP";
    readonly Ern: "ERN";
    readonly Etb: "ETB";
    readonly Eur: "EUR";
    readonly Fjd: "FJD";
    readonly Fkp: "FKP";
    readonly Gbp: "GBP";
    readonly Gel: "GEL";
    readonly Ggp: "GGP";
    readonly Ghs: "GHS";
    readonly Gip: "GIP";
    readonly Gmd: "GMD";
    readonly Gnf: "GNF";
    readonly Gtq: "GTQ";
    readonly Gyd: "GYD";
    readonly Hkd: "HKD";
    readonly Hnl: "HNL";
    readonly Hrk: "HRK";
    readonly Htg: "HTG";
    readonly Huf: "HUF";
    readonly Idr: "IDR";
    readonly Ils: "ILS";
    readonly Imp: "IMP";
    readonly Inr: "INR";
    readonly Iqd: "IQD";
    readonly Irr: "IRR";
    readonly Isk: "ISK";
    readonly Jep: "JEP";
    readonly Jmd: "JMD";
    readonly Jod: "JOD";
    readonly Jpy: "JPY";
    readonly Kes: "KES";
    readonly Kgs: "KGS";
    readonly Khr: "KHR";
    readonly Kmf: "KMF";
    readonly Kpw: "KPW";
    readonly Krw: "KRW";
    readonly Kwd: "KWD";
    readonly Kyd: "KYD";
    readonly Kzt: "KZT";
    readonly Lak: "LAK";
    readonly Lbp: "LBP";
    readonly Lkr: "LKR";
    readonly Lrd: "LRD";
    readonly Lsl: "LSL";
    readonly Ltl: "LTL";
    readonly Lvl: "LVL";
    readonly Lyd: "LYD";
    readonly Mad: "MAD";
    readonly Mdl: "MDL";
    readonly Mga: "MGA";
    readonly Mkd: "MKD";
    readonly Mmk: "MMK";
    readonly Mnt: "MNT";
    readonly Mop: "MOP";
    readonly Mro: "MRO";
    readonly Mur: "MUR";
    readonly Mvr: "MVR";
    readonly Mwk: "MWK";
    readonly Mxn: "MXN";
    readonly Myr: "MYR";
    readonly Mzn: "MZN";
    readonly Nad: "NAD";
    readonly Ngn: "NGN";
    readonly Nio: "NIO";
    readonly Nok: "NOK";
    readonly Npr: "NPR";
    readonly Nzd: "NZD";
    readonly Omr: "OMR";
    readonly Pab: "PAB";
    readonly Pen: "PEN";
    readonly Pgk: "PGK";
    readonly Php: "PHP";
    readonly Pkr: "PKR";
    readonly Pln: "PLN";
    readonly Pyg: "PYG";
    readonly Qar: "QAR";
    readonly Ron: "RON";
    readonly Rsd: "RSD";
    readonly Rub: "RUB";
    readonly Rwf: "RWF";
    readonly Sar: "SAR";
    readonly Sbd: "SBD";
    readonly Scr: "SCR";
    readonly Sdg: "SDG";
    readonly Sek: "SEK";
    readonly Sgd: "SGD";
    readonly Shp: "SHP";
    readonly Sll: "SLL";
    readonly Sos: "SOS";
    readonly Spl: "SPL";
    readonly Srd: "SRD";
    readonly Std: "STD";
    readonly Svc: "SVC";
    readonly Syp: "SYP";
    readonly Szl: "SZL";
    readonly Thb: "THB";
    readonly Tjs: "TJS";
    readonly Tmt: "TMT";
    readonly Tnd: "TND";
    readonly Top: "TOP";
    readonly Try: "TRY";
    readonly Ttd: "TTD";
    readonly Tvd: "TVD";
    readonly Twd: "TWD";
    readonly Tzs: "TZS";
    readonly Uah: "UAH";
    readonly Ugx: "UGX";
    readonly Usd: "USD";
    readonly Uyu: "UYU";
    readonly Uzs: "UZS";
    readonly Vef: "VEF";
    readonly Vnd: "VND";
    readonly Vuv: "VUV";
    readonly Wst: "WST";
    readonly Xaf: "XAF";
    readonly Xcd: "XCD";
    readonly Xdr: "XDR";
    readonly Xof: "XOF";
    readonly Xpf: "XPF";
    readonly Yer: "YER";
    readonly Zar: "ZAR";
    readonly Zmw: "ZMW";
    readonly Zwd: "ZWD";
    readonly Btc: "BTC";
};
export type InvoiceCurrencyEnum = typeof InvoiceCurrencyEnum[keyof typeof InvoiceCurrencyEnum];
export declare const InvoiceStatusEnum: {
    readonly Draft: "DRAFT";
    readonly Committed: "COMMITTED";
    readonly Void: "VOID";
};
export type InvoiceStatusEnum = typeof InvoiceStatusEnum[keyof typeof InvoiceStatusEnum];
/**
 *
 * @export
 * @interface InvoiceDryRun
 */
export interface InvoiceDryRun {
    /**
     *
     * @type {string}
     * @memberof InvoiceDryRun
     */
    'dryRunType'?: InvoiceDryRunDryRunTypeEnum;
    /**
     *
     * @type {string}
     * @memberof InvoiceDryRun
     */
    'dryRunAction'?: InvoiceDryRunDryRunActionEnum;
    /**
     *
     * @type {string}
     * @memberof InvoiceDryRun
     */
    'phaseType'?: InvoiceDryRunPhaseTypeEnum;
    /**
     *
     * @type {string}
     * @memberof InvoiceDryRun
     */
    'productName'?: string;
    /**
     *
     * @type {string}
     * @memberof InvoiceDryRun
     */
    'productCategory'?: InvoiceDryRunProductCategoryEnum;
    /**
     *
     * @type {string}
     * @memberof InvoiceDryRun
     */
    'billingPeriod'?: InvoiceDryRunBillingPeriodEnum;
    /**
     *
     * @type {string}
     * @memberof InvoiceDryRun
     */
    'priceListName'?: string;
    /**
     *
     * @type {string}
     * @memberof InvoiceDryRun
     */
    'subscriptionId'?: string;
    /**
     *
     * @type {string}
     * @memberof InvoiceDryRun
     */
    'bundleId'?: string;
    /**
     *
     * @type {string}
     * @memberof InvoiceDryRun
     */
    'effectiveDate'?: string;
    /**
     *
     * @type {string}
     * @memberof InvoiceDryRun
     */
    'billingPolicy'?: InvoiceDryRunBillingPolicyEnum;
    /**
     *
     * @type {Array<PhasePrice>}
     * @memberof InvoiceDryRun
     */
    'priceOverrides'?: Array<PhasePrice>;
    /**
     *
     * @type {string}
     * @memberof InvoiceDryRun
     */
    'planName'?: string;
}
export declare const InvoiceDryRunDryRunTypeEnum: {
    readonly TargetDate: "TARGET_DATE";
    readonly UpcomingInvoice: "UPCOMING_INVOICE";
    readonly SubscriptionAction: "SUBSCRIPTION_ACTION";
};
export type InvoiceDryRunDryRunTypeEnum = typeof InvoiceDryRunDryRunTypeEnum[keyof typeof InvoiceDryRunDryRunTypeEnum];
export declare const InvoiceDryRunDryRunActionEnum: {
    readonly StartEntitlement: "START_ENTITLEMENT";
    readonly StartBilling: "START_BILLING";
    readonly PauseEntitlement: "PAUSE_ENTITLEMENT";
    readonly PauseBilling: "PAUSE_BILLING";
    readonly ResumeEntitlement: "RESUME_ENTITLEMENT";
    readonly ResumeBilling: "RESUME_BILLING";
    readonly Phase: "PHASE";
    readonly Change: "CHANGE";
    readonly StopEntitlement: "STOP_ENTITLEMENT";
    readonly StopBilling: "STOP_BILLING";
    readonly ServiceStateChange: "SERVICE_STATE_CHANGE";
};
export type InvoiceDryRunDryRunActionEnum = typeof InvoiceDryRunDryRunActionEnum[keyof typeof InvoiceDryRunDryRunActionEnum];
export declare const InvoiceDryRunPhaseTypeEnum: {
    readonly Trial: "TRIAL";
    readonly Discount: "DISCOUNT";
    readonly Fixedterm: "FIXEDTERM";
    readonly Evergreen: "EVERGREEN";
};
export type InvoiceDryRunPhaseTypeEnum = typeof InvoiceDryRunPhaseTypeEnum[keyof typeof InvoiceDryRunPhaseTypeEnum];
export declare const InvoiceDryRunProductCategoryEnum: {
    readonly Base: "BASE";
    readonly AddOn: "ADD_ON";
    readonly Standalone: "STANDALONE";
};
export type InvoiceDryRunProductCategoryEnum = typeof InvoiceDryRunProductCategoryEnum[keyof typeof InvoiceDryRunProductCategoryEnum];
export declare const InvoiceDryRunBillingPeriodEnum: {
    readonly Daily: "DAILY";
    readonly Weekly: "WEEKLY";
    readonly Biweekly: "BIWEEKLY";
    readonly ThirtyDays: "THIRTY_DAYS";
    readonly ThirtyOneDays: "THIRTY_ONE_DAYS";
    readonly SixtyDays: "SIXTY_DAYS";
    readonly NinetyDays: "NINETY_DAYS";
    readonly Monthly: "MONTHLY";
    readonly Bimestrial: "BIMESTRIAL";
    readonly Quarterly: "QUARTERLY";
    readonly Triannual: "TRIANNUAL";
    readonly Biannual: "BIANNUAL";
    readonly Annual: "ANNUAL";
    readonly Sesquiennial: "SESQUIENNIAL";
    readonly Biennial: "BIENNIAL";
    readonly Triennial: "TRIENNIAL";
    readonly NoBillingPeriod: "NO_BILLING_PERIOD";
};
export type InvoiceDryRunBillingPeriodEnum = typeof InvoiceDryRunBillingPeriodEnum[keyof typeof InvoiceDryRunBillingPeriodEnum];
export declare const InvoiceDryRunBillingPolicyEnum: {
    readonly StartOfTerm: "START_OF_TERM";
    readonly EndOfTerm: "END_OF_TERM";
    readonly Immediate: "IMMEDIATE";
    readonly Illegal: "ILLEGAL";
};
export type InvoiceDryRunBillingPolicyEnum = typeof InvoiceDryRunBillingPolicyEnum[keyof typeof InvoiceDryRunBillingPolicyEnum];
/**
 *
 * @export
 * @interface InvoiceItem
 */
export interface InvoiceItem {
    /**
     *
     * @type {string}
     * @memberof InvoiceItem
     */
    'invoiceItemId': string;
    /**
     *
     * @type {string}
     * @memberof InvoiceItem
     */
    'invoiceId'?: string;
    /**
     *
     * @type {string}
     * @memberof InvoiceItem
     */
    'linkedInvoiceItemId'?: string;
    /**
     *
     * @type {string}
     * @memberof InvoiceItem
     */
    'accountId': string;
    /**
     *
     * @type {string}
     * @memberof InvoiceItem
     */
    'childAccountId'?: string;
    /**
     *
     * @type {string}
     * @memberof InvoiceItem
     */
    'bundleId'?: string;
    /**
     *
     * @type {string}
     * @memberof InvoiceItem
     */
    'subscriptionId'?: string;
    /**
     *
     * @type {string}
     * @memberof InvoiceItem
     */
    'productName'?: string;
    /**
     *
     * @type {string}
     * @memberof InvoiceItem
     */
    'planName'?: string;
    /**
     *
     * @type {string}
     * @memberof InvoiceItem
     */
    'phaseName'?: string;
    /**
     *
     * @type {string}
     * @memberof InvoiceItem
     */
    'usageName'?: string;
    /**
     *
     * @type {string}
     * @memberof InvoiceItem
     */
    'prettyProductName'?: string;
    /**
     *
     * @type {string}
     * @memberof InvoiceItem
     */
    'prettyPlanName'?: string;
    /**
     *
     * @type {string}
     * @memberof InvoiceItem
     */
    'prettyPhaseName'?: string;
    /**
     *
     * @type {string}
     * @memberof InvoiceItem
     */
    'prettyUsageName'?: string;
    /**
     *
     * @type {string}
     * @memberof InvoiceItem
     */
    'itemType'?: InvoiceItemItemTypeEnum;
    /**
     *
     * @type {string}
     * @memberof InvoiceItem
     */
    'description'?: string;
    /**
     *
     * @type {string}
     * @memberof InvoiceItem
     */
    'startDate'?: string;
    /**
     *
     * @type {string}
     * @memberof InvoiceItem
     */
    'endDate'?: string;
    /**
     *
     * @type {number}
     * @memberof InvoiceItem
     */
    'amount'?: number;
    /**
     *
     * @type {number}
     * @memberof InvoiceItem
     */
    'rate'?: number;
    /**
     *
     * @type {string}
     * @memberof InvoiceItem
     */
    'currency'?: InvoiceItemCurrencyEnum;
    /**
     *
     * @type {number}
     * @memberof InvoiceItem
     */
    'quantity'?: number;
    /**
     *
     * @type {string}
     * @memberof InvoiceItem
     */
    'itemDetails'?: string;
    /**
     *
     * @type {string}
     * @memberof InvoiceItem
     */
    'catalogEffectiveDate'?: string;
    /**
     *
     * @type {Array<InvoiceItem>}
     * @memberof InvoiceItem
     */
    'childItems'?: Array<InvoiceItem>;
    /**
     *
     * @type {Array<AuditLog>}
     * @memberof InvoiceItem
     */
    'auditLogs'?: Array<AuditLog>;
}
export declare const InvoiceItemItemTypeEnum: {
    readonly ExternalCharge: "EXTERNAL_CHARGE";
    readonly Fixed: "FIXED";
    readonly Recurring: "RECURRING";
    readonly RepairAdj: "REPAIR_ADJ";
    readonly CbaAdj: "CBA_ADJ";
    readonly CreditAdj: "CREDIT_ADJ";
    readonly ItemAdj: "ITEM_ADJ";
    readonly Usage: "USAGE";
    readonly Tax: "TAX";
    readonly ParentSummary: "PARENT_SUMMARY";
};
export type InvoiceItemItemTypeEnum = typeof InvoiceItemItemTypeEnum[keyof typeof InvoiceItemItemTypeEnum];
export declare const InvoiceItemCurrencyEnum: {
    readonly Aed: "AED";
    readonly Afn: "AFN";
    readonly All: "ALL";
    readonly Amd: "AMD";
    readonly Ang: "ANG";
    readonly Aoa: "AOA";
    readonly Ars: "ARS";
    readonly Aud: "AUD";
    readonly Awg: "AWG";
    readonly Azn: "AZN";
    readonly Bam: "BAM";
    readonly Bbd: "BBD";
    readonly Bdt: "BDT";
    readonly Bgn: "BGN";
    readonly Bhd: "BHD";
    readonly Bif: "BIF";
    readonly Bmd: "BMD";
    readonly Bnd: "BND";
    readonly Bob: "BOB";
    readonly Brl: "BRL";
    readonly Bsd: "BSD";
    readonly Btn: "BTN";
    readonly Bwp: "BWP";
    readonly Byr: "BYR";
    readonly Bzd: "BZD";
    readonly Cad: "CAD";
    readonly Cdf: "CDF";
    readonly Chf: "CHF";
    readonly Clp: "CLP";
    readonly Cny: "CNY";
    readonly Cop: "COP";
    readonly Crc: "CRC";
    readonly Cuc: "CUC";
    readonly Cup: "CUP";
    readonly Cve: "CVE";
    readonly Czk: "CZK";
    readonly Djf: "DJF";
    readonly Dkk: "DKK";
    readonly Dop: "DOP";
    readonly Dzd: "DZD";
    readonly Egp: "EGP";
    readonly Ern: "ERN";
    readonly Etb: "ETB";
    readonly Eur: "EUR";
    readonly Fjd: "FJD";
    readonly Fkp: "FKP";
    readonly Gbp: "GBP";
    readonly Gel: "GEL";
    readonly Ggp: "GGP";
    readonly Ghs: "GHS";
    readonly Gip: "GIP";
    readonly Gmd: "GMD";
    readonly Gnf: "GNF";
    readonly Gtq: "GTQ";
    readonly Gyd: "GYD";
    readonly Hkd: "HKD";
    readonly Hnl: "HNL";
    readonly Hrk: "HRK";
    readonly Htg: "HTG";
    readonly Huf: "HUF";
    readonly Idr: "IDR";
    readonly Ils: "ILS";
    readonly Imp: "IMP";
    readonly Inr: "INR";
    readonly Iqd: "IQD";
    readonly Irr: "IRR";
    readonly Isk: "ISK";
    readonly Jep: "JEP";
    readonly Jmd: "JMD";
    readonly Jod: "JOD";
    readonly Jpy: "JPY";
    readonly Kes: "KES";
    readonly Kgs: "KGS";
    readonly Khr: "KHR";
    readonly Kmf: "KMF";
    readonly Kpw: "KPW";
    readonly Krw: "KRW";
    readonly Kwd: "KWD";
    readonly Kyd: "KYD";
    readonly Kzt: "KZT";
    readonly Lak: "LAK";
    readonly Lbp: "LBP";
    readonly Lkr: "LKR";
    readonly Lrd: "LRD";
    readonly Lsl: "LSL";
    readonly Ltl: "LTL";
    readonly Lvl: "LVL";
    readonly Lyd: "LYD";
    readonly Mad: "MAD";
    readonly Mdl: "MDL";
    readonly Mga: "MGA";
    readonly Mkd: "MKD";
    readonly Mmk: "MMK";
    readonly Mnt: "MNT";
    readonly Mop: "MOP";
    readonly Mro: "MRO";
    readonly Mur: "MUR";
    readonly Mvr: "MVR";
    readonly Mwk: "MWK";
    readonly Mxn: "MXN";
    readonly Myr: "MYR";
    readonly Mzn: "MZN";
    readonly Nad: "NAD";
    readonly Ngn: "NGN";
    readonly Nio: "NIO";
    readonly Nok: "NOK";
    readonly Npr: "NPR";
    readonly Nzd: "NZD";
    readonly Omr: "OMR";
    readonly Pab: "PAB";
    readonly Pen: "PEN";
    readonly Pgk: "PGK";
    readonly Php: "PHP";
    readonly Pkr: "PKR";
    readonly Pln: "PLN";
    readonly Pyg: "PYG";
    readonly Qar: "QAR";
    readonly Ron: "RON";
    readonly Rsd: "RSD";
    readonly Rub: "RUB";
    readonly Rwf: "RWF";
    readonly Sar: "SAR";
    readonly Sbd: "SBD";
    readonly Scr: "SCR";
    readonly Sdg: "SDG";
    readonly Sek: "SEK";
    readonly Sgd: "SGD";
    readonly Shp: "SHP";
    readonly Sll: "SLL";
    readonly Sos: "SOS";
    readonly Spl: "SPL";
    readonly Srd: "SRD";
    readonly Std: "STD";
    readonly Svc: "SVC";
    readonly Syp: "SYP";
    readonly Szl: "SZL";
    readonly Thb: "THB";
    readonly Tjs: "TJS";
    readonly Tmt: "TMT";
    readonly Tnd: "TND";
    readonly Top: "TOP";
    readonly Try: "TRY";
    readonly Ttd: "TTD";
    readonly Tvd: "TVD";
    readonly Twd: "TWD";
    readonly Tzs: "TZS";
    readonly Uah: "UAH";
    readonly Ugx: "UGX";
    readonly Usd: "USD";
    readonly Uyu: "UYU";
    readonly Uzs: "UZS";
    readonly Vef: "VEF";
    readonly Vnd: "VND";
    readonly Vuv: "VUV";
    readonly Wst: "WST";
    readonly Xaf: "XAF";
    readonly Xcd: "XCD";
    readonly Xdr: "XDR";
    readonly Xof: "XOF";
    readonly Xpf: "XPF";
    readonly Yer: "YER";
    readonly Zar: "ZAR";
    readonly Zmw: "ZMW";
    readonly Zwd: "ZWD";
    readonly Btc: "BTC";
};
export type InvoiceItemCurrencyEnum = typeof InvoiceItemCurrencyEnum[keyof typeof InvoiceItemCurrencyEnum];
/**
 *
 * @export
 * @interface InvoicePayment
 */
export interface InvoicePayment {
    /**
     *
     * @type {string}
     * @memberof InvoicePayment
     */
    'targetInvoiceId'?: string;
    /**
     *
     * @type {string}
     * @memberof InvoicePayment
     */
    'accountId'?: string;
    /**
     *
     * @type {string}
     * @memberof InvoicePayment
     */
    'paymentId'?: string;
    /**
     *
     * @type {string}
     * @memberof InvoicePayment
     */
    'paymentNumber'?: string;
    /**
     *
     * @type {string}
     * @memberof InvoicePayment
     */
    'paymentExternalKey'?: string;
    /**
     *
     * @type {number}
     * @memberof InvoicePayment
     */
    'authAmount'?: number;
    /**
     *
     * @type {number}
     * @memberof InvoicePayment
     */
    'capturedAmount'?: number;
    /**
     *
     * @type {number}
     * @memberof InvoicePayment
     */
    'purchasedAmount'?: number;
    /**
     *
     * @type {number}
     * @memberof InvoicePayment
     */
    'refundedAmount'?: number;
    /**
     *
     * @type {number}
     * @memberof InvoicePayment
     */
    'creditedAmount'?: number;
    /**
     *
     * @type {string}
     * @memberof InvoicePayment
     */
    'currency'?: InvoicePaymentCurrencyEnum;
    /**
     *
     * @type {string}
     * @memberof InvoicePayment
     */
    'paymentMethodId'?: string;
    /**
     *
     * @type {Array<PaymentTransaction>}
     * @memberof InvoicePayment
     */
    'transactions'?: Array<PaymentTransaction>;
    /**
     *
     * @type {Array<PaymentAttempt>}
     * @memberof InvoicePayment
     */
    'paymentAttempts'?: Array<PaymentAttempt>;
    /**
     *
     * @type {Array<AuditLog>}
     * @memberof InvoicePayment
     */
    'auditLogs'?: Array<AuditLog>;
}
export declare const InvoicePaymentCurrencyEnum: {
    readonly Aed: "AED";
    readonly Afn: "AFN";
    readonly All: "ALL";
    readonly Amd: "AMD";
    readonly Ang: "ANG";
    readonly Aoa: "AOA";
    readonly Ars: "ARS";
    readonly Aud: "AUD";
    readonly Awg: "AWG";
    readonly Azn: "AZN";
    readonly Bam: "BAM";
    readonly Bbd: "BBD";
    readonly Bdt: "BDT";
    readonly Bgn: "BGN";
    readonly Bhd: "BHD";
    readonly Bif: "BIF";
    readonly Bmd: "BMD";
    readonly Bnd: "BND";
    readonly Bob: "BOB";
    readonly Brl: "BRL";
    readonly Bsd: "BSD";
    readonly Btn: "BTN";
    readonly Bwp: "BWP";
    readonly Byr: "BYR";
    readonly Bzd: "BZD";
    readonly Cad: "CAD";
    readonly Cdf: "CDF";
    readonly Chf: "CHF";
    readonly Clp: "CLP";
    readonly Cny: "CNY";
    readonly Cop: "COP";
    readonly Crc: "CRC";
    readonly Cuc: "CUC";
    readonly Cup: "CUP";
    readonly Cve: "CVE";
    readonly Czk: "CZK";
    readonly Djf: "DJF";
    readonly Dkk: "DKK";
    readonly Dop: "DOP";
    readonly Dzd: "DZD";
    readonly Egp: "EGP";
    readonly Ern: "ERN";
    readonly Etb: "ETB";
    readonly Eur: "EUR";
    readonly Fjd: "FJD";
    readonly Fkp: "FKP";
    readonly Gbp: "GBP";
    readonly Gel: "GEL";
    readonly Ggp: "GGP";
    readonly Ghs: "GHS";
    readonly Gip: "GIP";
    readonly Gmd: "GMD";
    readonly Gnf: "GNF";
    readonly Gtq: "GTQ";
    readonly Gyd: "GYD";
    readonly Hkd: "HKD";
    readonly Hnl: "HNL";
    readonly Hrk: "HRK";
    readonly Htg: "HTG";
    readonly Huf: "HUF";
    readonly Idr: "IDR";
    readonly Ils: "ILS";
    readonly Imp: "IMP";
    readonly Inr: "INR";
    readonly Iqd: "IQD";
    readonly Irr: "IRR";
    readonly Isk: "ISK";
    readonly Jep: "JEP";
    readonly Jmd: "JMD";
    readonly Jod: "JOD";
    readonly Jpy: "JPY";
    readonly Kes: "KES";
    readonly Kgs: "KGS";
    readonly Khr: "KHR";
    readonly Kmf: "KMF";
    readonly Kpw: "KPW";
    readonly Krw: "KRW";
    readonly Kwd: "KWD";
    readonly Kyd: "KYD";
    readonly Kzt: "KZT";
    readonly Lak: "LAK";
    readonly Lbp: "LBP";
    readonly Lkr: "LKR";
    readonly Lrd: "LRD";
    readonly Lsl: "LSL";
    readonly Ltl: "LTL";
    readonly Lvl: "LVL";
    readonly Lyd: "LYD";
    readonly Mad: "MAD";
    readonly Mdl: "MDL";
    readonly Mga: "MGA";
    readonly Mkd: "MKD";
    readonly Mmk: "MMK";
    readonly Mnt: "MNT";
    readonly Mop: "MOP";
    readonly Mro: "MRO";
    readonly Mur: "MUR";
    readonly Mvr: "MVR";
    readonly Mwk: "MWK";
    readonly Mxn: "MXN";
    readonly Myr: "MYR";
    readonly Mzn: "MZN";
    readonly Nad: "NAD";
    readonly Ngn: "NGN";
    readonly Nio: "NIO";
    readonly Nok: "NOK";
    readonly Npr: "NPR";
    readonly Nzd: "NZD";
    readonly Omr: "OMR";
    readonly Pab: "PAB";
    readonly Pen: "PEN";
    readonly Pgk: "PGK";
    readonly Php: "PHP";
    readonly Pkr: "PKR";
    readonly Pln: "PLN";
    readonly Pyg: "PYG";
    readonly Qar: "QAR";
    readonly Ron: "RON";
    readonly Rsd: "RSD";
    readonly Rub: "RUB";
    readonly Rwf: "RWF";
    readonly Sar: "SAR";
    readonly Sbd: "SBD";
    readonly Scr: "SCR";
    readonly Sdg: "SDG";
    readonly Sek: "SEK";
    readonly Sgd: "SGD";
    readonly Shp: "SHP";
    readonly Sll: "SLL";
    readonly Sos: "SOS";
    readonly Spl: "SPL";
    readonly Srd: "SRD";
    readonly Std: "STD";
    readonly Svc: "SVC";
    readonly Syp: "SYP";
    readonly Szl: "SZL";
    readonly Thb: "THB";
    readonly Tjs: "TJS";
    readonly Tmt: "TMT";
    readonly Tnd: "TND";
    readonly Top: "TOP";
    readonly Try: "TRY";
    readonly Ttd: "TTD";
    readonly Tvd: "TVD";
    readonly Twd: "TWD";
    readonly Tzs: "TZS";
    readonly Uah: "UAH";
    readonly Ugx: "UGX";
    readonly Usd: "USD";
    readonly Uyu: "UYU";
    readonly Uzs: "UZS";
    readonly Vef: "VEF";
    readonly Vnd: "VND";
    readonly Vuv: "VUV";
    readonly Wst: "WST";
    readonly Xaf: "XAF";
    readonly Xcd: "XCD";
    readonly Xdr: "XDR";
    readonly Xof: "XOF";
    readonly Xpf: "XPF";
    readonly Yer: "YER";
    readonly Zar: "ZAR";
    readonly Zmw: "ZMW";
    readonly Zwd: "ZWD";
    readonly Btc: "BTC";
};
export type InvoicePaymentCurrencyEnum = typeof InvoicePaymentCurrencyEnum[keyof typeof InvoicePaymentCurrencyEnum];
/**
 *
 * @export
 * @interface InvoicePaymentTransaction
 */
export interface InvoicePaymentTransaction {
    /**
     *
     * @type {string}
     * @memberof InvoicePaymentTransaction
     */
    'transactionId'?: string;
    /**
     *
     * @type {string}
     * @memberof InvoicePaymentTransaction
     */
    'transactionExternalKey'?: string;
    /**
     * Associated payment id, required when notifying state transitions
     * @type {string}
     * @memberof InvoicePaymentTransaction
     */
    'paymentId'?: string;
    /**
     *
     * @type {string}
     * @memberof InvoicePaymentTransaction
     */
    'paymentExternalKey'?: string;
    /**
     *
     * @type {string}
     * @memberof InvoicePaymentTransaction
     */
    'transactionType'?: InvoicePaymentTransactionTransactionTypeEnum;
    /**
     * Transaction amount, required except for void operations
     * @type {number}
     * @memberof InvoicePaymentTransaction
     */
    'amount'?: number;
    /**
     * Amount currency (account currency unless specified)
     * @type {string}
     * @memberof InvoicePaymentTransaction
     */
    'currency'?: InvoicePaymentTransactionCurrencyEnum;
    /**
     *
     * @type {string}
     * @memberof InvoicePaymentTransaction
     */
    'effectiveDate'?: string;
    /**
     *
     * @type {number}
     * @memberof InvoicePaymentTransaction
     */
    'processedAmount'?: number;
    /**
     *
     * @type {string}
     * @memberof InvoicePaymentTransaction
     */
    'processedCurrency'?: InvoicePaymentTransactionProcessedCurrencyEnum;
    /**
     * Transaction status, required for state change notifications
     * @type {string}
     * @memberof InvoicePaymentTransaction
     */
    'status'?: InvoicePaymentTransactionStatusEnum;
    /**
     *
     * @type {string}
     * @memberof InvoicePaymentTransaction
     */
    'gatewayErrorCode'?: string;
    /**
     *
     * @type {string}
     * @memberof InvoicePaymentTransaction
     */
    'gatewayErrorMsg'?: string;
    /**
     *
     * @type {string}
     * @memberof InvoicePaymentTransaction
     */
    'firstPaymentReferenceId'?: string;
    /**
     *
     * @type {string}
     * @memberof InvoicePaymentTransaction
     */
    'secondPaymentReferenceId'?: string;
    /**
     *
     * @type {Array<PluginProperty>}
     * @memberof InvoicePaymentTransaction
     */
    'properties'?: Array<PluginProperty>;
    /**
     *
     * @type {boolean}
     * @memberof InvoicePaymentTransaction
     */
    'isAdjusted'?: boolean;
    /**
     *
     * @type {Array<InvoiceItem>}
     * @memberof InvoicePaymentTransaction
     */
    'adjustments'?: Array<InvoiceItem>;
    /**
     *
     * @type {Array<AuditLog>}
     * @memberof InvoicePaymentTransaction
     */
    'auditLogs'?: Array<AuditLog>;
}
export declare const InvoicePaymentTransactionTransactionTypeEnum: {
    readonly Authorize: "AUTHORIZE";
    readonly Capture: "CAPTURE";
    readonly Chargeback: "CHARGEBACK";
    readonly Credit: "CREDIT";
    readonly Purchase: "PURCHASE";
    readonly Refund: "REFUND";
    readonly Void: "VOID";
};
export type InvoicePaymentTransactionTransactionTypeEnum = typeof InvoicePaymentTransactionTransactionTypeEnum[keyof typeof InvoicePaymentTransactionTransactionTypeEnum];
export declare const InvoicePaymentTransactionCurrencyEnum: {
    readonly Aed: "AED";
    readonly Afn: "AFN";
    readonly All: "ALL";
    readonly Amd: "AMD";
    readonly Ang: "ANG";
    readonly Aoa: "AOA";
    readonly Ars: "ARS";
    readonly Aud: "AUD";
    readonly Awg: "AWG";
    readonly Azn: "AZN";
    readonly Bam: "BAM";
    readonly Bbd: "BBD";
    readonly Bdt: "BDT";
    readonly Bgn: "BGN";
    readonly Bhd: "BHD";
    readonly Bif: "BIF";
    readonly Bmd: "BMD";
    readonly Bnd: "BND";
    readonly Bob: "BOB";
    readonly Brl: "BRL";
    readonly Bsd: "BSD";
    readonly Btn: "BTN";
    readonly Bwp: "BWP";
    readonly Byr: "BYR";
    readonly Bzd: "BZD";
    readonly Cad: "CAD";
    readonly Cdf: "CDF";
    readonly Chf: "CHF";
    readonly Clp: "CLP";
    readonly Cny: "CNY";
    readonly Cop: "COP";
    readonly Crc: "CRC";
    readonly Cuc: "CUC";
    readonly Cup: "CUP";
    readonly Cve: "CVE";
    readonly Czk: "CZK";
    readonly Djf: "DJF";
    readonly Dkk: "DKK";
    readonly Dop: "DOP";
    readonly Dzd: "DZD";
    readonly Egp: "EGP";
    readonly Ern: "ERN";
    readonly Etb: "ETB";
    readonly Eur: "EUR";
    readonly Fjd: "FJD";
    readonly Fkp: "FKP";
    readonly Gbp: "GBP";
    readonly Gel: "GEL";
    readonly Ggp: "GGP";
    readonly Ghs: "GHS";
    readonly Gip: "GIP";
    readonly Gmd: "GMD";
    readonly Gnf: "GNF";
    readonly Gtq: "GTQ";
    readonly Gyd: "GYD";
    readonly Hkd: "HKD";
    readonly Hnl: "HNL";
    readonly Hrk: "HRK";
    readonly Htg: "HTG";
    readonly Huf: "HUF";
    readonly Idr: "IDR";
    readonly Ils: "ILS";
    readonly Imp: "IMP";
    readonly Inr: "INR";
    readonly Iqd: "IQD";
    readonly Irr: "IRR";
    readonly Isk: "ISK";
    readonly Jep: "JEP";
    readonly Jmd: "JMD";
    readonly Jod: "JOD";
    readonly Jpy: "JPY";
    readonly Kes: "KES";
    readonly Kgs: "KGS";
    readonly Khr: "KHR";
    readonly Kmf: "KMF";
    readonly Kpw: "KPW";
    readonly Krw: "KRW";
    readonly Kwd: "KWD";
    readonly Kyd: "KYD";
    readonly Kzt: "KZT";
    readonly Lak: "LAK";
    readonly Lbp: "LBP";
    readonly Lkr: "LKR";
    readonly Lrd: "LRD";
    readonly Lsl: "LSL";
    readonly Ltl: "LTL";
    readonly Lvl: "LVL";
    readonly Lyd: "LYD";
    readonly Mad: "MAD";
    readonly Mdl: "MDL";
    readonly Mga: "MGA";
    readonly Mkd: "MKD";
    readonly Mmk: "MMK";
    readonly Mnt: "MNT";
    readonly Mop: "MOP";
    readonly Mro: "MRO";
    readonly Mur: "MUR";
    readonly Mvr: "MVR";
    readonly Mwk: "MWK";
    readonly Mxn: "MXN";
    readonly Myr: "MYR";
    readonly Mzn: "MZN";
    readonly Nad: "NAD";
    readonly Ngn: "NGN";
    readonly Nio: "NIO";
    readonly Nok: "NOK";
    readonly Npr: "NPR";
    readonly Nzd: "NZD";
    readonly Omr: "OMR";
    readonly Pab: "PAB";
    readonly Pen: "PEN";
    readonly Pgk: "PGK";
    readonly Php: "PHP";
    readonly Pkr: "PKR";
    readonly Pln: "PLN";
    readonly Pyg: "PYG";
    readonly Qar: "QAR";
    readonly Ron: "RON";
    readonly Rsd: "RSD";
    readonly Rub: "RUB";
    readonly Rwf: "RWF";
    readonly Sar: "SAR";
    readonly Sbd: "SBD";
    readonly Scr: "SCR";
    readonly Sdg: "SDG";
    readonly Sek: "SEK";
    readonly Sgd: "SGD";
    readonly Shp: "SHP";
    readonly Sll: "SLL";
    readonly Sos: "SOS";
    readonly Spl: "SPL";
    readonly Srd: "SRD";
    readonly Std: "STD";
    readonly Svc: "SVC";
    readonly Syp: "SYP";
    readonly Szl: "SZL";
    readonly Thb: "THB";
    readonly Tjs: "TJS";
    readonly Tmt: "TMT";
    readonly Tnd: "TND";
    readonly Top: "TOP";
    readonly Try: "TRY";
    readonly Ttd: "TTD";
    readonly Tvd: "TVD";
    readonly Twd: "TWD";
    readonly Tzs: "TZS";
    readonly Uah: "UAH";
    readonly Ugx: "UGX";
    readonly Usd: "USD";
    readonly Uyu: "UYU";
    readonly Uzs: "UZS";
    readonly Vef: "VEF";
    readonly Vnd: "VND";
    readonly Vuv: "VUV";
    readonly Wst: "WST";
    readonly Xaf: "XAF";
    readonly Xcd: "XCD";
    readonly Xdr: "XDR";
    readonly Xof: "XOF";
    readonly Xpf: "XPF";
    readonly Yer: "YER";
    readonly Zar: "ZAR";
    readonly Zmw: "ZMW";
    readonly Zwd: "ZWD";
    readonly Btc: "BTC";
};
export type InvoicePaymentTransactionCurrencyEnum = typeof InvoicePaymentTransactionCurrencyEnum[keyof typeof InvoicePaymentTransactionCurrencyEnum];
export declare const InvoicePaymentTransactionProcessedCurrencyEnum: {
    readonly Aed: "AED";
    readonly Afn: "AFN";
    readonly All: "ALL";
    readonly Amd: "AMD";
    readonly Ang: "ANG";
    readonly Aoa: "AOA";
    readonly Ars: "ARS";
    readonly Aud: "AUD";
    readonly Awg: "AWG";
    readonly Azn: "AZN";
    readonly Bam: "BAM";
    readonly Bbd: "BBD";
    readonly Bdt: "BDT";
    readonly Bgn: "BGN";
    readonly Bhd: "BHD";
    readonly Bif: "BIF";
    readonly Bmd: "BMD";
    readonly Bnd: "BND";
    readonly Bob: "BOB";
    readonly Brl: "BRL";
    readonly Bsd: "BSD";
    readonly Btn: "BTN";
    readonly Bwp: "BWP";
    readonly Byr: "BYR";
    readonly Bzd: "BZD";
    readonly Cad: "CAD";
    readonly Cdf: "CDF";
    readonly Chf: "CHF";
    readonly Clp: "CLP";
    readonly Cny: "CNY";
    readonly Cop: "COP";
    readonly Crc: "CRC";
    readonly Cuc: "CUC";
    readonly Cup: "CUP";
    readonly Cve: "CVE";
    readonly Czk: "CZK";
    readonly Djf: "DJF";
    readonly Dkk: "DKK";
    readonly Dop: "DOP";
    readonly Dzd: "DZD";
    readonly Egp: "EGP";
    readonly Ern: "ERN";
    readonly Etb: "ETB";
    readonly Eur: "EUR";
    readonly Fjd: "FJD";
    readonly Fkp: "FKP";
    readonly Gbp: "GBP";
    readonly Gel: "GEL";
    readonly Ggp: "GGP";
    readonly Ghs: "GHS";
    readonly Gip: "GIP";
    readonly Gmd: "GMD";
    readonly Gnf: "GNF";
    readonly Gtq: "GTQ";
    readonly Gyd: "GYD";
    readonly Hkd: "HKD";
    readonly Hnl: "HNL";
    readonly Hrk: "HRK";
    readonly Htg: "HTG";
    readonly Huf: "HUF";
    readonly Idr: "IDR";
    readonly Ils: "ILS";
    readonly Imp: "IMP";
    readonly Inr: "INR";
    readonly Iqd: "IQD";
    readonly Irr: "IRR";
    readonly Isk: "ISK";
    readonly Jep: "JEP";
    readonly Jmd: "JMD";
    readonly Jod: "JOD";
    readonly Jpy: "JPY";
    readonly Kes: "KES";
    readonly Kgs: "KGS";
    readonly Khr: "KHR";
    readonly Kmf: "KMF";
    readonly Kpw: "KPW";
    readonly Krw: "KRW";
    readonly Kwd: "KWD";
    readonly Kyd: "KYD";
    readonly Kzt: "KZT";
    readonly Lak: "LAK";
    readonly Lbp: "LBP";
    readonly Lkr: "LKR";
    readonly Lrd: "LRD";
    readonly Lsl: "LSL";
    readonly Ltl: "LTL";
    readonly Lvl: "LVL";
    readonly Lyd: "LYD";
    readonly Mad: "MAD";
    readonly Mdl: "MDL";
    readonly Mga: "MGA";
    readonly Mkd: "MKD";
    readonly Mmk: "MMK";
    readonly Mnt: "MNT";
    readonly Mop: "MOP";
    readonly Mro: "MRO";
    readonly Mur: "MUR";
    readonly Mvr: "MVR";
    readonly Mwk: "MWK";
    readonly Mxn: "MXN";
    readonly Myr: "MYR";
    readonly Mzn: "MZN";
    readonly Nad: "NAD";
    readonly Ngn: "NGN";
    readonly Nio: "NIO";
    readonly Nok: "NOK";
    readonly Npr: "NPR";
    readonly Nzd: "NZD";
    readonly Omr: "OMR";
    readonly Pab: "PAB";
    readonly Pen: "PEN";
    readonly Pgk: "PGK";
    readonly Php: "PHP";
    readonly Pkr: "PKR";
    readonly Pln: "PLN";
    readonly Pyg: "PYG";
    readonly Qar: "QAR";
    readonly Ron: "RON";
    readonly Rsd: "RSD";
    readonly Rub: "RUB";
    readonly Rwf: "RWF";
    readonly Sar: "SAR";
    readonly Sbd: "SBD";
    readonly Scr: "SCR";
    readonly Sdg: "SDG";
    readonly Sek: "SEK";
    readonly Sgd: "SGD";
    readonly Shp: "SHP";
    readonly Sll: "SLL";
    readonly Sos: "SOS";
    readonly Spl: "SPL";
    readonly Srd: "SRD";
    readonly Std: "STD";
    readonly Svc: "SVC";
    readonly Syp: "SYP";
    readonly Szl: "SZL";
    readonly Thb: "THB";
    readonly Tjs: "TJS";
    readonly Tmt: "TMT";
    readonly Tnd: "TND";
    readonly Top: "TOP";
    readonly Try: "TRY";
    readonly Ttd: "TTD";
    readonly Tvd: "TVD";
    readonly Twd: "TWD";
    readonly Tzs: "TZS";
    readonly Uah: "UAH";
    readonly Ugx: "UGX";
    readonly Usd: "USD";
    readonly Uyu: "UYU";
    readonly Uzs: "UZS";
    readonly Vef: "VEF";
    readonly Vnd: "VND";
    readonly Vuv: "VUV";
    readonly Wst: "WST";
    readonly Xaf: "XAF";
    readonly Xcd: "XCD";
    readonly Xdr: "XDR";
    readonly Xof: "XOF";
    readonly Xpf: "XPF";
    readonly Yer: "YER";
    readonly Zar: "ZAR";
    readonly Zmw: "ZMW";
    readonly Zwd: "ZWD";
    readonly Btc: "BTC";
};
export type InvoicePaymentTransactionProcessedCurrencyEnum = typeof InvoicePaymentTransactionProcessedCurrencyEnum[keyof typeof InvoicePaymentTransactionProcessedCurrencyEnum];
export declare const InvoicePaymentTransactionStatusEnum: {
    readonly Success: "SUCCESS";
    readonly Unknown: "UNKNOWN";
    readonly Pending: "PENDING";
    readonly PaymentFailure: "PAYMENT_FAILURE";
    readonly PluginFailure: "PLUGIN_FAILURE";
    readonly PaymentSystemOff: "PAYMENT_SYSTEM_OFF";
};
export type InvoicePaymentTransactionStatusEnum = typeof InvoicePaymentTransactionStatusEnum[keyof typeof InvoicePaymentTransactionStatusEnum];
/**
 *
 * @export
 * @interface Limit
 */
export interface Limit {
    /**
     *
     * @type {string}
     * @memberof Limit
     */
    'unit'?: string;
    /**
     *
     * @type {string}
     * @memberof Limit
     */
    'max'?: string;
    /**
     *
     * @type {string}
     * @memberof Limit
     */
    'min'?: string;
}
/**
 *
 * @export
 * @interface NodeCommand
 */
export interface NodeCommand {
    /**
     *
     * @type {boolean}
     * @memberof NodeCommand
     */
    'isSystemCommandType'?: boolean;
    /**
     *
     * @type {string}
     * @memberof NodeCommand
     */
    'nodeCommandType'?: string;
    /**
     *
     * @type {Array<NodeCommandProperty>}
     * @memberof NodeCommand
     */
    'nodeCommandProperties'?: Array<NodeCommandProperty>;
}
/**
 *
 * @export
 * @interface NodeCommandProperty
 */
export interface NodeCommandProperty {
    /**
     *
     * @type {string}
     * @memberof NodeCommandProperty
     */
    'key'?: string;
    /**
     *
     * @type {object}
     * @memberof NodeCommandProperty
     */
    'value'?: object;
}
/**
 *
 * @export
 * @interface NodeInfo
 */
export interface NodeInfo {
    /**
     *
     * @type {string}
     * @memberof NodeInfo
     */
    'nodeName'?: string;
    /**
     *
     * @type {string}
     * @memberof NodeInfo
     */
    'bootTime'?: string;
    /**
     *
     * @type {string}
     * @memberof NodeInfo
     */
    'lastUpdatedDate'?: string;
    /**
     *
     * @type {string}
     * @memberof NodeInfo
     */
    'kbVersion'?: string;
    /**
     *
     * @type {string}
     * @memberof NodeInfo
     */
    'apiVersion'?: string;
    /**
     *
     * @type {string}
     * @memberof NodeInfo
     */
    'pluginApiVersion'?: string;
    /**
     *
     * @type {string}
     * @memberof NodeInfo
     */
    'commonVersion'?: string;
    /**
     *
     * @type {string}
     * @memberof NodeInfo
     */
    'platformVersion'?: string;
    /**
     *
     * @type {Array<PluginInfo>}
     * @memberof NodeInfo
     */
    'pluginsInfo'?: Array<PluginInfo>;
}
/**
 *
 * @export
 * @interface Overdue
 */
export interface Overdue {
    /**
     *
     * @type {number}
     * @memberof Overdue
     */
    'initialReevaluationInterval'?: number;
    /**
     *
     * @type {Array<OverdueStateConfig>}
     * @memberof Overdue
     */
    'overdueStates'?: Array<OverdueStateConfig>;
}
/**
 *
 * @export
 * @interface OverdueCondition
 */
export interface OverdueCondition {
    /**
     *
     * @type {Duration}
     * @memberof OverdueCondition
     */
    'timeSinceEarliestUnpaidInvoiceEqualsOrExceeds'?: Duration;
    /**
     *
     * @type {string}
     * @memberof OverdueCondition
     */
    'controlTagInclusion'?: OverdueConditionControlTagInclusionEnum;
    /**
     *
     * @type {string}
     * @memberof OverdueCondition
     */
    'controlTagExclusion'?: OverdueConditionControlTagExclusionEnum;
    /**
     *
     * @type {number}
     * @memberof OverdueCondition
     */
    'numberOfUnpaidInvoicesEqualsOrExceeds'?: number;
    /**
     *
     * @type {Array<string>}
     * @memberof OverdueCondition
     */
    'responseForLastFailedPayment'?: Array<OverdueConditionResponseForLastFailedPaymentEnum>;
    /**
     *
     * @type {number}
     * @memberof OverdueCondition
     */
    'totalUnpaidInvoiceBalanceEqualsOrExceeds'?: number;
}
export declare const OverdueConditionControlTagInclusionEnum: {
    readonly AutoPayOff: "AUTO_PAY_OFF";
    readonly AutoInvoicingOff: "AUTO_INVOICING_OFF";
    readonly OverdueEnforcementOff: "OVERDUE_ENFORCEMENT_OFF";
    readonly WrittenOff: "WRITTEN_OFF";
    readonly ManualPay: "MANUAL_PAY";
    readonly Test: "TEST";
    readonly Partner: "PARTNER";
    readonly AutoInvoicingDraft: "AUTO_INVOICING_DRAFT";
    readonly AutoInvoicingReuseDraft: "AUTO_INVOICING_REUSE_DRAFT";
};
export type OverdueConditionControlTagInclusionEnum = typeof OverdueConditionControlTagInclusionEnum[keyof typeof OverdueConditionControlTagInclusionEnum];
export declare const OverdueConditionControlTagExclusionEnum: {
    readonly AutoPayOff: "AUTO_PAY_OFF";
    readonly AutoInvoicingOff: "AUTO_INVOICING_OFF";
    readonly OverdueEnforcementOff: "OVERDUE_ENFORCEMENT_OFF";
    readonly WrittenOff: "WRITTEN_OFF";
    readonly ManualPay: "MANUAL_PAY";
    readonly Test: "TEST";
    readonly Partner: "PARTNER";
    readonly AutoInvoicingDraft: "AUTO_INVOICING_DRAFT";
    readonly AutoInvoicingReuseDraft: "AUTO_INVOICING_REUSE_DRAFT";
};
export type OverdueConditionControlTagExclusionEnum = typeof OverdueConditionControlTagExclusionEnum[keyof typeof OverdueConditionControlTagExclusionEnum];
export declare const OverdueConditionResponseForLastFailedPaymentEnum: {
    readonly InvalidCard: "INVALID_CARD";
    readonly ExpiredCard: "EXPIRED_CARD";
    readonly LostOrStolenCard: "LOST_OR_STOLEN_CARD";
    readonly DoNotHonor: "DO_NOT_HONOR";
    readonly InsufficientFunds: "INSUFFICIENT_FUNDS";
    readonly Decline: "DECLINE";
    readonly ProcessingError: "PROCESSING_ERROR";
    readonly InvalidAmount: "INVALID_AMOUNT";
    readonly DuplicateTransaction: "DUPLICATE_TRANSACTION";
    readonly Other: "OTHER";
};
export type OverdueConditionResponseForLastFailedPaymentEnum = typeof OverdueConditionResponseForLastFailedPaymentEnum[keyof typeof OverdueConditionResponseForLastFailedPaymentEnum];
/**
 *
 * @export
 * @interface OverdueState
 */
export interface OverdueState {
    /**
     *
     * @type {string}
     * @memberof OverdueState
     */
    'name'?: string;
    /**
     *
     * @type {string}
     * @memberof OverdueState
     */
    'externalMessage'?: string;
    /**
     *
     * @type {boolean}
     * @memberof OverdueState
     */
    'isDisableEntitlementAndChangesBlocked'?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof OverdueState
     */
    'isBlockChanges'?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof OverdueState
     */
    'isClearState'?: boolean;
    /**
     *
     * @type {number}
     * @memberof OverdueState
     */
    'reevaluationIntervalDays'?: number;
}
/**
 *
 * @export
 * @interface OverdueStateConfig
 */
export interface OverdueStateConfig {
    /**
     *
     * @type {string}
     * @memberof OverdueStateConfig
     */
    'name'?: string;
    /**
     *
     * @type {boolean}
     * @memberof OverdueStateConfig
     */
    'isClearState'?: boolean;
    /**
     *
     * @type {OverdueCondition}
     * @memberof OverdueStateConfig
     */
    'condition'?: OverdueCondition;
    /**
     *
     * @type {string}
     * @memberof OverdueStateConfig
     */
    'externalMessage'?: string;
    /**
     *
     * @type {boolean}
     * @memberof OverdueStateConfig
     */
    'isBlockChanges'?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof OverdueStateConfig
     */
    'isDisableEntitlement'?: boolean;
    /**
     *
     * @type {string}
     * @memberof OverdueStateConfig
     */
    'subscriptionCancellationPolicy'?: OverdueStateConfigSubscriptionCancellationPolicyEnum;
    /**
     *
     * @type {number}
     * @memberof OverdueStateConfig
     */
    'autoReevaluationIntervalDays'?: number;
}
export declare const OverdueStateConfigSubscriptionCancellationPolicyEnum: {
    readonly EndOfTerm: "END_OF_TERM";
    readonly Immediate: "IMMEDIATE";
    readonly None: "NONE";
};
export type OverdueStateConfigSubscriptionCancellationPolicyEnum = typeof OverdueStateConfigSubscriptionCancellationPolicyEnum[keyof typeof OverdueStateConfigSubscriptionCancellationPolicyEnum];
/**
 *
 * @export
 * @interface Payment
 */
export interface Payment {
    /**
     *
     * @type {string}
     * @memberof Payment
     */
    'accountId'?: string;
    /**
     *
     * @type {string}
     * @memberof Payment
     */
    'paymentId'?: string;
    /**
     *
     * @type {string}
     * @memberof Payment
     */
    'paymentNumber'?: string;
    /**
     *
     * @type {string}
     * @memberof Payment
     */
    'paymentExternalKey'?: string;
    /**
     *
     * @type {number}
     * @memberof Payment
     */
    'authAmount'?: number;
    /**
     *
     * @type {number}
     * @memberof Payment
     */
    'capturedAmount'?: number;
    /**
     *
     * @type {number}
     * @memberof Payment
     */
    'purchasedAmount'?: number;
    /**
     *
     * @type {number}
     * @memberof Payment
     */
    'refundedAmount'?: number;
    /**
     *
     * @type {number}
     * @memberof Payment
     */
    'creditedAmount'?: number;
    /**
     *
     * @type {string}
     * @memberof Payment
     */
    'currency'?: PaymentCurrencyEnum;
    /**
     *
     * @type {string}
     * @memberof Payment
     */
    'paymentMethodId'?: string;
    /**
     *
     * @type {Array<PaymentTransaction>}
     * @memberof Payment
     */
    'transactions'?: Array<PaymentTransaction>;
    /**
     *
     * @type {Array<PaymentAttempt>}
     * @memberof Payment
     */
    'paymentAttempts'?: Array<PaymentAttempt>;
    /**
     *
     * @type {Array<AuditLog>}
     * @memberof Payment
     */
    'auditLogs'?: Array<AuditLog>;
}
export declare const PaymentCurrencyEnum: {
    readonly Aed: "AED";
    readonly Afn: "AFN";
    readonly All: "ALL";
    readonly Amd: "AMD";
    readonly Ang: "ANG";
    readonly Aoa: "AOA";
    readonly Ars: "ARS";
    readonly Aud: "AUD";
    readonly Awg: "AWG";
    readonly Azn: "AZN";
    readonly Bam: "BAM";
    readonly Bbd: "BBD";
    readonly Bdt: "BDT";
    readonly Bgn: "BGN";
    readonly Bhd: "BHD";
    readonly Bif: "BIF";
    readonly Bmd: "BMD";
    readonly Bnd: "BND";
    readonly Bob: "BOB";
    readonly Brl: "BRL";
    readonly Bsd: "BSD";
    readonly Btn: "BTN";
    readonly Bwp: "BWP";
    readonly Byr: "BYR";
    readonly Bzd: "BZD";
    readonly Cad: "CAD";
    readonly Cdf: "CDF";
    readonly Chf: "CHF";
    readonly Clp: "CLP";
    readonly Cny: "CNY";
    readonly Cop: "COP";
    readonly Crc: "CRC";
    readonly Cuc: "CUC";
    readonly Cup: "CUP";
    readonly Cve: "CVE";
    readonly Czk: "CZK";
    readonly Djf: "DJF";
    readonly Dkk: "DKK";
    readonly Dop: "DOP";
    readonly Dzd: "DZD";
    readonly Egp: "EGP";
    readonly Ern: "ERN";
    readonly Etb: "ETB";
    readonly Eur: "EUR";
    readonly Fjd: "FJD";
    readonly Fkp: "FKP";
    readonly Gbp: "GBP";
    readonly Gel: "GEL";
    readonly Ggp: "GGP";
    readonly Ghs: "GHS";
    readonly Gip: "GIP";
    readonly Gmd: "GMD";
    readonly Gnf: "GNF";
    readonly Gtq: "GTQ";
    readonly Gyd: "GYD";
    readonly Hkd: "HKD";
    readonly Hnl: "HNL";
    readonly Hrk: "HRK";
    readonly Htg: "HTG";
    readonly Huf: "HUF";
    readonly Idr: "IDR";
    readonly Ils: "ILS";
    readonly Imp: "IMP";
    readonly Inr: "INR";
    readonly Iqd: "IQD";
    readonly Irr: "IRR";
    readonly Isk: "ISK";
    readonly Jep: "JEP";
    readonly Jmd: "JMD";
    readonly Jod: "JOD";
    readonly Jpy: "JPY";
    readonly Kes: "KES";
    readonly Kgs: "KGS";
    readonly Khr: "KHR";
    readonly Kmf: "KMF";
    readonly Kpw: "KPW";
    readonly Krw: "KRW";
    readonly Kwd: "KWD";
    readonly Kyd: "KYD";
    readonly Kzt: "KZT";
    readonly Lak: "LAK";
    readonly Lbp: "LBP";
    readonly Lkr: "LKR";
    readonly Lrd: "LRD";
    readonly Lsl: "LSL";
    readonly Ltl: "LTL";
    readonly Lvl: "LVL";
    readonly Lyd: "LYD";
    readonly Mad: "MAD";
    readonly Mdl: "MDL";
    readonly Mga: "MGA";
    readonly Mkd: "MKD";
    readonly Mmk: "MMK";
    readonly Mnt: "MNT";
    readonly Mop: "MOP";
    readonly Mro: "MRO";
    readonly Mur: "MUR";
    readonly Mvr: "MVR";
    readonly Mwk: "MWK";
    readonly Mxn: "MXN";
    readonly Myr: "MYR";
    readonly Mzn: "MZN";
    readonly Nad: "NAD";
    readonly Ngn: "NGN";
    readonly Nio: "NIO";
    readonly Nok: "NOK";
    readonly Npr: "NPR";
    readonly Nzd: "NZD";
    readonly Omr: "OMR";
    readonly Pab: "PAB";
    readonly Pen: "PEN";
    readonly Pgk: "PGK";
    readonly Php: "PHP";
    readonly Pkr: "PKR";
    readonly Pln: "PLN";
    readonly Pyg: "PYG";
    readonly Qar: "QAR";
    readonly Ron: "RON";
    readonly Rsd: "RSD";
    readonly Rub: "RUB";
    readonly Rwf: "RWF";
    readonly Sar: "SAR";
    readonly Sbd: "SBD";
    readonly Scr: "SCR";
    readonly Sdg: "SDG";
    readonly Sek: "SEK";
    readonly Sgd: "SGD";
    readonly Shp: "SHP";
    readonly Sll: "SLL";
    readonly Sos: "SOS";
    readonly Spl: "SPL";
    readonly Srd: "SRD";
    readonly Std: "STD";
    readonly Svc: "SVC";
    readonly Syp: "SYP";
    readonly Szl: "SZL";
    readonly Thb: "THB";
    readonly Tjs: "TJS";
    readonly Tmt: "TMT";
    readonly Tnd: "TND";
    readonly Top: "TOP";
    readonly Try: "TRY";
    readonly Ttd: "TTD";
    readonly Tvd: "TVD";
    readonly Twd: "TWD";
    readonly Tzs: "TZS";
    readonly Uah: "UAH";
    readonly Ugx: "UGX";
    readonly Usd: "USD";
    readonly Uyu: "UYU";
    readonly Uzs: "UZS";
    readonly Vef: "VEF";
    readonly Vnd: "VND";
    readonly Vuv: "VUV";
    readonly Wst: "WST";
    readonly Xaf: "XAF";
    readonly Xcd: "XCD";
    readonly Xdr: "XDR";
    readonly Xof: "XOF";
    readonly Xpf: "XPF";
    readonly Yer: "YER";
    readonly Zar: "ZAR";
    readonly Zmw: "ZMW";
    readonly Zwd: "ZWD";
    readonly Btc: "BTC";
};
export type PaymentCurrencyEnum = typeof PaymentCurrencyEnum[keyof typeof PaymentCurrencyEnum];
/**
 *
 * @export
 * @interface PaymentAttempt
 */
export interface PaymentAttempt {
    /**
     *
     * @type {string}
     * @memberof PaymentAttempt
     */
    'accountId'?: string;
    /**
     *
     * @type {string}
     * @memberof PaymentAttempt
     */
    'paymentMethodId'?: string;
    /**
     *
     * @type {string}
     * @memberof PaymentAttempt
     */
    'paymentExternalKey'?: string;
    /**
     *
     * @type {string}
     * @memberof PaymentAttempt
     */
    'transactionId'?: string;
    /**
     *
     * @type {string}
     * @memberof PaymentAttempt
     */
    'transactionExternalKey'?: string;
    /**
     *
     * @type {string}
     * @memberof PaymentAttempt
     */
    'transactionType'?: PaymentAttemptTransactionTypeEnum;
    /**
     *
     * @type {string}
     * @memberof PaymentAttempt
     */
    'effectiveDate'?: string;
    /**
     *
     * @type {string}
     * @memberof PaymentAttempt
     */
    'stateName'?: string;
    /**
     * Transaction amount, required except for void operations
     * @type {number}
     * @memberof PaymentAttempt
     */
    'amount'?: number;
    /**
     * Amount currency (account currency unless specified)
     * @type {string}
     * @memberof PaymentAttempt
     */
    'currency'?: PaymentAttemptCurrencyEnum;
    /**
     *
     * @type {string}
     * @memberof PaymentAttempt
     */
    'pluginName'?: string;
    /**
     *
     * @type {Array<PluginProperty>}
     * @memberof PaymentAttempt
     */
    'pluginProperties'?: Array<PluginProperty>;
    /**
     *
     * @type {Array<AuditLog>}
     * @memberof PaymentAttempt
     */
    'auditLogs'?: Array<AuditLog>;
}
export declare const PaymentAttemptTransactionTypeEnum: {
    readonly Authorize: "AUTHORIZE";
    readonly Capture: "CAPTURE";
    readonly Chargeback: "CHARGEBACK";
    readonly Credit: "CREDIT";
    readonly Purchase: "PURCHASE";
    readonly Refund: "REFUND";
    readonly Void: "VOID";
};
export type PaymentAttemptTransactionTypeEnum = typeof PaymentAttemptTransactionTypeEnum[keyof typeof PaymentAttemptTransactionTypeEnum];
export declare const PaymentAttemptCurrencyEnum: {
    readonly Aed: "AED";
    readonly Afn: "AFN";
    readonly All: "ALL";
    readonly Amd: "AMD";
    readonly Ang: "ANG";
    readonly Aoa: "AOA";
    readonly Ars: "ARS";
    readonly Aud: "AUD";
    readonly Awg: "AWG";
    readonly Azn: "AZN";
    readonly Bam: "BAM";
    readonly Bbd: "BBD";
    readonly Bdt: "BDT";
    readonly Bgn: "BGN";
    readonly Bhd: "BHD";
    readonly Bif: "BIF";
    readonly Bmd: "BMD";
    readonly Bnd: "BND";
    readonly Bob: "BOB";
    readonly Brl: "BRL";
    readonly Bsd: "BSD";
    readonly Btn: "BTN";
    readonly Bwp: "BWP";
    readonly Byr: "BYR";
    readonly Bzd: "BZD";
    readonly Cad: "CAD";
    readonly Cdf: "CDF";
    readonly Chf: "CHF";
    readonly Clp: "CLP";
    readonly Cny: "CNY";
    readonly Cop: "COP";
    readonly Crc: "CRC";
    readonly Cuc: "CUC";
    readonly Cup: "CUP";
    readonly Cve: "CVE";
    readonly Czk: "CZK";
    readonly Djf: "DJF";
    readonly Dkk: "DKK";
    readonly Dop: "DOP";
    readonly Dzd: "DZD";
    readonly Egp: "EGP";
    readonly Ern: "ERN";
    readonly Etb: "ETB";
    readonly Eur: "EUR";
    readonly Fjd: "FJD";
    readonly Fkp: "FKP";
    readonly Gbp: "GBP";
    readonly Gel: "GEL";
    readonly Ggp: "GGP";
    readonly Ghs: "GHS";
    readonly Gip: "GIP";
    readonly Gmd: "GMD";
    readonly Gnf: "GNF";
    readonly Gtq: "GTQ";
    readonly Gyd: "GYD";
    readonly Hkd: "HKD";
    readonly Hnl: "HNL";
    readonly Hrk: "HRK";
    readonly Htg: "HTG";
    readonly Huf: "HUF";
    readonly Idr: "IDR";
    readonly Ils: "ILS";
    readonly Imp: "IMP";
    readonly Inr: "INR";
    readonly Iqd: "IQD";
    readonly Irr: "IRR";
    readonly Isk: "ISK";
    readonly Jep: "JEP";
    readonly Jmd: "JMD";
    readonly Jod: "JOD";
    readonly Jpy: "JPY";
    readonly Kes: "KES";
    readonly Kgs: "KGS";
    readonly Khr: "KHR";
    readonly Kmf: "KMF";
    readonly Kpw: "KPW";
    readonly Krw: "KRW";
    readonly Kwd: "KWD";
    readonly Kyd: "KYD";
    readonly Kzt: "KZT";
    readonly Lak: "LAK";
    readonly Lbp: "LBP";
    readonly Lkr: "LKR";
    readonly Lrd: "LRD";
    readonly Lsl: "LSL";
    readonly Ltl: "LTL";
    readonly Lvl: "LVL";
    readonly Lyd: "LYD";
    readonly Mad: "MAD";
    readonly Mdl: "MDL";
    readonly Mga: "MGA";
    readonly Mkd: "MKD";
    readonly Mmk: "MMK";
    readonly Mnt: "MNT";
    readonly Mop: "MOP";
    readonly Mro: "MRO";
    readonly Mur: "MUR";
    readonly Mvr: "MVR";
    readonly Mwk: "MWK";
    readonly Mxn: "MXN";
    readonly Myr: "MYR";
    readonly Mzn: "MZN";
    readonly Nad: "NAD";
    readonly Ngn: "NGN";
    readonly Nio: "NIO";
    readonly Nok: "NOK";
    readonly Npr: "NPR";
    readonly Nzd: "NZD";
    readonly Omr: "OMR";
    readonly Pab: "PAB";
    readonly Pen: "PEN";
    readonly Pgk: "PGK";
    readonly Php: "PHP";
    readonly Pkr: "PKR";
    readonly Pln: "PLN";
    readonly Pyg: "PYG";
    readonly Qar: "QAR";
    readonly Ron: "RON";
    readonly Rsd: "RSD";
    readonly Rub: "RUB";
    readonly Rwf: "RWF";
    readonly Sar: "SAR";
    readonly Sbd: "SBD";
    readonly Scr: "SCR";
    readonly Sdg: "SDG";
    readonly Sek: "SEK";
    readonly Sgd: "SGD";
    readonly Shp: "SHP";
    readonly Sll: "SLL";
    readonly Sos: "SOS";
    readonly Spl: "SPL";
    readonly Srd: "SRD";
    readonly Std: "STD";
    readonly Svc: "SVC";
    readonly Syp: "SYP";
    readonly Szl: "SZL";
    readonly Thb: "THB";
    readonly Tjs: "TJS";
    readonly Tmt: "TMT";
    readonly Tnd: "TND";
    readonly Top: "TOP";
    readonly Try: "TRY";
    readonly Ttd: "TTD";
    readonly Tvd: "TVD";
    readonly Twd: "TWD";
    readonly Tzs: "TZS";
    readonly Uah: "UAH";
    readonly Ugx: "UGX";
    readonly Usd: "USD";
    readonly Uyu: "UYU";
    readonly Uzs: "UZS";
    readonly Vef: "VEF";
    readonly Vnd: "VND";
    readonly Vuv: "VUV";
    readonly Wst: "WST";
    readonly Xaf: "XAF";
    readonly Xcd: "XCD";
    readonly Xdr: "XDR";
    readonly Xof: "XOF";
    readonly Xpf: "XPF";
    readonly Yer: "YER";
    readonly Zar: "ZAR";
    readonly Zmw: "ZMW";
    readonly Zwd: "ZWD";
    readonly Btc: "BTC";
};
export type PaymentAttemptCurrencyEnum = typeof PaymentAttemptCurrencyEnum[keyof typeof PaymentAttemptCurrencyEnum];
/**
 *
 * @export
 * @interface PaymentMethod
 */
export interface PaymentMethod {
    /**
     *
     * @type {string}
     * @memberof PaymentMethod
     */
    'paymentMethodId'?: string;
    /**
     *
     * @type {string}
     * @memberof PaymentMethod
     */
    'externalKey'?: string;
    /**
     *
     * @type {string}
     * @memberof PaymentMethod
     */
    'accountId'?: string;
    /**
     *
     * @type {boolean}
     * @memberof PaymentMethod
     */
    'isDefault'?: boolean;
    /**
     *
     * @type {string}
     * @memberof PaymentMethod
     */
    'pluginName'?: string;
    /**
     *
     * @type {PaymentMethodPluginDetail}
     * @memberof PaymentMethod
     */
    'pluginInfo'?: PaymentMethodPluginDetail;
    /**
     *
     * @type {Array<AuditLog>}
     * @memberof PaymentMethod
     */
    'auditLogs'?: Array<AuditLog>;
}
/**
 *
 * @export
 * @interface PaymentMethodPluginDetail
 */
export interface PaymentMethodPluginDetail {
    /**
     *
     * @type {string}
     * @memberof PaymentMethodPluginDetail
     */
    'externalPaymentMethodId'?: string;
    /**
     *
     * @type {boolean}
     * @memberof PaymentMethodPluginDetail
     */
    'isDefaultPaymentMethod'?: boolean;
    /**
     *
     * @type {Array<PluginProperty>}
     * @memberof PaymentMethodPluginDetail
     */
    'properties'?: Array<PluginProperty>;
}
/**
 *
 * @export
 * @interface PaymentTransaction
 */
export interface PaymentTransaction {
    /**
     *
     * @type {string}
     * @memberof PaymentTransaction
     */
    'transactionId'?: string;
    /**
     *
     * @type {string}
     * @memberof PaymentTransaction
     */
    'transactionExternalKey'?: string;
    /**
     * Associated payment id, required when notifying state transitions
     * @type {string}
     * @memberof PaymentTransaction
     */
    'paymentId'?: string;
    /**
     *
     * @type {string}
     * @memberof PaymentTransaction
     */
    'paymentExternalKey'?: string;
    /**
     *
     * @type {string}
     * @memberof PaymentTransaction
     */
    'transactionType'?: PaymentTransactionTransactionTypeEnum;
    /**
     * Transaction amount, required except for void operations
     * @type {number}
     * @memberof PaymentTransaction
     */
    'amount'?: number;
    /**
     * Amount currency (account currency unless specified)
     * @type {string}
     * @memberof PaymentTransaction
     */
    'currency'?: PaymentTransactionCurrencyEnum;
    /**
     *
     * @type {string}
     * @memberof PaymentTransaction
     */
    'effectiveDate'?: string;
    /**
     *
     * @type {number}
     * @memberof PaymentTransaction
     */
    'processedAmount'?: number;
    /**
     *
     * @type {string}
     * @memberof PaymentTransaction
     */
    'processedCurrency'?: PaymentTransactionProcessedCurrencyEnum;
    /**
     * Transaction status, required for state change notifications
     * @type {string}
     * @memberof PaymentTransaction
     */
    'status'?: PaymentTransactionStatusEnum;
    /**
     *
     * @type {string}
     * @memberof PaymentTransaction
     */
    'gatewayErrorCode'?: string;
    /**
     *
     * @type {string}
     * @memberof PaymentTransaction
     */
    'gatewayErrorMsg'?: string;
    /**
     *
     * @type {string}
     * @memberof PaymentTransaction
     */
    'firstPaymentReferenceId'?: string;
    /**
     *
     * @type {string}
     * @memberof PaymentTransaction
     */
    'secondPaymentReferenceId'?: string;
    /**
     *
     * @type {Array<PluginProperty>}
     * @memberof PaymentTransaction
     */
    'properties'?: Array<PluginProperty>;
    /**
     *
     * @type {Array<AuditLog>}
     * @memberof PaymentTransaction
     */
    'auditLogs'?: Array<AuditLog>;
}
export declare const PaymentTransactionTransactionTypeEnum: {
    readonly Authorize: "AUTHORIZE";
    readonly Capture: "CAPTURE";
    readonly Chargeback: "CHARGEBACK";
    readonly Credit: "CREDIT";
    readonly Purchase: "PURCHASE";
    readonly Refund: "REFUND";
    readonly Void: "VOID";
};
export type PaymentTransactionTransactionTypeEnum = typeof PaymentTransactionTransactionTypeEnum[keyof typeof PaymentTransactionTransactionTypeEnum];
export declare const PaymentTransactionCurrencyEnum: {
    readonly Aed: "AED";
    readonly Afn: "AFN";
    readonly All: "ALL";
    readonly Amd: "AMD";
    readonly Ang: "ANG";
    readonly Aoa: "AOA";
    readonly Ars: "ARS";
    readonly Aud: "AUD";
    readonly Awg: "AWG";
    readonly Azn: "AZN";
    readonly Bam: "BAM";
    readonly Bbd: "BBD";
    readonly Bdt: "BDT";
    readonly Bgn: "BGN";
    readonly Bhd: "BHD";
    readonly Bif: "BIF";
    readonly Bmd: "BMD";
    readonly Bnd: "BND";
    readonly Bob: "BOB";
    readonly Brl: "BRL";
    readonly Bsd: "BSD";
    readonly Btn: "BTN";
    readonly Bwp: "BWP";
    readonly Byr: "BYR";
    readonly Bzd: "BZD";
    readonly Cad: "CAD";
    readonly Cdf: "CDF";
    readonly Chf: "CHF";
    readonly Clp: "CLP";
    readonly Cny: "CNY";
    readonly Cop: "COP";
    readonly Crc: "CRC";
    readonly Cuc: "CUC";
    readonly Cup: "CUP";
    readonly Cve: "CVE";
    readonly Czk: "CZK";
    readonly Djf: "DJF";
    readonly Dkk: "DKK";
    readonly Dop: "DOP";
    readonly Dzd: "DZD";
    readonly Egp: "EGP";
    readonly Ern: "ERN";
    readonly Etb: "ETB";
    readonly Eur: "EUR";
    readonly Fjd: "FJD";
    readonly Fkp: "FKP";
    readonly Gbp: "GBP";
    readonly Gel: "GEL";
    readonly Ggp: "GGP";
    readonly Ghs: "GHS";
    readonly Gip: "GIP";
    readonly Gmd: "GMD";
    readonly Gnf: "GNF";
    readonly Gtq: "GTQ";
    readonly Gyd: "GYD";
    readonly Hkd: "HKD";
    readonly Hnl: "HNL";
    readonly Hrk: "HRK";
    readonly Htg: "HTG";
    readonly Huf: "HUF";
    readonly Idr: "IDR";
    readonly Ils: "ILS";
    readonly Imp: "IMP";
    readonly Inr: "INR";
    readonly Iqd: "IQD";
    readonly Irr: "IRR";
    readonly Isk: "ISK";
    readonly Jep: "JEP";
    readonly Jmd: "JMD";
    readonly Jod: "JOD";
    readonly Jpy: "JPY";
    readonly Kes: "KES";
    readonly Kgs: "KGS";
    readonly Khr: "KHR";
    readonly Kmf: "KMF";
    readonly Kpw: "KPW";
    readonly Krw: "KRW";
    readonly Kwd: "KWD";
    readonly Kyd: "KYD";
    readonly Kzt: "KZT";
    readonly Lak: "LAK";
    readonly Lbp: "LBP";
    readonly Lkr: "LKR";
    readonly Lrd: "LRD";
    readonly Lsl: "LSL";
    readonly Ltl: "LTL";
    readonly Lvl: "LVL";
    readonly Lyd: "LYD";
    readonly Mad: "MAD";
    readonly Mdl: "MDL";
    readonly Mga: "MGA";
    readonly Mkd: "MKD";
    readonly Mmk: "MMK";
    readonly Mnt: "MNT";
    readonly Mop: "MOP";
    readonly Mro: "MRO";
    readonly Mur: "MUR";
    readonly Mvr: "MVR";
    readonly Mwk: "MWK";
    readonly Mxn: "MXN";
    readonly Myr: "MYR";
    readonly Mzn: "MZN";
    readonly Nad: "NAD";
    readonly Ngn: "NGN";
    readonly Nio: "NIO";
    readonly Nok: "NOK";
    readonly Npr: "NPR";
    readonly Nzd: "NZD";
    readonly Omr: "OMR";
    readonly Pab: "PAB";
    readonly Pen: "PEN";
    readonly Pgk: "PGK";
    readonly Php: "PHP";
    readonly Pkr: "PKR";
    readonly Pln: "PLN";
    readonly Pyg: "PYG";
    readonly Qar: "QAR";
    readonly Ron: "RON";
    readonly Rsd: "RSD";
    readonly Rub: "RUB";
    readonly Rwf: "RWF";
    readonly Sar: "SAR";
    readonly Sbd: "SBD";
    readonly Scr: "SCR";
    readonly Sdg: "SDG";
    readonly Sek: "SEK";
    readonly Sgd: "SGD";
    readonly Shp: "SHP";
    readonly Sll: "SLL";
    readonly Sos: "SOS";
    readonly Spl: "SPL";
    readonly Srd: "SRD";
    readonly Std: "STD";
    readonly Svc: "SVC";
    readonly Syp: "SYP";
    readonly Szl: "SZL";
    readonly Thb: "THB";
    readonly Tjs: "TJS";
    readonly Tmt: "TMT";
    readonly Tnd: "TND";
    readonly Top: "TOP";
    readonly Try: "TRY";
    readonly Ttd: "TTD";
    readonly Tvd: "TVD";
    readonly Twd: "TWD";
    readonly Tzs: "TZS";
    readonly Uah: "UAH";
    readonly Ugx: "UGX";
    readonly Usd: "USD";
    readonly Uyu: "UYU";
    readonly Uzs: "UZS";
    readonly Vef: "VEF";
    readonly Vnd: "VND";
    readonly Vuv: "VUV";
    readonly Wst: "WST";
    readonly Xaf: "XAF";
    readonly Xcd: "XCD";
    readonly Xdr: "XDR";
    readonly Xof: "XOF";
    readonly Xpf: "XPF";
    readonly Yer: "YER";
    readonly Zar: "ZAR";
    readonly Zmw: "ZMW";
    readonly Zwd: "ZWD";
    readonly Btc: "BTC";
};
export type PaymentTransactionCurrencyEnum = typeof PaymentTransactionCurrencyEnum[keyof typeof PaymentTransactionCurrencyEnum];
export declare const PaymentTransactionProcessedCurrencyEnum: {
    readonly Aed: "AED";
    readonly Afn: "AFN";
    readonly All: "ALL";
    readonly Amd: "AMD";
    readonly Ang: "ANG";
    readonly Aoa: "AOA";
    readonly Ars: "ARS";
    readonly Aud: "AUD";
    readonly Awg: "AWG";
    readonly Azn: "AZN";
    readonly Bam: "BAM";
    readonly Bbd: "BBD";
    readonly Bdt: "BDT";
    readonly Bgn: "BGN";
    readonly Bhd: "BHD";
    readonly Bif: "BIF";
    readonly Bmd: "BMD";
    readonly Bnd: "BND";
    readonly Bob: "BOB";
    readonly Brl: "BRL";
    readonly Bsd: "BSD";
    readonly Btn: "BTN";
    readonly Bwp: "BWP";
    readonly Byr: "BYR";
    readonly Bzd: "BZD";
    readonly Cad: "CAD";
    readonly Cdf: "CDF";
    readonly Chf: "CHF";
    readonly Clp: "CLP";
    readonly Cny: "CNY";
    readonly Cop: "COP";
    readonly Crc: "CRC";
    readonly Cuc: "CUC";
    readonly Cup: "CUP";
    readonly Cve: "CVE";
    readonly Czk: "CZK";
    readonly Djf: "DJF";
    readonly Dkk: "DKK";
    readonly Dop: "DOP";
    readonly Dzd: "DZD";
    readonly Egp: "EGP";
    readonly Ern: "ERN";
    readonly Etb: "ETB";
    readonly Eur: "EUR";
    readonly Fjd: "FJD";
    readonly Fkp: "FKP";
    readonly Gbp: "GBP";
    readonly Gel: "GEL";
    readonly Ggp: "GGP";
    readonly Ghs: "GHS";
    readonly Gip: "GIP";
    readonly Gmd: "GMD";
    readonly Gnf: "GNF";
    readonly Gtq: "GTQ";
    readonly Gyd: "GYD";
    readonly Hkd: "HKD";
    readonly Hnl: "HNL";
    readonly Hrk: "HRK";
    readonly Htg: "HTG";
    readonly Huf: "HUF";
    readonly Idr: "IDR";
    readonly Ils: "ILS";
    readonly Imp: "IMP";
    readonly Inr: "INR";
    readonly Iqd: "IQD";
    readonly Irr: "IRR";
    readonly Isk: "ISK";
    readonly Jep: "JEP";
    readonly Jmd: "JMD";
    readonly Jod: "JOD";
    readonly Jpy: "JPY";
    readonly Kes: "KES";
    readonly Kgs: "KGS";
    readonly Khr: "KHR";
    readonly Kmf: "KMF";
    readonly Kpw: "KPW";
    readonly Krw: "KRW";
    readonly Kwd: "KWD";
    readonly Kyd: "KYD";
    readonly Kzt: "KZT";
    readonly Lak: "LAK";
    readonly Lbp: "LBP";
    readonly Lkr: "LKR";
    readonly Lrd: "LRD";
    readonly Lsl: "LSL";
    readonly Ltl: "LTL";
    readonly Lvl: "LVL";
    readonly Lyd: "LYD";
    readonly Mad: "MAD";
    readonly Mdl: "MDL";
    readonly Mga: "MGA";
    readonly Mkd: "MKD";
    readonly Mmk: "MMK";
    readonly Mnt: "MNT";
    readonly Mop: "MOP";
    readonly Mro: "MRO";
    readonly Mur: "MUR";
    readonly Mvr: "MVR";
    readonly Mwk: "MWK";
    readonly Mxn: "MXN";
    readonly Myr: "MYR";
    readonly Mzn: "MZN";
    readonly Nad: "NAD";
    readonly Ngn: "NGN";
    readonly Nio: "NIO";
    readonly Nok: "NOK";
    readonly Npr: "NPR";
    readonly Nzd: "NZD";
    readonly Omr: "OMR";
    readonly Pab: "PAB";
    readonly Pen: "PEN";
    readonly Pgk: "PGK";
    readonly Php: "PHP";
    readonly Pkr: "PKR";
    readonly Pln: "PLN";
    readonly Pyg: "PYG";
    readonly Qar: "QAR";
    readonly Ron: "RON";
    readonly Rsd: "RSD";
    readonly Rub: "RUB";
    readonly Rwf: "RWF";
    readonly Sar: "SAR";
    readonly Sbd: "SBD";
    readonly Scr: "SCR";
    readonly Sdg: "SDG";
    readonly Sek: "SEK";
    readonly Sgd: "SGD";
    readonly Shp: "SHP";
    readonly Sll: "SLL";
    readonly Sos: "SOS";
    readonly Spl: "SPL";
    readonly Srd: "SRD";
    readonly Std: "STD";
    readonly Svc: "SVC";
    readonly Syp: "SYP";
    readonly Szl: "SZL";
    readonly Thb: "THB";
    readonly Tjs: "TJS";
    readonly Tmt: "TMT";
    readonly Tnd: "TND";
    readonly Top: "TOP";
    readonly Try: "TRY";
    readonly Ttd: "TTD";
    readonly Tvd: "TVD";
    readonly Twd: "TWD";
    readonly Tzs: "TZS";
    readonly Uah: "UAH";
    readonly Ugx: "UGX";
    readonly Usd: "USD";
    readonly Uyu: "UYU";
    readonly Uzs: "UZS";
    readonly Vef: "VEF";
    readonly Vnd: "VND";
    readonly Vuv: "VUV";
    readonly Wst: "WST";
    readonly Xaf: "XAF";
    readonly Xcd: "XCD";
    readonly Xdr: "XDR";
    readonly Xof: "XOF";
    readonly Xpf: "XPF";
    readonly Yer: "YER";
    readonly Zar: "ZAR";
    readonly Zmw: "ZMW";
    readonly Zwd: "ZWD";
    readonly Btc: "BTC";
};
export type PaymentTransactionProcessedCurrencyEnum = typeof PaymentTransactionProcessedCurrencyEnum[keyof typeof PaymentTransactionProcessedCurrencyEnum];
export declare const PaymentTransactionStatusEnum: {
    readonly Success: "SUCCESS";
    readonly Unknown: "UNKNOWN";
    readonly Pending: "PENDING";
    readonly PaymentFailure: "PAYMENT_FAILURE";
    readonly PluginFailure: "PLUGIN_FAILURE";
    readonly PaymentSystemOff: "PAYMENT_SYSTEM_OFF";
};
export type PaymentTransactionStatusEnum = typeof PaymentTransactionStatusEnum[keyof typeof PaymentTransactionStatusEnum];
/**
 *
 * @export
 * @interface Phase
 */
export interface Phase {
    /**
     *
     * @type {string}
     * @memberof Phase
     */
    'type'?: string;
    /**
     *
     * @type {Array<Price>}
     * @memberof Phase
     */
    'prices'?: Array<Price>;
    /**
     *
     * @type {Array<Price>}
     * @memberof Phase
     */
    'fixedPrices'?: Array<Price>;
    /**
     *
     * @type {Duration}
     * @memberof Phase
     */
    'duration'?: Duration;
    /**
     *
     * @type {Array<Usage>}
     * @memberof Phase
     */
    'usages'?: Array<Usage>;
}
/**
 *
 * @export
 * @interface PhasePrice
 */
export interface PhasePrice {
    /**
     *
     * @type {string}
     * @memberof PhasePrice
     */
    'planName'?: string;
    /**
     *
     * @type {string}
     * @memberof PhasePrice
     */
    'phaseName'?: string;
    /**
     *
     * @type {string}
     * @memberof PhasePrice
     */
    'phaseType'?: string;
    /**
     *
     * @type {number}
     * @memberof PhasePrice
     */
    'fixedPrice'?: number;
    /**
     *
     * @type {number}
     * @memberof PhasePrice
     */
    'recurringPrice'?: number;
    /**
     *
     * @type {Array<UsagePrice>}
     * @memberof PhasePrice
     */
    'usagePrices'?: Array<UsagePrice>;
}
/**
 *
 * @export
 * @interface Plan
 */
export interface Plan {
    /**
     *
     * @type {string}
     * @memberof Plan
     */
    'name'?: string;
    /**
     *
     * @type {string}
     * @memberof Plan
     */
    'prettyName'?: string;
    /**
     *
     * @type {string}
     * @memberof Plan
     */
    'recurringBillingMode'?: PlanRecurringBillingModeEnum;
    /**
     *
     * @type {string}
     * @memberof Plan
     */
    'billingPeriod'?: PlanBillingPeriodEnum;
    /**
     *
     * @type {Array<Phase>}
     * @memberof Plan
     */
    'phases'?: Array<Phase>;
}
export declare const PlanRecurringBillingModeEnum: {
    readonly Advance: "IN_ADVANCE";
    readonly Arrear: "IN_ARREAR";
};
export type PlanRecurringBillingModeEnum = typeof PlanRecurringBillingModeEnum[keyof typeof PlanRecurringBillingModeEnum];
export declare const PlanBillingPeriodEnum: {
    readonly Daily: "DAILY";
    readonly Weekly: "WEEKLY";
    readonly Biweekly: "BIWEEKLY";
    readonly ThirtyDays: "THIRTY_DAYS";
    readonly ThirtyOneDays: "THIRTY_ONE_DAYS";
    readonly SixtyDays: "SIXTY_DAYS";
    readonly NinetyDays: "NINETY_DAYS";
    readonly Monthly: "MONTHLY";
    readonly Bimestrial: "BIMESTRIAL";
    readonly Quarterly: "QUARTERLY";
    readonly Triannual: "TRIANNUAL";
    readonly Biannual: "BIANNUAL";
    readonly Annual: "ANNUAL";
    readonly Sesquiennial: "SESQUIENNIAL";
    readonly Biennial: "BIENNIAL";
    readonly Triennial: "TRIENNIAL";
    readonly NoBillingPeriod: "NO_BILLING_PERIOD";
};
export type PlanBillingPeriodEnum = typeof PlanBillingPeriodEnum[keyof typeof PlanBillingPeriodEnum];
/**
 *
 * @export
 * @interface PlanDetail
 */
export interface PlanDetail {
    /**
     *
     * @type {string}
     * @memberof PlanDetail
     */
    'product'?: string;
    /**
     *
     * @type {string}
     * @memberof PlanDetail
     */
    'plan'?: string;
    /**
     *
     * @type {string}
     * @memberof PlanDetail
     */
    'priceList'?: string;
    /**
     *
     * @type {string}
     * @memberof PlanDetail
     */
    'finalPhaseBillingPeriod'?: PlanDetailFinalPhaseBillingPeriodEnum;
    /**
     *
     * @type {Array<Price>}
     * @memberof PlanDetail
     */
    'finalPhaseRecurringPrice'?: Array<Price>;
}
export declare const PlanDetailFinalPhaseBillingPeriodEnum: {
    readonly Daily: "DAILY";
    readonly Weekly: "WEEKLY";
    readonly Biweekly: "BIWEEKLY";
    readonly ThirtyDays: "THIRTY_DAYS";
    readonly ThirtyOneDays: "THIRTY_ONE_DAYS";
    readonly SixtyDays: "SIXTY_DAYS";
    readonly NinetyDays: "NINETY_DAYS";
    readonly Monthly: "MONTHLY";
    readonly Bimestrial: "BIMESTRIAL";
    readonly Quarterly: "QUARTERLY";
    readonly Triannual: "TRIANNUAL";
    readonly Biannual: "BIANNUAL";
    readonly Annual: "ANNUAL";
    readonly Sesquiennial: "SESQUIENNIAL";
    readonly Biennial: "BIENNIAL";
    readonly Triennial: "TRIENNIAL";
    readonly NoBillingPeriod: "NO_BILLING_PERIOD";
};
export type PlanDetailFinalPhaseBillingPeriodEnum = typeof PlanDetailFinalPhaseBillingPeriodEnum[keyof typeof PlanDetailFinalPhaseBillingPeriodEnum];
/**
 *
 * @export
 * @interface PluginInfo
 */
export interface PluginInfo {
    /**
     *
     * @type {string}
     * @memberof PluginInfo
     */
    'bundleSymbolicName'?: string;
    /**
     *
     * @type {string}
     * @memberof PluginInfo
     */
    'pluginKey'?: string;
    /**
     *
     * @type {string}
     * @memberof PluginInfo
     */
    'pluginName'?: string;
    /**
     *
     * @type {string}
     * @memberof PluginInfo
     */
    'version'?: string;
    /**
     *
     * @type {string}
     * @memberof PluginInfo
     */
    'state'?: string;
    /**
     *
     * @type {boolean}
     * @memberof PluginInfo
     */
    'isSelectedForStart'?: boolean;
    /**
     *
     * @type {Set<PluginServiceInfo>}
     * @memberof PluginInfo
     */
    'services'?: Set<PluginServiceInfo>;
}
/**
 *
 * @export
 * @interface PluginProperty
 */
export interface PluginProperty {
    /**
     *
     * @type {string}
     * @memberof PluginProperty
     */
    'key'?: string;
    /**
     *
     * @type {string}
     * @memberof PluginProperty
     */
    'value'?: string;
    /**
     *
     * @type {boolean}
     * @memberof PluginProperty
     */
    'isUpdatable'?: boolean;
}
/**
 *
 * @export
 * @interface PluginServiceInfo
 */
export interface PluginServiceInfo {
    /**
     *
     * @type {string}
     * @memberof PluginServiceInfo
     */
    'serviceTypeName'?: string;
    /**
     *
     * @type {string}
     * @memberof PluginServiceInfo
     */
    'registrationName'?: string;
}
/**
 *
 * @export
 * @interface Price
 */
export interface Price {
    /**
     *
     * @type {string}
     * @memberof Price
     */
    'currency'?: PriceCurrencyEnum;
    /**
     *
     * @type {number}
     * @memberof Price
     */
    'value'?: number;
}
export declare const PriceCurrencyEnum: {
    readonly Aed: "AED";
    readonly Afn: "AFN";
    readonly All: "ALL";
    readonly Amd: "AMD";
    readonly Ang: "ANG";
    readonly Aoa: "AOA";
    readonly Ars: "ARS";
    readonly Aud: "AUD";
    readonly Awg: "AWG";
    readonly Azn: "AZN";
    readonly Bam: "BAM";
    readonly Bbd: "BBD";
    readonly Bdt: "BDT";
    readonly Bgn: "BGN";
    readonly Bhd: "BHD";
    readonly Bif: "BIF";
    readonly Bmd: "BMD";
    readonly Bnd: "BND";
    readonly Bob: "BOB";
    readonly Brl: "BRL";
    readonly Bsd: "BSD";
    readonly Btn: "BTN";
    readonly Bwp: "BWP";
    readonly Byr: "BYR";
    readonly Bzd: "BZD";
    readonly Cad: "CAD";
    readonly Cdf: "CDF";
    readonly Chf: "CHF";
    readonly Clp: "CLP";
    readonly Cny: "CNY";
    readonly Cop: "COP";
    readonly Crc: "CRC";
    readonly Cuc: "CUC";
    readonly Cup: "CUP";
    readonly Cve: "CVE";
    readonly Czk: "CZK";
    readonly Djf: "DJF";
    readonly Dkk: "DKK";
    readonly Dop: "DOP";
    readonly Dzd: "DZD";
    readonly Egp: "EGP";
    readonly Ern: "ERN";
    readonly Etb: "ETB";
    readonly Eur: "EUR";
    readonly Fjd: "FJD";
    readonly Fkp: "FKP";
    readonly Gbp: "GBP";
    readonly Gel: "GEL";
    readonly Ggp: "GGP";
    readonly Ghs: "GHS";
    readonly Gip: "GIP";
    readonly Gmd: "GMD";
    readonly Gnf: "GNF";
    readonly Gtq: "GTQ";
    readonly Gyd: "GYD";
    readonly Hkd: "HKD";
    readonly Hnl: "HNL";
    readonly Hrk: "HRK";
    readonly Htg: "HTG";
    readonly Huf: "HUF";
    readonly Idr: "IDR";
    readonly Ils: "ILS";
    readonly Imp: "IMP";
    readonly Inr: "INR";
    readonly Iqd: "IQD";
    readonly Irr: "IRR";
    readonly Isk: "ISK";
    readonly Jep: "JEP";
    readonly Jmd: "JMD";
    readonly Jod: "JOD";
    readonly Jpy: "JPY";
    readonly Kes: "KES";
    readonly Kgs: "KGS";
    readonly Khr: "KHR";
    readonly Kmf: "KMF";
    readonly Kpw: "KPW";
    readonly Krw: "KRW";
    readonly Kwd: "KWD";
    readonly Kyd: "KYD";
    readonly Kzt: "KZT";
    readonly Lak: "LAK";
    readonly Lbp: "LBP";
    readonly Lkr: "LKR";
    readonly Lrd: "LRD";
    readonly Lsl: "LSL";
    readonly Ltl: "LTL";
    readonly Lvl: "LVL";
    readonly Lyd: "LYD";
    readonly Mad: "MAD";
    readonly Mdl: "MDL";
    readonly Mga: "MGA";
    readonly Mkd: "MKD";
    readonly Mmk: "MMK";
    readonly Mnt: "MNT";
    readonly Mop: "MOP";
    readonly Mro: "MRO";
    readonly Mur: "MUR";
    readonly Mvr: "MVR";
    readonly Mwk: "MWK";
    readonly Mxn: "MXN";
    readonly Myr: "MYR";
    readonly Mzn: "MZN";
    readonly Nad: "NAD";
    readonly Ngn: "NGN";
    readonly Nio: "NIO";
    readonly Nok: "NOK";
    readonly Npr: "NPR";
    readonly Nzd: "NZD";
    readonly Omr: "OMR";
    readonly Pab: "PAB";
    readonly Pen: "PEN";
    readonly Pgk: "PGK";
    readonly Php: "PHP";
    readonly Pkr: "PKR";
    readonly Pln: "PLN";
    readonly Pyg: "PYG";
    readonly Qar: "QAR";
    readonly Ron: "RON";
    readonly Rsd: "RSD";
    readonly Rub: "RUB";
    readonly Rwf: "RWF";
    readonly Sar: "SAR";
    readonly Sbd: "SBD";
    readonly Scr: "SCR";
    readonly Sdg: "SDG";
    readonly Sek: "SEK";
    readonly Sgd: "SGD";
    readonly Shp: "SHP";
    readonly Sll: "SLL";
    readonly Sos: "SOS";
    readonly Spl: "SPL";
    readonly Srd: "SRD";
    readonly Std: "STD";
    readonly Svc: "SVC";
    readonly Syp: "SYP";
    readonly Szl: "SZL";
    readonly Thb: "THB";
    readonly Tjs: "TJS";
    readonly Tmt: "TMT";
    readonly Tnd: "TND";
    readonly Top: "TOP";
    readonly Try: "TRY";
    readonly Ttd: "TTD";
    readonly Tvd: "TVD";
    readonly Twd: "TWD";
    readonly Tzs: "TZS";
    readonly Uah: "UAH";
    readonly Ugx: "UGX";
    readonly Usd: "USD";
    readonly Uyu: "UYU";
    readonly Uzs: "UZS";
    readonly Vef: "VEF";
    readonly Vnd: "VND";
    readonly Vuv: "VUV";
    readonly Wst: "WST";
    readonly Xaf: "XAF";
    readonly Xcd: "XCD";
    readonly Xdr: "XDR";
    readonly Xof: "XOF";
    readonly Xpf: "XPF";
    readonly Yer: "YER";
    readonly Zar: "ZAR";
    readonly Zmw: "ZMW";
    readonly Zwd: "ZWD";
    readonly Btc: "BTC";
};
export type PriceCurrencyEnum = typeof PriceCurrencyEnum[keyof typeof PriceCurrencyEnum];
/**
 *
 * @export
 * @interface PriceList
 */
export interface PriceList {
    /**
     *
     * @type {string}
     * @memberof PriceList
     */
    'name'?: string;
    /**
     *
     * @type {Array<string>}
     * @memberof PriceList
     */
    'plans'?: Array<string>;
}
/**
 *
 * @export
 * @interface Product
 */
export interface Product {
    /**
     *
     * @type {string}
     * @memberof Product
     */
    'type'?: string;
    /**
     *
     * @type {string}
     * @memberof Product
     */
    'name'?: string;
    /**
     *
     * @type {string}
     * @memberof Product
     */
    'prettyName'?: string;
    /**
     *
     * @type {Array<Plan>}
     * @memberof Product
     */
    'plans'?: Array<Plan>;
    /**
     *
     * @type {Array<string>}
     * @memberof Product
     */
    'included'?: Array<string>;
    /**
     *
     * @type {Array<string>}
     * @memberof Product
     */
    'available'?: Array<string>;
}
/**
 *
 * @export
 * @interface RoleDefinition
 */
export interface RoleDefinition {
    /**
     *
     * @type {string}
     * @memberof RoleDefinition
     */
    'role': string;
    /**
     *
     * @type {Array<string>}
     * @memberof RoleDefinition
     */
    'permissions': Array<string>;
}
/**
 *
 * @export
 * @interface RolledUpUnit
 */
export interface RolledUpUnit {
    /**
     *
     * @type {string}
     * @memberof RolledUpUnit
     */
    'unitType'?: string;
    /**
     *
     * @type {number}
     * @memberof RolledUpUnit
     */
    'amount'?: number;
}
/**
 *
 * @export
 * @interface RolledUpUsage
 */
export interface RolledUpUsage {
    /**
     *
     * @type {string}
     * @memberof RolledUpUsage
     */
    'subscriptionId'?: string;
    /**
     *
     * @type {string}
     * @memberof RolledUpUsage
     */
    'startDate'?: string;
    /**
     *
     * @type {string}
     * @memberof RolledUpUsage
     */
    'endDate'?: string;
    /**
     *
     * @type {Array<RolledUpUnit>}
     * @memberof RolledUpUsage
     */
    'rolledUpUnits'?: Array<RolledUpUnit>;
}
/**
 *
 * @export
 * @interface Session
 */
export interface Session {
    /**
     *
     * @type {string}
     * @memberof Session
     */
    'id'?: string;
    /**
     *
     * @type {string}
     * @memberof Session
     */
    'startDate'?: string;
    /**
     *
     * @type {string}
     * @memberof Session
     */
    'lastAccessDate'?: string;
    /**
     *
     * @type {number}
     * @memberof Session
     */
    'timeout'?: number;
    /**
     *
     * @type {string}
     * @memberof Session
     */
    'host'?: string;
}
/**
 *
 * @export
 * @interface SimplePlan
 */
export interface SimplePlan {
    /**
     *
     * @type {string}
     * @memberof SimplePlan
     */
    'planId'?: string;
    /**
     *
     * @type {string}
     * @memberof SimplePlan
     */
    'productName'?: string;
    /**
     *
     * @type {string}
     * @memberof SimplePlan
     */
    'productCategory'?: SimplePlanProductCategoryEnum;
    /**
     *
     * @type {string}
     * @memberof SimplePlan
     */
    'currency'?: SimplePlanCurrencyEnum;
    /**
     *
     * @type {number}
     * @memberof SimplePlan
     */
    'amount'?: number;
    /**
     *
     * @type {string}
     * @memberof SimplePlan
     */
    'billingPeriod'?: SimplePlanBillingPeriodEnum;
    /**
     *
     * @type {number}
     * @memberof SimplePlan
     */
    'trialLength'?: number;
    /**
     *
     * @type {string}
     * @memberof SimplePlan
     */
    'trialTimeUnit'?: SimplePlanTrialTimeUnitEnum;
    /**
     *
     * @type {Array<string>}
     * @memberof SimplePlan
     */
    'availableBaseProducts'?: Array<string>;
}
export declare const SimplePlanProductCategoryEnum: {
    readonly Base: "BASE";
    readonly AddOn: "ADD_ON";
    readonly Standalone: "STANDALONE";
};
export type SimplePlanProductCategoryEnum = typeof SimplePlanProductCategoryEnum[keyof typeof SimplePlanProductCategoryEnum];
export declare const SimplePlanCurrencyEnum: {
    readonly Aed: "AED";
    readonly Afn: "AFN";
    readonly All: "ALL";
    readonly Amd: "AMD";
    readonly Ang: "ANG";
    readonly Aoa: "AOA";
    readonly Ars: "ARS";
    readonly Aud: "AUD";
    readonly Awg: "AWG";
    readonly Azn: "AZN";
    readonly Bam: "BAM";
    readonly Bbd: "BBD";
    readonly Bdt: "BDT";
    readonly Bgn: "BGN";
    readonly Bhd: "BHD";
    readonly Bif: "BIF";
    readonly Bmd: "BMD";
    readonly Bnd: "BND";
    readonly Bob: "BOB";
    readonly Brl: "BRL";
    readonly Bsd: "BSD";
    readonly Btn: "BTN";
    readonly Bwp: "BWP";
    readonly Byr: "BYR";
    readonly Bzd: "BZD";
    readonly Cad: "CAD";
    readonly Cdf: "CDF";
    readonly Chf: "CHF";
    readonly Clp: "CLP";
    readonly Cny: "CNY";
    readonly Cop: "COP";
    readonly Crc: "CRC";
    readonly Cuc: "CUC";
    readonly Cup: "CUP";
    readonly Cve: "CVE";
    readonly Czk: "CZK";
    readonly Djf: "DJF";
    readonly Dkk: "DKK";
    readonly Dop: "DOP";
    readonly Dzd: "DZD";
    readonly Egp: "EGP";
    readonly Ern: "ERN";
    readonly Etb: "ETB";
    readonly Eur: "EUR";
    readonly Fjd: "FJD";
    readonly Fkp: "FKP";
    readonly Gbp: "GBP";
    readonly Gel: "GEL";
    readonly Ggp: "GGP";
    readonly Ghs: "GHS";
    readonly Gip: "GIP";
    readonly Gmd: "GMD";
    readonly Gnf: "GNF";
    readonly Gtq: "GTQ";
    readonly Gyd: "GYD";
    readonly Hkd: "HKD";
    readonly Hnl: "HNL";
    readonly Hrk: "HRK";
    readonly Htg: "HTG";
    readonly Huf: "HUF";
    readonly Idr: "IDR";
    readonly Ils: "ILS";
    readonly Imp: "IMP";
    readonly Inr: "INR";
    readonly Iqd: "IQD";
    readonly Irr: "IRR";
    readonly Isk: "ISK";
    readonly Jep: "JEP";
    readonly Jmd: "JMD";
    readonly Jod: "JOD";
    readonly Jpy: "JPY";
    readonly Kes: "KES";
    readonly Kgs: "KGS";
    readonly Khr: "KHR";
    readonly Kmf: "KMF";
    readonly Kpw: "KPW";
    readonly Krw: "KRW";
    readonly Kwd: "KWD";
    readonly Kyd: "KYD";
    readonly Kzt: "KZT";
    readonly Lak: "LAK";
    readonly Lbp: "LBP";
    readonly Lkr: "LKR";
    readonly Lrd: "LRD";
    readonly Lsl: "LSL";
    readonly Ltl: "LTL";
    readonly Lvl: "LVL";
    readonly Lyd: "LYD";
    readonly Mad: "MAD";
    readonly Mdl: "MDL";
    readonly Mga: "MGA";
    readonly Mkd: "MKD";
    readonly Mmk: "MMK";
    readonly Mnt: "MNT";
    readonly Mop: "MOP";
    readonly Mro: "MRO";
    readonly Mur: "MUR";
    readonly Mvr: "MVR";
    readonly Mwk: "MWK";
    readonly Mxn: "MXN";
    readonly Myr: "MYR";
    readonly Mzn: "MZN";
    readonly Nad: "NAD";
    readonly Ngn: "NGN";
    readonly Nio: "NIO";
    readonly Nok: "NOK";
    readonly Npr: "NPR";
    readonly Nzd: "NZD";
    readonly Omr: "OMR";
    readonly Pab: "PAB";
    readonly Pen: "PEN";
    readonly Pgk: "PGK";
    readonly Php: "PHP";
    readonly Pkr: "PKR";
    readonly Pln: "PLN";
    readonly Pyg: "PYG";
    readonly Qar: "QAR";
    readonly Ron: "RON";
    readonly Rsd: "RSD";
    readonly Rub: "RUB";
    readonly Rwf: "RWF";
    readonly Sar: "SAR";
    readonly Sbd: "SBD";
    readonly Scr: "SCR";
    readonly Sdg: "SDG";
    readonly Sek: "SEK";
    readonly Sgd: "SGD";
    readonly Shp: "SHP";
    readonly Sll: "SLL";
    readonly Sos: "SOS";
    readonly Spl: "SPL";
    readonly Srd: "SRD";
    readonly Std: "STD";
    readonly Svc: "SVC";
    readonly Syp: "SYP";
    readonly Szl: "SZL";
    readonly Thb: "THB";
    readonly Tjs: "TJS";
    readonly Tmt: "TMT";
    readonly Tnd: "TND";
    readonly Top: "TOP";
    readonly Try: "TRY";
    readonly Ttd: "TTD";
    readonly Tvd: "TVD";
    readonly Twd: "TWD";
    readonly Tzs: "TZS";
    readonly Uah: "UAH";
    readonly Ugx: "UGX";
    readonly Usd: "USD";
    readonly Uyu: "UYU";
    readonly Uzs: "UZS";
    readonly Vef: "VEF";
    readonly Vnd: "VND";
    readonly Vuv: "VUV";
    readonly Wst: "WST";
    readonly Xaf: "XAF";
    readonly Xcd: "XCD";
    readonly Xdr: "XDR";
    readonly Xof: "XOF";
    readonly Xpf: "XPF";
    readonly Yer: "YER";
    readonly Zar: "ZAR";
    readonly Zmw: "ZMW";
    readonly Zwd: "ZWD";
    readonly Btc: "BTC";
};
export type SimplePlanCurrencyEnum = typeof SimplePlanCurrencyEnum[keyof typeof SimplePlanCurrencyEnum];
export declare const SimplePlanBillingPeriodEnum: {
    readonly Daily: "DAILY";
    readonly Weekly: "WEEKLY";
    readonly Biweekly: "BIWEEKLY";
    readonly ThirtyDays: "THIRTY_DAYS";
    readonly ThirtyOneDays: "THIRTY_ONE_DAYS";
    readonly SixtyDays: "SIXTY_DAYS";
    readonly NinetyDays: "NINETY_DAYS";
    readonly Monthly: "MONTHLY";
    readonly Bimestrial: "BIMESTRIAL";
    readonly Quarterly: "QUARTERLY";
    readonly Triannual: "TRIANNUAL";
    readonly Biannual: "BIANNUAL";
    readonly Annual: "ANNUAL";
    readonly Sesquiennial: "SESQUIENNIAL";
    readonly Biennial: "BIENNIAL";
    readonly Triennial: "TRIENNIAL";
    readonly NoBillingPeriod: "NO_BILLING_PERIOD";
};
export type SimplePlanBillingPeriodEnum = typeof SimplePlanBillingPeriodEnum[keyof typeof SimplePlanBillingPeriodEnum];
export declare const SimplePlanTrialTimeUnitEnum: {
    readonly Days: "DAYS";
    readonly Weeks: "WEEKS";
    readonly Months: "MONTHS";
    readonly Years: "YEARS";
    readonly Unlimited: "UNLIMITED";
};
export type SimplePlanTrialTimeUnitEnum = typeof SimplePlanTrialTimeUnitEnum[keyof typeof SimplePlanTrialTimeUnitEnum];
/**
 *
 * @export
 * @interface Subject
 */
export interface Subject {
    /**
     *
     * @type {string}
     * @memberof Subject
     */
    'principal'?: string;
    /**
     *
     * @type {boolean}
     * @memberof Subject
     */
    'isAuthenticated'?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof Subject
     */
    'isRemembered'?: boolean;
    /**
     *
     * @type {Session}
     * @memberof Subject
     */
    'session'?: Session;
}
/**
 *
 * @export
 * @interface Subscription
 */
export interface Subscription {
    /**
     *
     * @type {string}
     * @memberof Subscription
     */
    'accountId'?: string;
    /**
     *
     * @type {string}
     * @memberof Subscription
     */
    'bundleId'?: string;
    /**
     *
     * @type {string}
     * @memberof Subscription
     */
    'bundleExternalKey'?: string;
    /**
     *
     * @type {string}
     * @memberof Subscription
     */
    'subscriptionId'?: string;
    /**
     *
     * @type {string}
     * @memberof Subscription
     */
    'externalKey'?: string;
    /**
     *
     * @type {string}
     * @memberof Subscription
     */
    'startDate'?: string;
    /**
     *
     * @type {string}
     * @memberof Subscription
     */
    'productName': string;
    /**
     *
     * @type {string}
     * @memberof Subscription
     */
    'productCategory'?: SubscriptionProductCategoryEnum;
    /**
     *
     * @type {string}
     * @memberof Subscription
     */
    'billingPeriod': SubscriptionBillingPeriodEnum;
    /**
     *
     * @type {string}
     * @memberof Subscription
     */
    'phaseType'?: SubscriptionPhaseTypeEnum;
    /**
     *
     * @type {string}
     * @memberof Subscription
     */
    'priceList': string;
    /**
     *
     * @type {string}
     * @memberof Subscription
     */
    'planName': string;
    /**
     *
     * @type {string}
     * @memberof Subscription
     */
    'state'?: SubscriptionStateEnum;
    /**
     *
     * @type {string}
     * @memberof Subscription
     */
    'sourceType'?: SubscriptionSourceTypeEnum;
    /**
     *
     * @type {string}
     * @memberof Subscription
     */
    'cancelledDate'?: string;
    /**
     *
     * @type {string}
     * @memberof Subscription
     */
    'chargedThroughDate'?: string;
    /**
     *
     * @type {string}
     * @memberof Subscription
     */
    'billingStartDate'?: string;
    /**
     *
     * @type {string}
     * @memberof Subscription
     */
    'billingEndDate'?: string;
    /**
     *
     * @type {number}
     * @memberof Subscription
     */
    'billCycleDayLocal'?: number;
    /**
     *
     * @type {number}
     * @memberof Subscription
     */
    'quantity'?: number;
    /**
     *
     * @type {Array<EventSubscription>}
     * @memberof Subscription
     */
    'events'?: Array<EventSubscription>;
    /**
     *
     * @type {Array<PhasePrice>}
     * @memberof Subscription
     */
    'priceOverrides'?: Array<PhasePrice>;
    /**
     *
     * @type {Array<PhasePrice>}
     * @memberof Subscription
     */
    'prices'?: Array<PhasePrice>;
    /**
     *
     * @type {Array<AuditLog>}
     * @memberof Subscription
     */
    'auditLogs'?: Array<AuditLog>;
}
export declare const SubscriptionProductCategoryEnum: {
    readonly Base: "BASE";
    readonly AddOn: "ADD_ON";
    readonly Standalone: "STANDALONE";
};
export type SubscriptionProductCategoryEnum = typeof SubscriptionProductCategoryEnum[keyof typeof SubscriptionProductCategoryEnum];
export declare const SubscriptionBillingPeriodEnum: {
    readonly Daily: "DAILY";
    readonly Weekly: "WEEKLY";
    readonly Biweekly: "BIWEEKLY";
    readonly ThirtyDays: "THIRTY_DAYS";
    readonly ThirtyOneDays: "THIRTY_ONE_DAYS";
    readonly SixtyDays: "SIXTY_DAYS";
    readonly NinetyDays: "NINETY_DAYS";
    readonly Monthly: "MONTHLY";
    readonly Bimestrial: "BIMESTRIAL";
    readonly Quarterly: "QUARTERLY";
    readonly Triannual: "TRIANNUAL";
    readonly Biannual: "BIANNUAL";
    readonly Annual: "ANNUAL";
    readonly Sesquiennial: "SESQUIENNIAL";
    readonly Biennial: "BIENNIAL";
    readonly Triennial: "TRIENNIAL";
    readonly NoBillingPeriod: "NO_BILLING_PERIOD";
};
export type SubscriptionBillingPeriodEnum = typeof SubscriptionBillingPeriodEnum[keyof typeof SubscriptionBillingPeriodEnum];
export declare const SubscriptionPhaseTypeEnum: {
    readonly Trial: "TRIAL";
    readonly Discount: "DISCOUNT";
    readonly Fixedterm: "FIXEDTERM";
    readonly Evergreen: "EVERGREEN";
};
export type SubscriptionPhaseTypeEnum = typeof SubscriptionPhaseTypeEnum[keyof typeof SubscriptionPhaseTypeEnum];
export declare const SubscriptionStateEnum: {
    readonly Pending: "PENDING";
    readonly Active: "ACTIVE";
    readonly Blocked: "BLOCKED";
    readonly Cancelled: "CANCELLED";
    readonly Expired: "EXPIRED";
};
export type SubscriptionStateEnum = typeof SubscriptionStateEnum[keyof typeof SubscriptionStateEnum];
export declare const SubscriptionSourceTypeEnum: {
    readonly Native: "NATIVE";
    readonly Migrated: "MIGRATED";
    readonly Transferred: "TRANSFERRED";
};
export type SubscriptionSourceTypeEnum = typeof SubscriptionSourceTypeEnum[keyof typeof SubscriptionSourceTypeEnum];
/**
 *
 * @export
 * @interface SubscriptionUsageRecord
 */
export interface SubscriptionUsageRecord {
    /**
     *
     * @type {string}
     * @memberof SubscriptionUsageRecord
     */
    'subscriptionId': string;
    /**
     *
     * @type {string}
     * @memberof SubscriptionUsageRecord
     */
    'trackingId'?: string;
    /**
     *
     * @type {Array<UnitUsageRecord>}
     * @memberof SubscriptionUsageRecord
     */
    'unitUsageRecords': Array<UnitUsageRecord>;
}
/**
 *
 * @export
 * @interface Tag
 */
export interface Tag {
    /**
     *
     * @type {string}
     * @memberof Tag
     */
    'tagId'?: string;
    /**
     *
     * @type {string}
     * @memberof Tag
     */
    'objectType'?: TagObjectTypeEnum;
    /**
     *
     * @type {string}
     * @memberof Tag
     */
    'objectId'?: string;
    /**
     *
     * @type {string}
     * @memberof Tag
     */
    'tagDefinitionId'?: string;
    /**
     *
     * @type {string}
     * @memberof Tag
     */
    'tagDefinitionName'?: string;
    /**
     *
     * @type {Array<AuditLog>}
     * @memberof Tag
     */
    'auditLogs'?: Array<AuditLog>;
}
export declare const TagObjectTypeEnum: {
    readonly Account: "ACCOUNT";
    readonly AccountEmail: "ACCOUNT_EMAIL";
    readonly BlockingStates: "BLOCKING_STATES";
    readonly Bundle: "BUNDLE";
    readonly CustomField: "CUSTOM_FIELD";
    readonly Invoice: "INVOICE";
    readonly Payment: "PAYMENT";
    readonly Transaction: "TRANSACTION";
    readonly InvoiceItem: "INVOICE_ITEM";
    readonly InvoicePayment: "INVOICE_PAYMENT";
    readonly Subscription: "SUBSCRIPTION";
    readonly SubscriptionEvent: "SUBSCRIPTION_EVENT";
    readonly ServiceBroadcast: "SERVICE_BROADCAST";
    readonly PaymentAttempt: "PAYMENT_ATTEMPT";
    readonly PaymentMethod: "PAYMENT_METHOD";
    readonly Tag: "TAG";
    readonly TagDefinition: "TAG_DEFINITION";
    readonly Tenant: "TENANT";
    readonly TenantKvs: "TENANT_KVS";
};
export type TagObjectTypeEnum = typeof TagObjectTypeEnum[keyof typeof TagObjectTypeEnum];
/**
 *
 * @export
 * @interface TagDefinition
 */
export interface TagDefinition {
    /**
     *
     * @type {string}
     * @memberof TagDefinition
     */
    'id'?: string;
    /**
     *
     * @type {boolean}
     * @memberof TagDefinition
     */
    'isControlTag'?: boolean;
    /**
     *
     * @type {string}
     * @memberof TagDefinition
     */
    'name': string;
    /**
     *
     * @type {string}
     * @memberof TagDefinition
     */
    'description': string;
    /**
     *
     * @type {Set<string>}
     * @memberof TagDefinition
     */
    'applicableObjectTypes'?: Set<TagDefinitionApplicableObjectTypesEnum>;
    /**
     *
     * @type {Array<AuditLog>}
     * @memberof TagDefinition
     */
    'auditLogs'?: Array<AuditLog>;
}
export declare const TagDefinitionApplicableObjectTypesEnum: {
    readonly Account: "ACCOUNT";
    readonly AccountEmail: "ACCOUNT_EMAIL";
    readonly BlockingStates: "BLOCKING_STATES";
    readonly Bundle: "BUNDLE";
    readonly CustomField: "CUSTOM_FIELD";
    readonly Invoice: "INVOICE";
    readonly Payment: "PAYMENT";
    readonly Transaction: "TRANSACTION";
    readonly InvoiceItem: "INVOICE_ITEM";
    readonly InvoicePayment: "INVOICE_PAYMENT";
    readonly Subscription: "SUBSCRIPTION";
    readonly SubscriptionEvent: "SUBSCRIPTION_EVENT";
    readonly ServiceBroadcast: "SERVICE_BROADCAST";
    readonly PaymentAttempt: "PAYMENT_ATTEMPT";
    readonly PaymentMethod: "PAYMENT_METHOD";
    readonly Tag: "TAG";
    readonly TagDefinition: "TAG_DEFINITION";
    readonly Tenant: "TENANT";
    readonly TenantKvs: "TENANT_KVS";
};
export type TagDefinitionApplicableObjectTypesEnum = typeof TagDefinitionApplicableObjectTypesEnum[keyof typeof TagDefinitionApplicableObjectTypesEnum];
/**
 *
 * @export
 * @interface Tenant
 */
export interface Tenant {
    /**
     *
     * @type {string}
     * @memberof Tenant
     */
    'tenantId'?: string;
    /**
     *
     * @type {string}
     * @memberof Tenant
     */
    'externalKey'?: string;
    /**
     *
     * @type {string}
     * @memberof Tenant
     */
    'apiKey': string;
    /**
     *
     * @type {string}
     * @memberof Tenant
     */
    'apiSecret': string;
    /**
     *
     * @type {Array<AuditLog>}
     * @memberof Tenant
     */
    'auditLogs'?: Array<AuditLog>;
}
/**
 *
 * @export
 * @interface TenantKeyValue
 */
export interface TenantKeyValue {
    /**
     *
     * @type {string}
     * @memberof TenantKeyValue
     */
    'key'?: string;
    /**
     *
     * @type {Array<string>}
     * @memberof TenantKeyValue
     */
    'values'?: Array<string>;
    /**
     *
     * @type {Array<AuditLog>}
     * @memberof TenantKeyValue
     */
    'auditLogs'?: Array<AuditLog>;
}
/**
 *
 * @export
 * @interface Tier
 */
export interface Tier {
    /**
     *
     * @type {Array<Limit>}
     * @memberof Tier
     */
    'limits'?: Array<Limit>;
    /**
     *
     * @type {Array<Price>}
     * @memberof Tier
     */
    'fixedPrice'?: Array<Price>;
    /**
     *
     * @type {Array<Price>}
     * @memberof Tier
     */
    'recurringPrice'?: Array<Price>;
    /**
     *
     * @type {Array<TieredBlock>}
     * @memberof Tier
     */
    'blocks'?: Array<TieredBlock>;
}
/**
 *
 * @export
 * @interface TierPrice
 */
export interface TierPrice {
    /**
     *
     * @type {Array<BlockPrice>}
     * @memberof TierPrice
     */
    'blockPrices'?: Array<BlockPrice>;
}
/**
 *
 * @export
 * @interface TieredBlock
 */
export interface TieredBlock {
    /**
     *
     * @type {string}
     * @memberof TieredBlock
     */
    'unit'?: string;
    /**
     *
     * @type {string}
     * @memberof TieredBlock
     */
    'size'?: string;
    /**
     *
     * @type {string}
     * @memberof TieredBlock
     */
    'max'?: string;
    /**
     *
     * @type {Array<Price>}
     * @memberof TieredBlock
     */
    'prices'?: Array<Price>;
}
/**
 *
 * @export
 * @interface Unit
 */
export interface Unit {
    /**
     *
     * @type {string}
     * @memberof Unit
     */
    'name'?: string;
    /**
     *
     * @type {string}
     * @memberof Unit
     */
    'prettyName'?: string;
}
/**
 *
 * @export
 * @interface UnitUsageRecord
 */
export interface UnitUsageRecord {
    /**
     *
     * @type {string}
     * @memberof UnitUsageRecord
     */
    'unitType'?: string;
    /**
     *
     * @type {Array<UsageRecord>}
     * @memberof UnitUsageRecord
     */
    'usageRecords'?: Array<UsageRecord>;
}
/**
 *
 * @export
 * @interface Usage
 */
export interface Usage {
    /**
     *
     * @type {string}
     * @memberof Usage
     */
    'billingPeriod'?: string;
    /**
     *
     * @type {Array<Tier>}
     * @memberof Usage
     */
    'tiers'?: Array<Tier>;
}
/**
 *
 * @export
 * @interface UsagePrice
 */
export interface UsagePrice {
    /**
     *
     * @type {string}
     * @memberof UsagePrice
     */
    'usageName'?: string;
    /**
     *
     * @type {string}
     * @memberof UsagePrice
     */
    'usageType'?: UsagePriceUsageTypeEnum;
    /**
     *
     * @type {string}
     * @memberof UsagePrice
     */
    'billingMode'?: UsagePriceBillingModeEnum;
    /**
     *
     * @type {string}
     * @memberof UsagePrice
     */
    'tierBlockPolicy'?: UsagePriceTierBlockPolicyEnum;
    /**
     *
     * @type {Array<TierPrice>}
     * @memberof UsagePrice
     */
    'tierPrices'?: Array<TierPrice>;
}
export declare const UsagePriceUsageTypeEnum: {
    readonly Capacity: "CAPACITY";
    readonly Consumable: "CONSUMABLE";
};
export type UsagePriceUsageTypeEnum = typeof UsagePriceUsageTypeEnum[keyof typeof UsagePriceUsageTypeEnum];
export declare const UsagePriceBillingModeEnum: {
    readonly Advance: "IN_ADVANCE";
    readonly Arrear: "IN_ARREAR";
};
export type UsagePriceBillingModeEnum = typeof UsagePriceBillingModeEnum[keyof typeof UsagePriceBillingModeEnum];
export declare const UsagePriceTierBlockPolicyEnum: {
    readonly AllTiers: "ALL_TIERS";
    readonly TopTier: "TOP_TIER";
};
export type UsagePriceTierBlockPolicyEnum = typeof UsagePriceTierBlockPolicyEnum[keyof typeof UsagePriceTierBlockPolicyEnum];
/**
 *
 * @export
 * @interface UsageRecord
 */
export interface UsageRecord {
    /**
     *
     * @type {string}
     * @memberof UsageRecord
     */
    'recordDate'?: string;
    /**
     *
     * @type {number}
     * @memberof UsageRecord
     */
    'amount'?: number;
}
/**
 *
 * @export
 * @interface UserRoles
 */
export interface UserRoles {
    /**
     *
     * @type {string}
     * @memberof UserRoles
     */
    'username': string;
    /**
     *
     * @type {string}
     * @memberof UserRoles
     */
    'password': string;
    /**
     *
     * @type {Array<string>}
     * @memberof UserRoles
     */
    'roles': Array<string>;
}
/**
 * AccountApi - axios parameter creator
 * @export
 */
export declare const AccountApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Block an account
     * @param {BlockingState} body
     * @param {string} accountId
     * @param {string} xKillbillCreatedBy
     * @param {string} [requestedDate]
     * @param {Array<string>} [pluginProperty]
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addAccountBlockingState: (body: BlockingState, accountId: string, xKillbillCreatedBy: string, requestedDate?: string, pluginProperty?: Array<string>, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Add account email
     * @param {AccountEmail} body
     * @param {string} accountId
     * @param {string} xKillbillCreatedBy
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addEmail: (body: AccountEmail, accountId: string, xKillbillCreatedBy: string, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Close account
     * @param {string} accountId
     * @param {string} xKillbillCreatedBy
     * @param {boolean} [cancelAllSubscriptions]
     * @param {boolean} [writeOffUnpaidInvoices]
     * @param {boolean} [itemAdjustUnpaidInvoices]
     * @param {boolean} [removeFutureNotifications]
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    closeAccount: (accountId: string, xKillbillCreatedBy: string, cancelAllSubscriptions?: boolean, writeOffUnpaidInvoices?: boolean, itemAdjustUnpaidInvoices?: boolean, removeFutureNotifications?: boolean, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Create account
     * @param {Account} body
     * @param {string} xKillbillCreatedBy
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createAccount: (body: Account, xKillbillCreatedBy: string, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Add custom fields to account
     * @param {Array<CustomField>} body
     * @param {string} accountId
     * @param {string} xKillbillCreatedBy
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createAccountCustomFields: (body: Array<CustomField>, accountId: string, xKillbillCreatedBy: string, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Add tags to account
     * @param {Array<string>} body
     * @param {string} accountId
     * @param {string} xKillbillCreatedBy
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createAccountTags: (body: Array<string>, accountId: string, xKillbillCreatedBy: string, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Add a payment method
     * @param {PaymentMethod} body
     * @param {string} accountId
     * @param {string} xKillbillCreatedBy
     * @param {boolean} [isDefault]
     * @param {boolean} [payAllUnpaidInvoices]
     * @param {Array<string>} [controlPluginName]
     * @param {Array<string>} [pluginProperty]
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createPaymentMethod: (body: PaymentMethod, accountId: string, xKillbillCreatedBy: string, isDefault?: boolean, payAllUnpaidInvoices?: boolean, controlPluginName?: Array<string>, pluginProperty?: Array<string>, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Remove custom fields from account
     * @param {string} accountId
     * @param {string} xKillbillCreatedBy
     * @param {Array<string>} [customField]
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteAccountCustomFields: (accountId: string, xKillbillCreatedBy: string, customField?: Array<string>, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Remove tags from account
     * @param {string} accountId
     * @param {string} xKillbillCreatedBy
     * @param {Array<string>} [tagDef]
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteAccountTags: (accountId: string, xKillbillCreatedBy: string, tagDef?: Array<string>, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Retrieve an account by id
     * @param {string} accountId
     * @param {boolean} [accountWithBalance]
     * @param {boolean} [accountWithBalanceAndCBA]
     * @param {'FULL' | 'MINIMAL' | 'NONE'} [audit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAccount: (accountId: string, accountWithBalance?: boolean, accountWithBalanceAndCBA?: boolean, audit?: 'FULL' | 'MINIMAL' | 'NONE', options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Retrieve audit logs by account id
     * @param {string} accountId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAccountAuditLogs: (accountId: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Retrieve account audit logs with history by account id
     * @param {string} accountId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAccountAuditLogsWithHistory: (accountId: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Retrieve bundles for account
     * @param {string} accountId
     * @param {string} [externalKey]
     * @param {string} [bundlesFilter]
     * @param {'FULL' | 'MINIMAL' | 'NONE'} [audit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAccountBundles: (accountId: string, externalKey?: string, bundlesFilter?: string, audit?: 'FULL' | 'MINIMAL' | 'NONE', options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Retrieve paginated bundles for account
     * @param {string} accountId
     * @param {number} [offset]
     * @param {number} [limit]
     * @param {'FULL' | 'MINIMAL' | 'NONE'} [audit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAccountBundlesPaginated: (accountId: string, offset?: number, limit?: number, audit?: 'FULL' | 'MINIMAL' | 'NONE', options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Retrieve an account by external key
     * @param {string} externalKey
     * @param {boolean} [accountWithBalance]
     * @param {boolean} [accountWithBalanceAndCBA]
     * @param {'FULL' | 'MINIMAL' | 'NONE'} [audit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAccountByKey: (externalKey: string, accountWithBalance?: boolean, accountWithBalanceAndCBA?: boolean, audit?: 'FULL' | 'MINIMAL' | 'NONE', options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Retrieve account custom fields
     * @param {string} accountId
     * @param {'FULL' | 'MINIMAL' | 'NONE'} [audit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAccountCustomFields: (accountId: string, audit?: 'FULL' | 'MINIMAL' | 'NONE', options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Retrieve account email audit logs with history by id
     * @param {string} accountId
     * @param {string} accountEmailId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAccountEmailAuditLogsWithHistory: (accountId: string, accountEmailId: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Retrieve account tags
     * @param {string} accountId
     * @param {boolean} [includedDeleted]
     * @param {'FULL' | 'MINIMAL' | 'NONE'} [audit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAccountTags: (accountId: string, includedDeleted?: boolean, audit?: 'FULL' | 'MINIMAL' | 'NONE', options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Retrieve account timeline
     * @param {string} accountId
     * @param {boolean} [parallel]
     * @param {'FULL' | 'MINIMAL' | 'NONE'} [audit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAccountTimeline: (accountId: string, parallel?: boolean, audit?: 'FULL' | 'MINIMAL' | 'NONE', options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary List accounts
     * @param {number} [offset]
     * @param {number} [limit]
     * @param {boolean} [accountWithBalance]
     * @param {boolean} [accountWithBalanceAndCBA]
     * @param {'FULL' | 'MINIMAL' | 'NONE'} [audit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAccounts: (offset?: number, limit?: number, accountWithBalance?: boolean, accountWithBalanceAndCBA?: boolean, audit?: 'FULL' | 'MINIMAL' | 'NONE', options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Retrieve account customFields
     * @param {string} accountId
     * @param {'ACCOUNT' | 'ACCOUNT_EMAIL' | 'BLOCKING_STATES' | 'BUNDLE' | 'CUSTOM_FIELD' | 'INVOICE' | 'PAYMENT' | 'TRANSACTION' | 'INVOICE_ITEM' | 'INVOICE_PAYMENT' | 'SUBSCRIPTION' | 'SUBSCRIPTION_EVENT' | 'SERVICE_BROADCAST' | 'PAYMENT_ATTEMPT' | 'PAYMENT_METHOD' | 'TAG' | 'TAG_DEFINITION' | 'TENANT' | 'TENANT_KVS'} [objectType]
     * @param {'FULL' | 'MINIMAL' | 'NONE'} [audit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllCustomFields: (accountId: string, objectType?: 'ACCOUNT' | 'ACCOUNT_EMAIL' | 'BLOCKING_STATES' | 'BUNDLE' | 'CUSTOM_FIELD' | 'INVOICE' | 'PAYMENT' | 'TRANSACTION' | 'INVOICE_ITEM' | 'INVOICE_PAYMENT' | 'SUBSCRIPTION' | 'SUBSCRIPTION_EVENT' | 'SERVICE_BROADCAST' | 'PAYMENT_ATTEMPT' | 'PAYMENT_METHOD' | 'TAG' | 'TAG_DEFINITION' | 'TENANT' | 'TENANT_KVS', audit?: 'FULL' | 'MINIMAL' | 'NONE', options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Retrieve account tags
     * @param {string} accountId
     * @param {'ACCOUNT' | 'ACCOUNT_EMAIL' | 'BLOCKING_STATES' | 'BUNDLE' | 'CUSTOM_FIELD' | 'INVOICE' | 'PAYMENT' | 'TRANSACTION' | 'INVOICE_ITEM' | 'INVOICE_PAYMENT' | 'SUBSCRIPTION' | 'SUBSCRIPTION_EVENT' | 'SERVICE_BROADCAST' | 'PAYMENT_ATTEMPT' | 'PAYMENT_METHOD' | 'TAG' | 'TAG_DEFINITION' | 'TENANT' | 'TENANT_KVS'} [objectType]
     * @param {boolean} [includedDeleted]
     * @param {'FULL' | 'MINIMAL' | 'NONE'} [audit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllTags: (accountId: string, objectType?: 'ACCOUNT' | 'ACCOUNT_EMAIL' | 'BLOCKING_STATES' | 'BUNDLE' | 'CUSTOM_FIELD' | 'INVOICE' | 'PAYMENT' | 'TRANSACTION' | 'INVOICE_ITEM' | 'INVOICE_PAYMENT' | 'SUBSCRIPTION' | 'SUBSCRIPTION_EVENT' | 'SERVICE_BROADCAST' | 'PAYMENT_ATTEMPT' | 'PAYMENT_METHOD' | 'TAG' | 'TAG_DEFINITION' | 'TENANT' | 'TENANT_KVS', includedDeleted?: boolean, audit?: 'FULL' | 'MINIMAL' | 'NONE', options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Retrieve blocking state audit logs with history by id
     * @param {string} blockingId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBlockingStateAuditLogsWithHistory: (blockingId: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Retrieve blocking states for account
     * @param {string} accountId
     * @param {Array<'SUBSCRIPTION' | 'SUBSCRIPTION_BUNDLE' | 'ACCOUNT'>} [blockingStateTypes]
     * @param {Array<string>} [blockingStateSvcs]
     * @param {'FULL' | 'MINIMAL' | 'NONE'} [audit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBlockingStates: (accountId: string, blockingStateTypes?: Array<'SUBSCRIPTION' | 'SUBSCRIPTION_BUNDLE' | 'ACCOUNT'>, blockingStateSvcs?: Array<string>, audit?: 'FULL' | 'MINIMAL' | 'NONE', options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary List children accounts
     * @param {string} accountId
     * @param {boolean} [accountWithBalance]
     * @param {boolean} [accountWithBalanceAndCBA]
     * @param {'FULL' | 'MINIMAL' | 'NONE'} [audit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getChildrenAccounts: (accountId: string, accountWithBalance?: boolean, accountWithBalanceAndCBA?: boolean, audit?: 'FULL' | 'MINIMAL' | 'NONE', options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Retrieve an account emails
     * @param {string} accountId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEmails: (accountId: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Retrieve account invoice payments
     * @param {string} accountId
     * @param {boolean} [withPluginInfo]
     * @param {boolean} [withAttempts]
     * @param {Array<string>} [pluginProperty]
     * @param {'FULL' | 'MINIMAL' | 'NONE'} [audit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getInvoicePayments: (accountId: string, withPluginInfo?: boolean, withAttempts?: boolean, pluginProperty?: Array<string>, audit?: 'FULL' | 'MINIMAL' | 'NONE', options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Retrieve account invoices
     * @param {string} accountId
     * @param {string} [startDate]
     * @param {string} [endDate]
     * @param {boolean} [withMigrationInvoices]
     * @param {boolean} [unpaidInvoicesOnly]
     * @param {boolean} [includeVoidedInvoices]
     * @param {boolean} [includeInvoiceComponents]
     * @param {string} [invoicesFilter]
     * @param {'FULL' | 'MINIMAL' | 'NONE'} [audit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getInvoicesForAccount: (accountId: string, startDate?: string, endDate?: string, withMigrationInvoices?: boolean, unpaidInvoicesOnly?: boolean, includeVoidedInvoices?: boolean, includeInvoiceComponents?: boolean, invoicesFilter?: string, audit?: 'FULL' | 'MINIMAL' | 'NONE', options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Retrieve paginated invoices for account
     * @param {string} accountId
     * @param {number} [offset]
     * @param {number} [limit]
     * @param {'FULL' | 'MINIMAL' | 'NONE'} [audit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getInvoicesForAccountPaginated: (accountId: string, offset?: number, limit?: number, audit?: 'FULL' | 'MINIMAL' | 'NONE', options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Retrieve overdue state for account
     * @param {string} accountId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOverdueAccount: (accountId: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Retrieve account payment methods
     * @param {string} accountId
     * @param {boolean} [withPluginInfo]
     * @param {boolean} [includedDeleted]
     * @param {Array<string>} [pluginProperty]
     * @param {'FULL' | 'MINIMAL' | 'NONE'} [audit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPaymentMethodsForAccount: (accountId: string, withPluginInfo?: boolean, includedDeleted?: boolean, pluginProperty?: Array<string>, audit?: 'FULL' | 'MINIMAL' | 'NONE', options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Retrieve account payments
     * @param {string} accountId
     * @param {boolean} [withAttempts]
     * @param {boolean} [withPluginInfo]
     * @param {Array<string>} [pluginProperty]
     * @param {'FULL' | 'MINIMAL' | 'NONE'} [audit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPaymentsForAccount: (accountId: string, withAttempts?: boolean, withPluginInfo?: boolean, pluginProperty?: Array<string>, audit?: 'FULL' | 'MINIMAL' | 'NONE', options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Modify custom fields to account
     * @param {Array<CustomField>} body
     * @param {string} accountId
     * @param {string} xKillbillCreatedBy
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    modifyAccountCustomFields: (body: Array<CustomField>, accountId: string, xKillbillCreatedBy: string, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Trigger a payment for all unpaid invoices
     * @param {string} accountId
     * @param {string} xKillbillCreatedBy
     * @param {string} [paymentMethodId]
     * @param {boolean} [externalPayment]
     * @param {number} [paymentAmount]
     * @param {string} [targetDate]
     * @param {Array<string>} [pluginProperty]
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    payAllInvoices: (accountId: string, xKillbillCreatedBy: string, paymentMethodId?: string, externalPayment?: boolean, paymentAmount?: number, targetDate?: string, pluginProperty?: Array<string>, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Trigger a payment (authorization, purchase or credit)
     * @param {PaymentTransaction} body
     * @param {string} accountId
     * @param {string} xKillbillCreatedBy
     * @param {string} [paymentMethodId]
     * @param {Array<string>} [controlPluginName]
     * @param {Array<string>} [pluginProperty]
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    processPayment: (body: PaymentTransaction, accountId: string, xKillbillCreatedBy: string, paymentMethodId?: string, controlPluginName?: Array<string>, pluginProperty?: Array<string>, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Trigger a payment using the account external key (authorization, purchase or credit)
     * @param {PaymentTransaction} body
     * @param {string} externalKey
     * @param {string} xKillbillCreatedBy
     * @param {string} [paymentMethodId]
     * @param {Array<string>} [controlPluginName]
     * @param {Array<string>} [pluginProperty]
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    processPaymentByExternalKey: (body: PaymentTransaction, externalKey: string, xKillbillCreatedBy: string, paymentMethodId?: string, controlPluginName?: Array<string>, pluginProperty?: Array<string>, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Rebalance account CBA
     * @param {string} accountId
     * @param {string} xKillbillCreatedBy
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    rebalanceExistingCBAOnAccount: (accountId: string, xKillbillCreatedBy: string, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Refresh account payment methods
     * @param {string} accountId
     * @param {string} xKillbillCreatedBy
     * @param {string} [pluginName]
     * @param {Array<string>} [pluginProperty]
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    refreshPaymentMethods: (accountId: string, xKillbillCreatedBy: string, pluginName?: string, pluginProperty?: Array<string>, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Delete email from account
     * @param {string} accountId
     * @param {string} email
     * @param {string} xKillbillCreatedBy
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeEmail: (accountId: string, email: string, xKillbillCreatedBy: string, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Search accounts
     * @param {string} searchKey
     * @param {number} [offset]
     * @param {number} [limit]
     * @param {boolean} [accountWithBalance]
     * @param {boolean} [accountWithBalanceAndCBA]
     * @param {'FULL' | 'MINIMAL' | 'NONE'} [audit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchAccounts: (searchKey: string, offset?: number, limit?: number, accountWithBalance?: boolean, accountWithBalanceAndCBA?: boolean, audit?: 'FULL' | 'MINIMAL' | 'NONE', options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Set the default payment method
     * @param {string} accountId
     * @param {string} paymentMethodId
     * @param {string} xKillbillCreatedBy
     * @param {boolean} [payAllUnpaidInvoices]
     * @param {Array<string>} [pluginProperty]
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setDefaultPaymentMethod: (accountId: string, paymentMethodId: string, xKillbillCreatedBy: string, payAllUnpaidInvoices?: boolean, pluginProperty?: Array<string>, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Move a given child credit to the parent level
     * @param {string} childAccountId
     * @param {string} xKillbillCreatedBy
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    transferChildCreditToParent: (childAccountId: string, xKillbillCreatedBy: string, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Update account
     * @param {Account} body
     * @param {string} accountId
     * @param {string} xKillbillCreatedBy
     * @param {boolean} [treatNullAsReset]
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateAccount: (body: Account, accountId: string, xKillbillCreatedBy: string, treatNullAsReset?: boolean, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * AccountApi - functional programming interface
 * @export
 */
export declare const AccountApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary Block an account
     * @param {BlockingState} body
     * @param {string} accountId
     * @param {string} xKillbillCreatedBy
     * @param {string} [requestedDate]
     * @param {Array<string>} [pluginProperty]
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addAccountBlockingState(body: BlockingState, accountId: string, xKillbillCreatedBy: string, requestedDate?: string, pluginProperty?: Array<string>, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<BlockingState>>>;
    /**
     *
     * @summary Add account email
     * @param {AccountEmail} body
     * @param {string} accountId
     * @param {string} xKillbillCreatedBy
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addEmail(body: AccountEmail, accountId: string, xKillbillCreatedBy: string, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<AccountEmail>>>;
    /**
     *
     * @summary Close account
     * @param {string} accountId
     * @param {string} xKillbillCreatedBy
     * @param {boolean} [cancelAllSubscriptions]
     * @param {boolean} [writeOffUnpaidInvoices]
     * @param {boolean} [itemAdjustUnpaidInvoices]
     * @param {boolean} [removeFutureNotifications]
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    closeAccount(accountId: string, xKillbillCreatedBy: string, cancelAllSubscriptions?: boolean, writeOffUnpaidInvoices?: boolean, itemAdjustUnpaidInvoices?: boolean, removeFutureNotifications?: boolean, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary Create account
     * @param {Account} body
     * @param {string} xKillbillCreatedBy
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createAccount(body: Account, xKillbillCreatedBy: string, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Account>>;
    /**
     *
     * @summary Add custom fields to account
     * @param {Array<CustomField>} body
     * @param {string} accountId
     * @param {string} xKillbillCreatedBy
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createAccountCustomFields(body: Array<CustomField>, accountId: string, xKillbillCreatedBy: string, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CustomField>>>;
    /**
     *
     * @summary Add tags to account
     * @param {Array<string>} body
     * @param {string} accountId
     * @param {string} xKillbillCreatedBy
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createAccountTags(body: Array<string>, accountId: string, xKillbillCreatedBy: string, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Tag>>>;
    /**
     *
     * @summary Add a payment method
     * @param {PaymentMethod} body
     * @param {string} accountId
     * @param {string} xKillbillCreatedBy
     * @param {boolean} [isDefault]
     * @param {boolean} [payAllUnpaidInvoices]
     * @param {Array<string>} [controlPluginName]
     * @param {Array<string>} [pluginProperty]
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createPaymentMethod(body: PaymentMethod, accountId: string, xKillbillCreatedBy: string, isDefault?: boolean, payAllUnpaidInvoices?: boolean, controlPluginName?: Array<string>, pluginProperty?: Array<string>, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaymentMethod>>;
    /**
     *
     * @summary Remove custom fields from account
     * @param {string} accountId
     * @param {string} xKillbillCreatedBy
     * @param {Array<string>} [customField]
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteAccountCustomFields(accountId: string, xKillbillCreatedBy: string, customField?: Array<string>, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary Remove tags from account
     * @param {string} accountId
     * @param {string} xKillbillCreatedBy
     * @param {Array<string>} [tagDef]
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteAccountTags(accountId: string, xKillbillCreatedBy: string, tagDef?: Array<string>, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary Retrieve an account by id
     * @param {string} accountId
     * @param {boolean} [accountWithBalance]
     * @param {boolean} [accountWithBalanceAndCBA]
     * @param {'FULL' | 'MINIMAL' | 'NONE'} [audit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAccount(accountId: string, accountWithBalance?: boolean, accountWithBalanceAndCBA?: boolean, audit?: 'FULL' | 'MINIMAL' | 'NONE', options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Account>>;
    /**
     *
     * @summary Retrieve audit logs by account id
     * @param {string} accountId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAccountAuditLogs(accountId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<AuditLog>>>;
    /**
     *
     * @summary Retrieve account audit logs with history by account id
     * @param {string} accountId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAccountAuditLogsWithHistory(accountId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<AuditLog>>>;
    /**
     *
     * @summary Retrieve bundles for account
     * @param {string} accountId
     * @param {string} [externalKey]
     * @param {string} [bundlesFilter]
     * @param {'FULL' | 'MINIMAL' | 'NONE'} [audit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAccountBundles(accountId: string, externalKey?: string, bundlesFilter?: string, audit?: 'FULL' | 'MINIMAL' | 'NONE', options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Bundle>>>;
    /**
     *
     * @summary Retrieve paginated bundles for account
     * @param {string} accountId
     * @param {number} [offset]
     * @param {number} [limit]
     * @param {'FULL' | 'MINIMAL' | 'NONE'} [audit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAccountBundlesPaginated(accountId: string, offset?: number, limit?: number, audit?: 'FULL' | 'MINIMAL' | 'NONE', options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Bundle>>>;
    /**
     *
     * @summary Retrieve an account by external key
     * @param {string} externalKey
     * @param {boolean} [accountWithBalance]
     * @param {boolean} [accountWithBalanceAndCBA]
     * @param {'FULL' | 'MINIMAL' | 'NONE'} [audit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAccountByKey(externalKey: string, accountWithBalance?: boolean, accountWithBalanceAndCBA?: boolean, audit?: 'FULL' | 'MINIMAL' | 'NONE', options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Account>>;
    /**
     *
     * @summary Retrieve account custom fields
     * @param {string} accountId
     * @param {'FULL' | 'MINIMAL' | 'NONE'} [audit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAccountCustomFields(accountId: string, audit?: 'FULL' | 'MINIMAL' | 'NONE', options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CustomField>>>;
    /**
     *
     * @summary Retrieve account email audit logs with history by id
     * @param {string} accountId
     * @param {string} accountEmailId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAccountEmailAuditLogsWithHistory(accountId: string, accountEmailId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<AuditLog>>>;
    /**
     *
     * @summary Retrieve account tags
     * @param {string} accountId
     * @param {boolean} [includedDeleted]
     * @param {'FULL' | 'MINIMAL' | 'NONE'} [audit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAccountTags(accountId: string, includedDeleted?: boolean, audit?: 'FULL' | 'MINIMAL' | 'NONE', options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Tag>>>;
    /**
     *
     * @summary Retrieve account timeline
     * @param {string} accountId
     * @param {boolean} [parallel]
     * @param {'FULL' | 'MINIMAL' | 'NONE'} [audit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAccountTimeline(accountId: string, parallel?: boolean, audit?: 'FULL' | 'MINIMAL' | 'NONE', options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AccountTimeline>>;
    /**
     *
     * @summary List accounts
     * @param {number} [offset]
     * @param {number} [limit]
     * @param {boolean} [accountWithBalance]
     * @param {boolean} [accountWithBalanceAndCBA]
     * @param {'FULL' | 'MINIMAL' | 'NONE'} [audit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAccounts(offset?: number, limit?: number, accountWithBalance?: boolean, accountWithBalanceAndCBA?: boolean, audit?: 'FULL' | 'MINIMAL' | 'NONE', options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Account>>>;
    /**
     *
     * @summary Retrieve account customFields
     * @param {string} accountId
     * @param {'ACCOUNT' | 'ACCOUNT_EMAIL' | 'BLOCKING_STATES' | 'BUNDLE' | 'CUSTOM_FIELD' | 'INVOICE' | 'PAYMENT' | 'TRANSACTION' | 'INVOICE_ITEM' | 'INVOICE_PAYMENT' | 'SUBSCRIPTION' | 'SUBSCRIPTION_EVENT' | 'SERVICE_BROADCAST' | 'PAYMENT_ATTEMPT' | 'PAYMENT_METHOD' | 'TAG' | 'TAG_DEFINITION' | 'TENANT' | 'TENANT_KVS'} [objectType]
     * @param {'FULL' | 'MINIMAL' | 'NONE'} [audit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllCustomFields(accountId: string, objectType?: 'ACCOUNT' | 'ACCOUNT_EMAIL' | 'BLOCKING_STATES' | 'BUNDLE' | 'CUSTOM_FIELD' | 'INVOICE' | 'PAYMENT' | 'TRANSACTION' | 'INVOICE_ITEM' | 'INVOICE_PAYMENT' | 'SUBSCRIPTION' | 'SUBSCRIPTION_EVENT' | 'SERVICE_BROADCAST' | 'PAYMENT_ATTEMPT' | 'PAYMENT_METHOD' | 'TAG' | 'TAG_DEFINITION' | 'TENANT' | 'TENANT_KVS', audit?: 'FULL' | 'MINIMAL' | 'NONE', options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CustomField>>>;
    /**
     *
     * @summary Retrieve account tags
     * @param {string} accountId
     * @param {'ACCOUNT' | 'ACCOUNT_EMAIL' | 'BLOCKING_STATES' | 'BUNDLE' | 'CUSTOM_FIELD' | 'INVOICE' | 'PAYMENT' | 'TRANSACTION' | 'INVOICE_ITEM' | 'INVOICE_PAYMENT' | 'SUBSCRIPTION' | 'SUBSCRIPTION_EVENT' | 'SERVICE_BROADCAST' | 'PAYMENT_ATTEMPT' | 'PAYMENT_METHOD' | 'TAG' | 'TAG_DEFINITION' | 'TENANT' | 'TENANT_KVS'} [objectType]
     * @param {boolean} [includedDeleted]
     * @param {'FULL' | 'MINIMAL' | 'NONE'} [audit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllTags(accountId: string, objectType?: 'ACCOUNT' | 'ACCOUNT_EMAIL' | 'BLOCKING_STATES' | 'BUNDLE' | 'CUSTOM_FIELD' | 'INVOICE' | 'PAYMENT' | 'TRANSACTION' | 'INVOICE_ITEM' | 'INVOICE_PAYMENT' | 'SUBSCRIPTION' | 'SUBSCRIPTION_EVENT' | 'SERVICE_BROADCAST' | 'PAYMENT_ATTEMPT' | 'PAYMENT_METHOD' | 'TAG' | 'TAG_DEFINITION' | 'TENANT' | 'TENANT_KVS', includedDeleted?: boolean, audit?: 'FULL' | 'MINIMAL' | 'NONE', options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Tag>>>;
    /**
     *
     * @summary Retrieve blocking state audit logs with history by id
     * @param {string} blockingId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBlockingStateAuditLogsWithHistory(blockingId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<AuditLog>>>;
    /**
     *
     * @summary Retrieve blocking states for account
     * @param {string} accountId
     * @param {Array<'SUBSCRIPTION' | 'SUBSCRIPTION_BUNDLE' | 'ACCOUNT'>} [blockingStateTypes]
     * @param {Array<string>} [blockingStateSvcs]
     * @param {'FULL' | 'MINIMAL' | 'NONE'} [audit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBlockingStates(accountId: string, blockingStateTypes?: Array<'SUBSCRIPTION' | 'SUBSCRIPTION_BUNDLE' | 'ACCOUNT'>, blockingStateSvcs?: Array<string>, audit?: 'FULL' | 'MINIMAL' | 'NONE', options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<BlockingState>>>;
    /**
     *
     * @summary List children accounts
     * @param {string} accountId
     * @param {boolean} [accountWithBalance]
     * @param {boolean} [accountWithBalanceAndCBA]
     * @param {'FULL' | 'MINIMAL' | 'NONE'} [audit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getChildrenAccounts(accountId: string, accountWithBalance?: boolean, accountWithBalanceAndCBA?: boolean, audit?: 'FULL' | 'MINIMAL' | 'NONE', options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Account>>>;
    /**
     *
     * @summary Retrieve an account emails
     * @param {string} accountId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEmails(accountId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<AccountEmail>>>;
    /**
     *
     * @summary Retrieve account invoice payments
     * @param {string} accountId
     * @param {boolean} [withPluginInfo]
     * @param {boolean} [withAttempts]
     * @param {Array<string>} [pluginProperty]
     * @param {'FULL' | 'MINIMAL' | 'NONE'} [audit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getInvoicePayments(accountId: string, withPluginInfo?: boolean, withAttempts?: boolean, pluginProperty?: Array<string>, audit?: 'FULL' | 'MINIMAL' | 'NONE', options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<InvoicePayment>>>;
    /**
     *
     * @summary Retrieve account invoices
     * @param {string} accountId
     * @param {string} [startDate]
     * @param {string} [endDate]
     * @param {boolean} [withMigrationInvoices]
     * @param {boolean} [unpaidInvoicesOnly]
     * @param {boolean} [includeVoidedInvoices]
     * @param {boolean} [includeInvoiceComponents]
     * @param {string} [invoicesFilter]
     * @param {'FULL' | 'MINIMAL' | 'NONE'} [audit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getInvoicesForAccount(accountId: string, startDate?: string, endDate?: string, withMigrationInvoices?: boolean, unpaidInvoicesOnly?: boolean, includeVoidedInvoices?: boolean, includeInvoiceComponents?: boolean, invoicesFilter?: string, audit?: 'FULL' | 'MINIMAL' | 'NONE', options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Invoice>>>;
    /**
     *
     * @summary Retrieve paginated invoices for account
     * @param {string} accountId
     * @param {number} [offset]
     * @param {number} [limit]
     * @param {'FULL' | 'MINIMAL' | 'NONE'} [audit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getInvoicesForAccountPaginated(accountId: string, offset?: number, limit?: number, audit?: 'FULL' | 'MINIMAL' | 'NONE', options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Invoice>>>;
    /**
     *
     * @summary Retrieve overdue state for account
     * @param {string} accountId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOverdueAccount(accountId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OverdueState>>;
    /**
     *
     * @summary Retrieve account payment methods
     * @param {string} accountId
     * @param {boolean} [withPluginInfo]
     * @param {boolean} [includedDeleted]
     * @param {Array<string>} [pluginProperty]
     * @param {'FULL' | 'MINIMAL' | 'NONE'} [audit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPaymentMethodsForAccount(accountId: string, withPluginInfo?: boolean, includedDeleted?: boolean, pluginProperty?: Array<string>, audit?: 'FULL' | 'MINIMAL' | 'NONE', options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<PaymentMethod>>>;
    /**
     *
     * @summary Retrieve account payments
     * @param {string} accountId
     * @param {boolean} [withAttempts]
     * @param {boolean} [withPluginInfo]
     * @param {Array<string>} [pluginProperty]
     * @param {'FULL' | 'MINIMAL' | 'NONE'} [audit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPaymentsForAccount(accountId: string, withAttempts?: boolean, withPluginInfo?: boolean, pluginProperty?: Array<string>, audit?: 'FULL' | 'MINIMAL' | 'NONE', options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Payment>>>;
    /**
     *
     * @summary Modify custom fields to account
     * @param {Array<CustomField>} body
     * @param {string} accountId
     * @param {string} xKillbillCreatedBy
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    modifyAccountCustomFields(body: Array<CustomField>, accountId: string, xKillbillCreatedBy: string, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary Trigger a payment for all unpaid invoices
     * @param {string} accountId
     * @param {string} xKillbillCreatedBy
     * @param {string} [paymentMethodId]
     * @param {boolean} [externalPayment]
     * @param {number} [paymentAmount]
     * @param {string} [targetDate]
     * @param {Array<string>} [pluginProperty]
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    payAllInvoices(accountId: string, xKillbillCreatedBy: string, paymentMethodId?: string, externalPayment?: boolean, paymentAmount?: number, targetDate?: string, pluginProperty?: Array<string>, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Invoice>>>;
    /**
     *
     * @summary Trigger a payment (authorization, purchase or credit)
     * @param {PaymentTransaction} body
     * @param {string} accountId
     * @param {string} xKillbillCreatedBy
     * @param {string} [paymentMethodId]
     * @param {Array<string>} [controlPluginName]
     * @param {Array<string>} [pluginProperty]
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    processPayment(body: PaymentTransaction, accountId: string, xKillbillCreatedBy: string, paymentMethodId?: string, controlPluginName?: Array<string>, pluginProperty?: Array<string>, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Payment>>;
    /**
     *
     * @summary Trigger a payment using the account external key (authorization, purchase or credit)
     * @param {PaymentTransaction} body
     * @param {string} externalKey
     * @param {string} xKillbillCreatedBy
     * @param {string} [paymentMethodId]
     * @param {Array<string>} [controlPluginName]
     * @param {Array<string>} [pluginProperty]
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    processPaymentByExternalKey(body: PaymentTransaction, externalKey: string, xKillbillCreatedBy: string, paymentMethodId?: string, controlPluginName?: Array<string>, pluginProperty?: Array<string>, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Payment>>;
    /**
     *
     * @summary Rebalance account CBA
     * @param {string} accountId
     * @param {string} xKillbillCreatedBy
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    rebalanceExistingCBAOnAccount(accountId: string, xKillbillCreatedBy: string, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary Refresh account payment methods
     * @param {string} accountId
     * @param {string} xKillbillCreatedBy
     * @param {string} [pluginName]
     * @param {Array<string>} [pluginProperty]
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    refreshPaymentMethods(accountId: string, xKillbillCreatedBy: string, pluginName?: string, pluginProperty?: Array<string>, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary Delete email from account
     * @param {string} accountId
     * @param {string} email
     * @param {string} xKillbillCreatedBy
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeEmail(accountId: string, email: string, xKillbillCreatedBy: string, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary Search accounts
     * @param {string} searchKey
     * @param {number} [offset]
     * @param {number} [limit]
     * @param {boolean} [accountWithBalance]
     * @param {boolean} [accountWithBalanceAndCBA]
     * @param {'FULL' | 'MINIMAL' | 'NONE'} [audit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchAccounts(searchKey: string, offset?: number, limit?: number, accountWithBalance?: boolean, accountWithBalanceAndCBA?: boolean, audit?: 'FULL' | 'MINIMAL' | 'NONE', options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Account>>>;
    /**
     *
     * @summary Set the default payment method
     * @param {string} accountId
     * @param {string} paymentMethodId
     * @param {string} xKillbillCreatedBy
     * @param {boolean} [payAllUnpaidInvoices]
     * @param {Array<string>} [pluginProperty]
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setDefaultPaymentMethod(accountId: string, paymentMethodId: string, xKillbillCreatedBy: string, payAllUnpaidInvoices?: boolean, pluginProperty?: Array<string>, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary Move a given child credit to the parent level
     * @param {string} childAccountId
     * @param {string} xKillbillCreatedBy
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    transferChildCreditToParent(childAccountId: string, xKillbillCreatedBy: string, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary Update account
     * @param {Account} body
     * @param {string} accountId
     * @param {string} xKillbillCreatedBy
     * @param {boolean} [treatNullAsReset]
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateAccount(body: Account, accountId: string, xKillbillCreatedBy: string, treatNullAsReset?: boolean, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
};
/**
 * AccountApi - factory interface
 * @export
 */
export declare const AccountApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Block an account
     * @param {BlockingState} body
     * @param {string} accountId
     * @param {string} xKillbillCreatedBy
     * @param {string} [requestedDate]
     * @param {Array<string>} [pluginProperty]
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addAccountBlockingState(body: BlockingState, accountId: string, xKillbillCreatedBy: string, requestedDate?: string, pluginProperty?: Array<string>, xKillbillReason?: string, xKillbillComment?: string, options?: any): AxiosPromise<Array<BlockingState>>;
    /**
     *
     * @summary Add account email
     * @param {AccountEmail} body
     * @param {string} accountId
     * @param {string} xKillbillCreatedBy
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addEmail(body: AccountEmail, accountId: string, xKillbillCreatedBy: string, xKillbillReason?: string, xKillbillComment?: string, options?: any): AxiosPromise<Array<AccountEmail>>;
    /**
     *
     * @summary Close account
     * @param {string} accountId
     * @param {string} xKillbillCreatedBy
     * @param {boolean} [cancelAllSubscriptions]
     * @param {boolean} [writeOffUnpaidInvoices]
     * @param {boolean} [itemAdjustUnpaidInvoices]
     * @param {boolean} [removeFutureNotifications]
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    closeAccount(accountId: string, xKillbillCreatedBy: string, cancelAllSubscriptions?: boolean, writeOffUnpaidInvoices?: boolean, itemAdjustUnpaidInvoices?: boolean, removeFutureNotifications?: boolean, xKillbillReason?: string, xKillbillComment?: string, options?: any): AxiosPromise<void>;
    /**
     *
     * @summary Create account
     * @param {Account} body
     * @param {string} xKillbillCreatedBy
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createAccount(body: Account, xKillbillCreatedBy: string, xKillbillReason?: string, xKillbillComment?: string, options?: any): AxiosPromise<Account>;
    /**
     *
     * @summary Add custom fields to account
     * @param {Array<CustomField>} body
     * @param {string} accountId
     * @param {string} xKillbillCreatedBy
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createAccountCustomFields(body: Array<CustomField>, accountId: string, xKillbillCreatedBy: string, xKillbillReason?: string, xKillbillComment?: string, options?: any): AxiosPromise<Array<CustomField>>;
    /**
     *
     * @summary Add tags to account
     * @param {Array<string>} body
     * @param {string} accountId
     * @param {string} xKillbillCreatedBy
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createAccountTags(body: Array<string>, accountId: string, xKillbillCreatedBy: string, xKillbillReason?: string, xKillbillComment?: string, options?: any): AxiosPromise<Array<Tag>>;
    /**
     *
     * @summary Add a payment method
     * @param {PaymentMethod} body
     * @param {string} accountId
     * @param {string} xKillbillCreatedBy
     * @param {boolean} [isDefault]
     * @param {boolean} [payAllUnpaidInvoices]
     * @param {Array<string>} [controlPluginName]
     * @param {Array<string>} [pluginProperty]
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createPaymentMethod(body: PaymentMethod, accountId: string, xKillbillCreatedBy: string, isDefault?: boolean, payAllUnpaidInvoices?: boolean, controlPluginName?: Array<string>, pluginProperty?: Array<string>, xKillbillReason?: string, xKillbillComment?: string, options?: any): AxiosPromise<PaymentMethod>;
    /**
     *
     * @summary Remove custom fields from account
     * @param {string} accountId
     * @param {string} xKillbillCreatedBy
     * @param {Array<string>} [customField]
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteAccountCustomFields(accountId: string, xKillbillCreatedBy: string, customField?: Array<string>, xKillbillReason?: string, xKillbillComment?: string, options?: any): AxiosPromise<void>;
    /**
     *
     * @summary Remove tags from account
     * @param {string} accountId
     * @param {string} xKillbillCreatedBy
     * @param {Array<string>} [tagDef]
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteAccountTags(accountId: string, xKillbillCreatedBy: string, tagDef?: Array<string>, xKillbillReason?: string, xKillbillComment?: string, options?: any): AxiosPromise<void>;
    /**
     *
     * @summary Retrieve an account by id
     * @param {string} accountId
     * @param {boolean} [accountWithBalance]
     * @param {boolean} [accountWithBalanceAndCBA]
     * @param {'FULL' | 'MINIMAL' | 'NONE'} [audit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAccount(accountId: string, accountWithBalance?: boolean, accountWithBalanceAndCBA?: boolean, audit?: 'FULL' | 'MINIMAL' | 'NONE', options?: any): AxiosPromise<Account>;
    /**
     *
     * @summary Retrieve audit logs by account id
     * @param {string} accountId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAccountAuditLogs(accountId: string, options?: any): AxiosPromise<Array<AuditLog>>;
    /**
     *
     * @summary Retrieve account audit logs with history by account id
     * @param {string} accountId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAccountAuditLogsWithHistory(accountId: string, options?: any): AxiosPromise<Array<AuditLog>>;
    /**
     *
     * @summary Retrieve bundles for account
     * @param {string} accountId
     * @param {string} [externalKey]
     * @param {string} [bundlesFilter]
     * @param {'FULL' | 'MINIMAL' | 'NONE'} [audit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAccountBundles(accountId: string, externalKey?: string, bundlesFilter?: string, audit?: 'FULL' | 'MINIMAL' | 'NONE', options?: any): AxiosPromise<Array<Bundle>>;
    /**
     *
     * @summary Retrieve paginated bundles for account
     * @param {string} accountId
     * @param {number} [offset]
     * @param {number} [limit]
     * @param {'FULL' | 'MINIMAL' | 'NONE'} [audit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAccountBundlesPaginated(accountId: string, offset?: number, limit?: number, audit?: 'FULL' | 'MINIMAL' | 'NONE', options?: any): AxiosPromise<Array<Bundle>>;
    /**
     *
     * @summary Retrieve an account by external key
     * @param {string} externalKey
     * @param {boolean} [accountWithBalance]
     * @param {boolean} [accountWithBalanceAndCBA]
     * @param {'FULL' | 'MINIMAL' | 'NONE'} [audit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAccountByKey(externalKey: string, accountWithBalance?: boolean, accountWithBalanceAndCBA?: boolean, audit?: 'FULL' | 'MINIMAL' | 'NONE', options?: any): AxiosPromise<Account>;
    /**
     *
     * @summary Retrieve account custom fields
     * @param {string} accountId
     * @param {'FULL' | 'MINIMAL' | 'NONE'} [audit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAccountCustomFields(accountId: string, audit?: 'FULL' | 'MINIMAL' | 'NONE', options?: any): AxiosPromise<Array<CustomField>>;
    /**
     *
     * @summary Retrieve account email audit logs with history by id
     * @param {string} accountId
     * @param {string} accountEmailId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAccountEmailAuditLogsWithHistory(accountId: string, accountEmailId: string, options?: any): AxiosPromise<Array<AuditLog>>;
    /**
     *
     * @summary Retrieve account tags
     * @param {string} accountId
     * @param {boolean} [includedDeleted]
     * @param {'FULL' | 'MINIMAL' | 'NONE'} [audit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAccountTags(accountId: string, includedDeleted?: boolean, audit?: 'FULL' | 'MINIMAL' | 'NONE', options?: any): AxiosPromise<Array<Tag>>;
    /**
     *
     * @summary Retrieve account timeline
     * @param {string} accountId
     * @param {boolean} [parallel]
     * @param {'FULL' | 'MINIMAL' | 'NONE'} [audit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAccountTimeline(accountId: string, parallel?: boolean, audit?: 'FULL' | 'MINIMAL' | 'NONE', options?: any): AxiosPromise<AccountTimeline>;
    /**
     *
     * @summary List accounts
     * @param {number} [offset]
     * @param {number} [limit]
     * @param {boolean} [accountWithBalance]
     * @param {boolean} [accountWithBalanceAndCBA]
     * @param {'FULL' | 'MINIMAL' | 'NONE'} [audit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAccounts(offset?: number, limit?: number, accountWithBalance?: boolean, accountWithBalanceAndCBA?: boolean, audit?: 'FULL' | 'MINIMAL' | 'NONE', options?: any): AxiosPromise<Array<Account>>;
    /**
     *
     * @summary Retrieve account customFields
     * @param {string} accountId
     * @param {'ACCOUNT' | 'ACCOUNT_EMAIL' | 'BLOCKING_STATES' | 'BUNDLE' | 'CUSTOM_FIELD' | 'INVOICE' | 'PAYMENT' | 'TRANSACTION' | 'INVOICE_ITEM' | 'INVOICE_PAYMENT' | 'SUBSCRIPTION' | 'SUBSCRIPTION_EVENT' | 'SERVICE_BROADCAST' | 'PAYMENT_ATTEMPT' | 'PAYMENT_METHOD' | 'TAG' | 'TAG_DEFINITION' | 'TENANT' | 'TENANT_KVS'} [objectType]
     * @param {'FULL' | 'MINIMAL' | 'NONE'} [audit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllCustomFields(accountId: string, objectType?: 'ACCOUNT' | 'ACCOUNT_EMAIL' | 'BLOCKING_STATES' | 'BUNDLE' | 'CUSTOM_FIELD' | 'INVOICE' | 'PAYMENT' | 'TRANSACTION' | 'INVOICE_ITEM' | 'INVOICE_PAYMENT' | 'SUBSCRIPTION' | 'SUBSCRIPTION_EVENT' | 'SERVICE_BROADCAST' | 'PAYMENT_ATTEMPT' | 'PAYMENT_METHOD' | 'TAG' | 'TAG_DEFINITION' | 'TENANT' | 'TENANT_KVS', audit?: 'FULL' | 'MINIMAL' | 'NONE', options?: any): AxiosPromise<Array<CustomField>>;
    /**
     *
     * @summary Retrieve account tags
     * @param {string} accountId
     * @param {'ACCOUNT' | 'ACCOUNT_EMAIL' | 'BLOCKING_STATES' | 'BUNDLE' | 'CUSTOM_FIELD' | 'INVOICE' | 'PAYMENT' | 'TRANSACTION' | 'INVOICE_ITEM' | 'INVOICE_PAYMENT' | 'SUBSCRIPTION' | 'SUBSCRIPTION_EVENT' | 'SERVICE_BROADCAST' | 'PAYMENT_ATTEMPT' | 'PAYMENT_METHOD' | 'TAG' | 'TAG_DEFINITION' | 'TENANT' | 'TENANT_KVS'} [objectType]
     * @param {boolean} [includedDeleted]
     * @param {'FULL' | 'MINIMAL' | 'NONE'} [audit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllTags(accountId: string, objectType?: 'ACCOUNT' | 'ACCOUNT_EMAIL' | 'BLOCKING_STATES' | 'BUNDLE' | 'CUSTOM_FIELD' | 'INVOICE' | 'PAYMENT' | 'TRANSACTION' | 'INVOICE_ITEM' | 'INVOICE_PAYMENT' | 'SUBSCRIPTION' | 'SUBSCRIPTION_EVENT' | 'SERVICE_BROADCAST' | 'PAYMENT_ATTEMPT' | 'PAYMENT_METHOD' | 'TAG' | 'TAG_DEFINITION' | 'TENANT' | 'TENANT_KVS', includedDeleted?: boolean, audit?: 'FULL' | 'MINIMAL' | 'NONE', options?: any): AxiosPromise<Array<Tag>>;
    /**
     *
     * @summary Retrieve blocking state audit logs with history by id
     * @param {string} blockingId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBlockingStateAuditLogsWithHistory(blockingId: string, options?: any): AxiosPromise<Array<AuditLog>>;
    /**
     *
     * @summary Retrieve blocking states for account
     * @param {string} accountId
     * @param {Array<'SUBSCRIPTION' | 'SUBSCRIPTION_BUNDLE' | 'ACCOUNT'>} [blockingStateTypes]
     * @param {Array<string>} [blockingStateSvcs]
     * @param {'FULL' | 'MINIMAL' | 'NONE'} [audit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBlockingStates(accountId: string, blockingStateTypes?: Array<'SUBSCRIPTION' | 'SUBSCRIPTION_BUNDLE' | 'ACCOUNT'>, blockingStateSvcs?: Array<string>, audit?: 'FULL' | 'MINIMAL' | 'NONE', options?: any): AxiosPromise<Array<BlockingState>>;
    /**
     *
     * @summary List children accounts
     * @param {string} accountId
     * @param {boolean} [accountWithBalance]
     * @param {boolean} [accountWithBalanceAndCBA]
     * @param {'FULL' | 'MINIMAL' | 'NONE'} [audit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getChildrenAccounts(accountId: string, accountWithBalance?: boolean, accountWithBalanceAndCBA?: boolean, audit?: 'FULL' | 'MINIMAL' | 'NONE', options?: any): AxiosPromise<Array<Account>>;
    /**
     *
     * @summary Retrieve an account emails
     * @param {string} accountId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getEmails(accountId: string, options?: any): AxiosPromise<Array<AccountEmail>>;
    /**
     *
     * @summary Retrieve account invoice payments
     * @param {string} accountId
     * @param {boolean} [withPluginInfo]
     * @param {boolean} [withAttempts]
     * @param {Array<string>} [pluginProperty]
     * @param {'FULL' | 'MINIMAL' | 'NONE'} [audit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getInvoicePayments(accountId: string, withPluginInfo?: boolean, withAttempts?: boolean, pluginProperty?: Array<string>, audit?: 'FULL' | 'MINIMAL' | 'NONE', options?: any): AxiosPromise<Array<InvoicePayment>>;
    /**
     *
     * @summary Retrieve account invoices
     * @param {string} accountId
     * @param {string} [startDate]
     * @param {string} [endDate]
     * @param {boolean} [withMigrationInvoices]
     * @param {boolean} [unpaidInvoicesOnly]
     * @param {boolean} [includeVoidedInvoices]
     * @param {boolean} [includeInvoiceComponents]
     * @param {string} [invoicesFilter]
     * @param {'FULL' | 'MINIMAL' | 'NONE'} [audit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getInvoicesForAccount(accountId: string, startDate?: string, endDate?: string, withMigrationInvoices?: boolean, unpaidInvoicesOnly?: boolean, includeVoidedInvoices?: boolean, includeInvoiceComponents?: boolean, invoicesFilter?: string, audit?: 'FULL' | 'MINIMAL' | 'NONE', options?: any): AxiosPromise<Array<Invoice>>;
    /**
     *
     * @summary Retrieve paginated invoices for account
     * @param {string} accountId
     * @param {number} [offset]
     * @param {number} [limit]
     * @param {'FULL' | 'MINIMAL' | 'NONE'} [audit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getInvoicesForAccountPaginated(accountId: string, offset?: number, limit?: number, audit?: 'FULL' | 'MINIMAL' | 'NONE', options?: any): AxiosPromise<Array<Invoice>>;
    /**
     *
     * @summary Retrieve overdue state for account
     * @param {string} accountId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOverdueAccount(accountId: string, options?: any): AxiosPromise<OverdueState>;
    /**
     *
     * @summary Retrieve account payment methods
     * @param {string} accountId
     * @param {boolean} [withPluginInfo]
     * @param {boolean} [includedDeleted]
     * @param {Array<string>} [pluginProperty]
     * @param {'FULL' | 'MINIMAL' | 'NONE'} [audit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPaymentMethodsForAccount(accountId: string, withPluginInfo?: boolean, includedDeleted?: boolean, pluginProperty?: Array<string>, audit?: 'FULL' | 'MINIMAL' | 'NONE', options?: any): AxiosPromise<Array<PaymentMethod>>;
    /**
     *
     * @summary Retrieve account payments
     * @param {string} accountId
     * @param {boolean} [withAttempts]
     * @param {boolean} [withPluginInfo]
     * @param {Array<string>} [pluginProperty]
     * @param {'FULL' | 'MINIMAL' | 'NONE'} [audit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPaymentsForAccount(accountId: string, withAttempts?: boolean, withPluginInfo?: boolean, pluginProperty?: Array<string>, audit?: 'FULL' | 'MINIMAL' | 'NONE', options?: any): AxiosPromise<Array<Payment>>;
    /**
     *
     * @summary Modify custom fields to account
     * @param {Array<CustomField>} body
     * @param {string} accountId
     * @param {string} xKillbillCreatedBy
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    modifyAccountCustomFields(body: Array<CustomField>, accountId: string, xKillbillCreatedBy: string, xKillbillReason?: string, xKillbillComment?: string, options?: any): AxiosPromise<void>;
    /**
     *
     * @summary Trigger a payment for all unpaid invoices
     * @param {string} accountId
     * @param {string} xKillbillCreatedBy
     * @param {string} [paymentMethodId]
     * @param {boolean} [externalPayment]
     * @param {number} [paymentAmount]
     * @param {string} [targetDate]
     * @param {Array<string>} [pluginProperty]
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    payAllInvoices(accountId: string, xKillbillCreatedBy: string, paymentMethodId?: string, externalPayment?: boolean, paymentAmount?: number, targetDate?: string, pluginProperty?: Array<string>, xKillbillReason?: string, xKillbillComment?: string, options?: any): AxiosPromise<Array<Invoice>>;
    /**
     *
     * @summary Trigger a payment (authorization, purchase or credit)
     * @param {PaymentTransaction} body
     * @param {string} accountId
     * @param {string} xKillbillCreatedBy
     * @param {string} [paymentMethodId]
     * @param {Array<string>} [controlPluginName]
     * @param {Array<string>} [pluginProperty]
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    processPayment(body: PaymentTransaction, accountId: string, xKillbillCreatedBy: string, paymentMethodId?: string, controlPluginName?: Array<string>, pluginProperty?: Array<string>, xKillbillReason?: string, xKillbillComment?: string, options?: any): AxiosPromise<Payment>;
    /**
     *
     * @summary Trigger a payment using the account external key (authorization, purchase or credit)
     * @param {PaymentTransaction} body
     * @param {string} externalKey
     * @param {string} xKillbillCreatedBy
     * @param {string} [paymentMethodId]
     * @param {Array<string>} [controlPluginName]
     * @param {Array<string>} [pluginProperty]
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    processPaymentByExternalKey(body: PaymentTransaction, externalKey: string, xKillbillCreatedBy: string, paymentMethodId?: string, controlPluginName?: Array<string>, pluginProperty?: Array<string>, xKillbillReason?: string, xKillbillComment?: string, options?: any): AxiosPromise<Payment>;
    /**
     *
     * @summary Rebalance account CBA
     * @param {string} accountId
     * @param {string} xKillbillCreatedBy
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    rebalanceExistingCBAOnAccount(accountId: string, xKillbillCreatedBy: string, xKillbillReason?: string, xKillbillComment?: string, options?: any): AxiosPromise<void>;
    /**
     *
     * @summary Refresh account payment methods
     * @param {string} accountId
     * @param {string} xKillbillCreatedBy
     * @param {string} [pluginName]
     * @param {Array<string>} [pluginProperty]
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    refreshPaymentMethods(accountId: string, xKillbillCreatedBy: string, pluginName?: string, pluginProperty?: Array<string>, xKillbillReason?: string, xKillbillComment?: string, options?: any): AxiosPromise<void>;
    /**
     *
     * @summary Delete email from account
     * @param {string} accountId
     * @param {string} email
     * @param {string} xKillbillCreatedBy
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    removeEmail(accountId: string, email: string, xKillbillCreatedBy: string, xKillbillReason?: string, xKillbillComment?: string, options?: any): AxiosPromise<void>;
    /**
     *
     * @summary Search accounts
     * @param {string} searchKey
     * @param {number} [offset]
     * @param {number} [limit]
     * @param {boolean} [accountWithBalance]
     * @param {boolean} [accountWithBalanceAndCBA]
     * @param {'FULL' | 'MINIMAL' | 'NONE'} [audit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchAccounts(searchKey: string, offset?: number, limit?: number, accountWithBalance?: boolean, accountWithBalanceAndCBA?: boolean, audit?: 'FULL' | 'MINIMAL' | 'NONE', options?: any): AxiosPromise<Array<Account>>;
    /**
     *
     * @summary Set the default payment method
     * @param {string} accountId
     * @param {string} paymentMethodId
     * @param {string} xKillbillCreatedBy
     * @param {boolean} [payAllUnpaidInvoices]
     * @param {Array<string>} [pluginProperty]
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    setDefaultPaymentMethod(accountId: string, paymentMethodId: string, xKillbillCreatedBy: string, payAllUnpaidInvoices?: boolean, pluginProperty?: Array<string>, xKillbillReason?: string, xKillbillComment?: string, options?: any): AxiosPromise<void>;
    /**
     *
     * @summary Move a given child credit to the parent level
     * @param {string} childAccountId
     * @param {string} xKillbillCreatedBy
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    transferChildCreditToParent(childAccountId: string, xKillbillCreatedBy: string, xKillbillReason?: string, xKillbillComment?: string, options?: any): AxiosPromise<void>;
    /**
     *
     * @summary Update account
     * @param {Account} body
     * @param {string} accountId
     * @param {string} xKillbillCreatedBy
     * @param {boolean} [treatNullAsReset]
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateAccount(body: Account, accountId: string, xKillbillCreatedBy: string, treatNullAsReset?: boolean, xKillbillReason?: string, xKillbillComment?: string, options?: any): AxiosPromise<void>;
};
/**
 * AccountApi - object-oriented interface
 * @export
 * @class AccountApi
 * @extends {BaseAPI}
 */
export declare class AccountApi extends BaseAPI {
    /**
     *
     * @summary Block an account
     * @param {BlockingState} body
     * @param {string} accountId
     * @param {string} xKillbillCreatedBy
     * @param {string} [requestedDate]
     * @param {Array<string>} [pluginProperty]
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    addAccountBlockingState(body: BlockingState, accountId: string, xKillbillCreatedBy: string, requestedDate?: string, pluginProperty?: Array<string>, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<BlockingState[], any>>;
    /**
     *
     * @summary Add account email
     * @param {AccountEmail} body
     * @param {string} accountId
     * @param {string} xKillbillCreatedBy
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    addEmail(body: AccountEmail, accountId: string, xKillbillCreatedBy: string, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<AccountEmail[], any>>;
    /**
     *
     * @summary Close account
     * @param {string} accountId
     * @param {string} xKillbillCreatedBy
     * @param {boolean} [cancelAllSubscriptions]
     * @param {boolean} [writeOffUnpaidInvoices]
     * @param {boolean} [itemAdjustUnpaidInvoices]
     * @param {boolean} [removeFutureNotifications]
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    closeAccount(accountId: string, xKillbillCreatedBy: string, cancelAllSubscriptions?: boolean, writeOffUnpaidInvoices?: boolean, itemAdjustUnpaidInvoices?: boolean, removeFutureNotifications?: boolean, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     *
     * @summary Create account
     * @param {Account} body
     * @param {string} xKillbillCreatedBy
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    createAccount(body: Account, xKillbillCreatedBy: string, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Account, any>>;
    /**
     *
     * @summary Add custom fields to account
     * @param {Array<CustomField>} body
     * @param {string} accountId
     * @param {string} xKillbillCreatedBy
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    createAccountCustomFields(body: Array<CustomField>, accountId: string, xKillbillCreatedBy: string, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<CustomField[], any>>;
    /**
     *
     * @summary Add tags to account
     * @param {Array<string>} body
     * @param {string} accountId
     * @param {string} xKillbillCreatedBy
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    createAccountTags(body: Array<string>, accountId: string, xKillbillCreatedBy: string, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Tag[], any>>;
    /**
     *
     * @summary Add a payment method
     * @param {PaymentMethod} body
     * @param {string} accountId
     * @param {string} xKillbillCreatedBy
     * @param {boolean} [isDefault]
     * @param {boolean} [payAllUnpaidInvoices]
     * @param {Array<string>} [controlPluginName]
     * @param {Array<string>} [pluginProperty]
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    createPaymentMethod(body: PaymentMethod, accountId: string, xKillbillCreatedBy: string, isDefault?: boolean, payAllUnpaidInvoices?: boolean, controlPluginName?: Array<string>, pluginProperty?: Array<string>, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<PaymentMethod, any>>;
    /**
     *
     * @summary Remove custom fields from account
     * @param {string} accountId
     * @param {string} xKillbillCreatedBy
     * @param {Array<string>} [customField]
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    deleteAccountCustomFields(accountId: string, xKillbillCreatedBy: string, customField?: Array<string>, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     *
     * @summary Remove tags from account
     * @param {string} accountId
     * @param {string} xKillbillCreatedBy
     * @param {Array<string>} [tagDef]
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    deleteAccountTags(accountId: string, xKillbillCreatedBy: string, tagDef?: Array<string>, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     *
     * @summary Retrieve an account by id
     * @param {string} accountId
     * @param {boolean} [accountWithBalance]
     * @param {boolean} [accountWithBalanceAndCBA]
     * @param {'FULL' | 'MINIMAL' | 'NONE'} [audit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    getAccount(accountId: string, accountWithBalance?: boolean, accountWithBalanceAndCBA?: boolean, audit?: 'FULL' | 'MINIMAL' | 'NONE', options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Account, any>>;
    /**
     *
     * @summary Retrieve audit logs by account id
     * @param {string} accountId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    getAccountAuditLogs(accountId: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<AuditLog[], any>>;
    /**
     *
     * @summary Retrieve account audit logs with history by account id
     * @param {string} accountId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    getAccountAuditLogsWithHistory(accountId: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<AuditLog[], any>>;
    /**
     *
     * @summary Retrieve bundles for account
     * @param {string} accountId
     * @param {string} [externalKey]
     * @param {string} [bundlesFilter]
     * @param {'FULL' | 'MINIMAL' | 'NONE'} [audit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    getAccountBundles(accountId: string, externalKey?: string, bundlesFilter?: string, audit?: 'FULL' | 'MINIMAL' | 'NONE', options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Bundle[], any>>;
    /**
     *
     * @summary Retrieve paginated bundles for account
     * @param {string} accountId
     * @param {number} [offset]
     * @param {number} [limit]
     * @param {'FULL' | 'MINIMAL' | 'NONE'} [audit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    getAccountBundlesPaginated(accountId: string, offset?: number, limit?: number, audit?: 'FULL' | 'MINIMAL' | 'NONE', options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Bundle[], any>>;
    /**
     *
     * @summary Retrieve an account by external key
     * @param {string} externalKey
     * @param {boolean} [accountWithBalance]
     * @param {boolean} [accountWithBalanceAndCBA]
     * @param {'FULL' | 'MINIMAL' | 'NONE'} [audit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    getAccountByKey(externalKey: string, accountWithBalance?: boolean, accountWithBalanceAndCBA?: boolean, audit?: 'FULL' | 'MINIMAL' | 'NONE', options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Account, any>>;
    /**
     *
     * @summary Retrieve account custom fields
     * @param {string} accountId
     * @param {'FULL' | 'MINIMAL' | 'NONE'} [audit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    getAccountCustomFields(accountId: string, audit?: 'FULL' | 'MINIMAL' | 'NONE', options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<CustomField[], any>>;
    /**
     *
     * @summary Retrieve account email audit logs with history by id
     * @param {string} accountId
     * @param {string} accountEmailId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    getAccountEmailAuditLogsWithHistory(accountId: string, accountEmailId: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<AuditLog[], any>>;
    /**
     *
     * @summary Retrieve account tags
     * @param {string} accountId
     * @param {boolean} [includedDeleted]
     * @param {'FULL' | 'MINIMAL' | 'NONE'} [audit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    getAccountTags(accountId: string, includedDeleted?: boolean, audit?: 'FULL' | 'MINIMAL' | 'NONE', options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Tag[], any>>;
    /**
     *
     * @summary Retrieve account timeline
     * @param {string} accountId
     * @param {boolean} [parallel]
     * @param {'FULL' | 'MINIMAL' | 'NONE'} [audit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    getAccountTimeline(accountId: string, parallel?: boolean, audit?: 'FULL' | 'MINIMAL' | 'NONE', options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<AccountTimeline, any>>;
    /**
     *
     * @summary List accounts
     * @param {number} [offset]
     * @param {number} [limit]
     * @param {boolean} [accountWithBalance]
     * @param {boolean} [accountWithBalanceAndCBA]
     * @param {'FULL' | 'MINIMAL' | 'NONE'} [audit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    getAccounts(offset?: number, limit?: number, accountWithBalance?: boolean, accountWithBalanceAndCBA?: boolean, audit?: 'FULL' | 'MINIMAL' | 'NONE', options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Account[], any>>;
    /**
     *
     * @summary Retrieve account customFields
     * @param {string} accountId
     * @param {'ACCOUNT' | 'ACCOUNT_EMAIL' | 'BLOCKING_STATES' | 'BUNDLE' | 'CUSTOM_FIELD' | 'INVOICE' | 'PAYMENT' | 'TRANSACTION' | 'INVOICE_ITEM' | 'INVOICE_PAYMENT' | 'SUBSCRIPTION' | 'SUBSCRIPTION_EVENT' | 'SERVICE_BROADCAST' | 'PAYMENT_ATTEMPT' | 'PAYMENT_METHOD' | 'TAG' | 'TAG_DEFINITION' | 'TENANT' | 'TENANT_KVS'} [objectType]
     * @param {'FULL' | 'MINIMAL' | 'NONE'} [audit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    getAllCustomFields(accountId: string, objectType?: 'ACCOUNT' | 'ACCOUNT_EMAIL' | 'BLOCKING_STATES' | 'BUNDLE' | 'CUSTOM_FIELD' | 'INVOICE' | 'PAYMENT' | 'TRANSACTION' | 'INVOICE_ITEM' | 'INVOICE_PAYMENT' | 'SUBSCRIPTION' | 'SUBSCRIPTION_EVENT' | 'SERVICE_BROADCAST' | 'PAYMENT_ATTEMPT' | 'PAYMENT_METHOD' | 'TAG' | 'TAG_DEFINITION' | 'TENANT' | 'TENANT_KVS', audit?: 'FULL' | 'MINIMAL' | 'NONE', options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<CustomField[], any>>;
    /**
     *
     * @summary Retrieve account tags
     * @param {string} accountId
     * @param {'ACCOUNT' | 'ACCOUNT_EMAIL' | 'BLOCKING_STATES' | 'BUNDLE' | 'CUSTOM_FIELD' | 'INVOICE' | 'PAYMENT' | 'TRANSACTION' | 'INVOICE_ITEM' | 'INVOICE_PAYMENT' | 'SUBSCRIPTION' | 'SUBSCRIPTION_EVENT' | 'SERVICE_BROADCAST' | 'PAYMENT_ATTEMPT' | 'PAYMENT_METHOD' | 'TAG' | 'TAG_DEFINITION' | 'TENANT' | 'TENANT_KVS'} [objectType]
     * @param {boolean} [includedDeleted]
     * @param {'FULL' | 'MINIMAL' | 'NONE'} [audit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    getAllTags(accountId: string, objectType?: 'ACCOUNT' | 'ACCOUNT_EMAIL' | 'BLOCKING_STATES' | 'BUNDLE' | 'CUSTOM_FIELD' | 'INVOICE' | 'PAYMENT' | 'TRANSACTION' | 'INVOICE_ITEM' | 'INVOICE_PAYMENT' | 'SUBSCRIPTION' | 'SUBSCRIPTION_EVENT' | 'SERVICE_BROADCAST' | 'PAYMENT_ATTEMPT' | 'PAYMENT_METHOD' | 'TAG' | 'TAG_DEFINITION' | 'TENANT' | 'TENANT_KVS', includedDeleted?: boolean, audit?: 'FULL' | 'MINIMAL' | 'NONE', options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Tag[], any>>;
    /**
     *
     * @summary Retrieve blocking state audit logs with history by id
     * @param {string} blockingId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    getBlockingStateAuditLogsWithHistory(blockingId: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<AuditLog[], any>>;
    /**
     *
     * @summary Retrieve blocking states for account
     * @param {string} accountId
     * @param {Array<'SUBSCRIPTION' | 'SUBSCRIPTION_BUNDLE' | 'ACCOUNT'>} [blockingStateTypes]
     * @param {Array<string>} [blockingStateSvcs]
     * @param {'FULL' | 'MINIMAL' | 'NONE'} [audit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    getBlockingStates(accountId: string, blockingStateTypes?: Array<'SUBSCRIPTION' | 'SUBSCRIPTION_BUNDLE' | 'ACCOUNT'>, blockingStateSvcs?: Array<string>, audit?: 'FULL' | 'MINIMAL' | 'NONE', options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<BlockingState[], any>>;
    /**
     *
     * @summary List children accounts
     * @param {string} accountId
     * @param {boolean} [accountWithBalance]
     * @param {boolean} [accountWithBalanceAndCBA]
     * @param {'FULL' | 'MINIMAL' | 'NONE'} [audit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    getChildrenAccounts(accountId: string, accountWithBalance?: boolean, accountWithBalanceAndCBA?: boolean, audit?: 'FULL' | 'MINIMAL' | 'NONE', options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Account[], any>>;
    /**
     *
     * @summary Retrieve an account emails
     * @param {string} accountId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    getEmails(accountId: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<AccountEmail[], any>>;
    /**
     *
     * @summary Retrieve account invoice payments
     * @param {string} accountId
     * @param {boolean} [withPluginInfo]
     * @param {boolean} [withAttempts]
     * @param {Array<string>} [pluginProperty]
     * @param {'FULL' | 'MINIMAL' | 'NONE'} [audit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    getInvoicePayments(accountId: string, withPluginInfo?: boolean, withAttempts?: boolean, pluginProperty?: Array<string>, audit?: 'FULL' | 'MINIMAL' | 'NONE', options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<InvoicePayment[], any>>;
    /**
     *
     * @summary Retrieve account invoices
     * @param {string} accountId
     * @param {string} [startDate]
     * @param {string} [endDate]
     * @param {boolean} [withMigrationInvoices]
     * @param {boolean} [unpaidInvoicesOnly]
     * @param {boolean} [includeVoidedInvoices]
     * @param {boolean} [includeInvoiceComponents]
     * @param {string} [invoicesFilter]
     * @param {'FULL' | 'MINIMAL' | 'NONE'} [audit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    getInvoicesForAccount(accountId: string, startDate?: string, endDate?: string, withMigrationInvoices?: boolean, unpaidInvoicesOnly?: boolean, includeVoidedInvoices?: boolean, includeInvoiceComponents?: boolean, invoicesFilter?: string, audit?: 'FULL' | 'MINIMAL' | 'NONE', options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Invoice[], any>>;
    /**
     *
     * @summary Retrieve paginated invoices for account
     * @param {string} accountId
     * @param {number} [offset]
     * @param {number} [limit]
     * @param {'FULL' | 'MINIMAL' | 'NONE'} [audit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    getInvoicesForAccountPaginated(accountId: string, offset?: number, limit?: number, audit?: 'FULL' | 'MINIMAL' | 'NONE', options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Invoice[], any>>;
    /**
     *
     * @summary Retrieve overdue state for account
     * @param {string} accountId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    getOverdueAccount(accountId: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<OverdueState, any>>;
    /**
     *
     * @summary Retrieve account payment methods
     * @param {string} accountId
     * @param {boolean} [withPluginInfo]
     * @param {boolean} [includedDeleted]
     * @param {Array<string>} [pluginProperty]
     * @param {'FULL' | 'MINIMAL' | 'NONE'} [audit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    getPaymentMethodsForAccount(accountId: string, withPluginInfo?: boolean, includedDeleted?: boolean, pluginProperty?: Array<string>, audit?: 'FULL' | 'MINIMAL' | 'NONE', options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<PaymentMethod[], any>>;
    /**
     *
     * @summary Retrieve account payments
     * @param {string} accountId
     * @param {boolean} [withAttempts]
     * @param {boolean} [withPluginInfo]
     * @param {Array<string>} [pluginProperty]
     * @param {'FULL' | 'MINIMAL' | 'NONE'} [audit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    getPaymentsForAccount(accountId: string, withAttempts?: boolean, withPluginInfo?: boolean, pluginProperty?: Array<string>, audit?: 'FULL' | 'MINIMAL' | 'NONE', options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Payment[], any>>;
    /**
     *
     * @summary Modify custom fields to account
     * @param {Array<CustomField>} body
     * @param {string} accountId
     * @param {string} xKillbillCreatedBy
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    modifyAccountCustomFields(body: Array<CustomField>, accountId: string, xKillbillCreatedBy: string, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     *
     * @summary Trigger a payment for all unpaid invoices
     * @param {string} accountId
     * @param {string} xKillbillCreatedBy
     * @param {string} [paymentMethodId]
     * @param {boolean} [externalPayment]
     * @param {number} [paymentAmount]
     * @param {string} [targetDate]
     * @param {Array<string>} [pluginProperty]
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    payAllInvoices(accountId: string, xKillbillCreatedBy: string, paymentMethodId?: string, externalPayment?: boolean, paymentAmount?: number, targetDate?: string, pluginProperty?: Array<string>, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Invoice[], any>>;
    /**
     *
     * @summary Trigger a payment (authorization, purchase or credit)
     * @param {PaymentTransaction} body
     * @param {string} accountId
     * @param {string} xKillbillCreatedBy
     * @param {string} [paymentMethodId]
     * @param {Array<string>} [controlPluginName]
     * @param {Array<string>} [pluginProperty]
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    processPayment(body: PaymentTransaction, accountId: string, xKillbillCreatedBy: string, paymentMethodId?: string, controlPluginName?: Array<string>, pluginProperty?: Array<string>, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Payment, any>>;
    /**
     *
     * @summary Trigger a payment using the account external key (authorization, purchase or credit)
     * @param {PaymentTransaction} body
     * @param {string} externalKey
     * @param {string} xKillbillCreatedBy
     * @param {string} [paymentMethodId]
     * @param {Array<string>} [controlPluginName]
     * @param {Array<string>} [pluginProperty]
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    processPaymentByExternalKey(body: PaymentTransaction, externalKey: string, xKillbillCreatedBy: string, paymentMethodId?: string, controlPluginName?: Array<string>, pluginProperty?: Array<string>, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Payment, any>>;
    /**
     *
     * @summary Rebalance account CBA
     * @param {string} accountId
     * @param {string} xKillbillCreatedBy
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    rebalanceExistingCBAOnAccount(accountId: string, xKillbillCreatedBy: string, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     *
     * @summary Refresh account payment methods
     * @param {string} accountId
     * @param {string} xKillbillCreatedBy
     * @param {string} [pluginName]
     * @param {Array<string>} [pluginProperty]
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    refreshPaymentMethods(accountId: string, xKillbillCreatedBy: string, pluginName?: string, pluginProperty?: Array<string>, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     *
     * @summary Delete email from account
     * @param {string} accountId
     * @param {string} email
     * @param {string} xKillbillCreatedBy
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    removeEmail(accountId: string, email: string, xKillbillCreatedBy: string, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     *
     * @summary Search accounts
     * @param {string} searchKey
     * @param {number} [offset]
     * @param {number} [limit]
     * @param {boolean} [accountWithBalance]
     * @param {boolean} [accountWithBalanceAndCBA]
     * @param {'FULL' | 'MINIMAL' | 'NONE'} [audit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    searchAccounts(searchKey: string, offset?: number, limit?: number, accountWithBalance?: boolean, accountWithBalanceAndCBA?: boolean, audit?: 'FULL' | 'MINIMAL' | 'NONE', options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Account[], any>>;
    /**
     *
     * @summary Set the default payment method
     * @param {string} accountId
     * @param {string} paymentMethodId
     * @param {string} xKillbillCreatedBy
     * @param {boolean} [payAllUnpaidInvoices]
     * @param {Array<string>} [pluginProperty]
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    setDefaultPaymentMethod(accountId: string, paymentMethodId: string, xKillbillCreatedBy: string, payAllUnpaidInvoices?: boolean, pluginProperty?: Array<string>, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     *
     * @summary Move a given child credit to the parent level
     * @param {string} childAccountId
     * @param {string} xKillbillCreatedBy
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    transferChildCreditToParent(childAccountId: string, xKillbillCreatedBy: string, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     *
     * @summary Update account
     * @param {Account} body
     * @param {string} accountId
     * @param {string} xKillbillCreatedBy
     * @param {boolean} [treatNullAsReset]
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AccountApi
     */
    updateAccount(body: Account, accountId: string, xKillbillCreatedBy: string, treatNullAsReset?: boolean, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
}
/**
 * AdminApi - axios parameter creator
 * @export
 */
export declare const AdminApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Get queues entries
     * @param {string} [accountId]
     * @param {string} [queueName]
     * @param {string} [serviceName]
     * @param {boolean} [withHistory]
     * @param {string} [minDate]
     * @param {string} [maxDate]
     * @param {boolean} [withInProcessing]
     * @param {boolean} [withBusEvents]
     * @param {boolean} [withNotifications]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getQueueEntries: (accountId?: string, queueName?: string, serviceName?: string, withHistory?: boolean, minDate?: string, maxDate?: string, withInProcessing?: boolean, withBusEvents?: boolean, withNotifications?: boolean, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Invalidates the given Cache if specified, otherwise invalidates all caches
     * @param {string} [cacheName]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    invalidatesCache: (cacheName?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Invalidates Caches per account level
     * @param {string} accountId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    invalidatesCacheByAccount: (accountId: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Invalidates Caches per tenant level
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    invalidatesCacheByTenant: (options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Put the host back into rotation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putInRotation: (options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Put the host out of rotation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putOutOfRotation: (options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Trigger an invoice generation for all parked accounts
     * @param {string} xKillbillCreatedBy
     * @param {number} [offset]
     * @param {number} [limit]
     * @param {Array<string>} [pluginProperty]
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    triggerInvoiceGenerationForParkedAccounts: (xKillbillCreatedBy: string, offset?: number, limit?: number, pluginProperty?: Array<string>, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Update existing paymentTransaction and associated payment state
     * @param {AdminPayment} body
     * @param {string} paymentId
     * @param {string} paymentTransactionId
     * @param {string} xKillbillCreatedBy
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updatePaymentTransactionState: (body: AdminPayment, paymentId: string, paymentTransactionId: string, xKillbillCreatedBy: string, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * AdminApi - functional programming interface
 * @export
 */
export declare const AdminApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary Get queues entries
     * @param {string} [accountId]
     * @param {string} [queueName]
     * @param {string} [serviceName]
     * @param {boolean} [withHistory]
     * @param {string} [minDate]
     * @param {string} [maxDate]
     * @param {boolean} [withInProcessing]
     * @param {boolean} [withBusEvents]
     * @param {boolean} [withNotifications]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getQueueEntries(accountId?: string, queueName?: string, serviceName?: string, withHistory?: boolean, minDate?: string, maxDate?: string, withInProcessing?: boolean, withBusEvents?: boolean, withNotifications?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary Invalidates the given Cache if specified, otherwise invalidates all caches
     * @param {string} [cacheName]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    invalidatesCache(cacheName?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary Invalidates Caches per account level
     * @param {string} accountId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    invalidatesCacheByAccount(accountId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary Invalidates Caches per tenant level
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    invalidatesCacheByTenant(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary Put the host back into rotation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putInRotation(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary Put the host out of rotation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putOutOfRotation(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary Trigger an invoice generation for all parked accounts
     * @param {string} xKillbillCreatedBy
     * @param {number} [offset]
     * @param {number} [limit]
     * @param {Array<string>} [pluginProperty]
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    triggerInvoiceGenerationForParkedAccounts(xKillbillCreatedBy: string, offset?: number, limit?: number, pluginProperty?: Array<string>, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary Update existing paymentTransaction and associated payment state
     * @param {AdminPayment} body
     * @param {string} paymentId
     * @param {string} paymentTransactionId
     * @param {string} xKillbillCreatedBy
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updatePaymentTransactionState(body: AdminPayment, paymentId: string, paymentTransactionId: string, xKillbillCreatedBy: string, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
};
/**
 * AdminApi - factory interface
 * @export
 */
export declare const AdminApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Get queues entries
     * @param {string} [accountId]
     * @param {string} [queueName]
     * @param {string} [serviceName]
     * @param {boolean} [withHistory]
     * @param {string} [minDate]
     * @param {string} [maxDate]
     * @param {boolean} [withInProcessing]
     * @param {boolean} [withBusEvents]
     * @param {boolean} [withNotifications]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getQueueEntries(accountId?: string, queueName?: string, serviceName?: string, withHistory?: boolean, minDate?: string, maxDate?: string, withInProcessing?: boolean, withBusEvents?: boolean, withNotifications?: boolean, options?: any): AxiosPromise<void>;
    /**
     *
     * @summary Invalidates the given Cache if specified, otherwise invalidates all caches
     * @param {string} [cacheName]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    invalidatesCache(cacheName?: string, options?: any): AxiosPromise<void>;
    /**
     *
     * @summary Invalidates Caches per account level
     * @param {string} accountId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    invalidatesCacheByAccount(accountId: string, options?: any): AxiosPromise<void>;
    /**
     *
     * @summary Invalidates Caches per tenant level
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    invalidatesCacheByTenant(options?: any): AxiosPromise<void>;
    /**
     *
     * @summary Put the host back into rotation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putInRotation(options?: any): AxiosPromise<void>;
    /**
     *
     * @summary Put the host out of rotation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    putOutOfRotation(options?: any): AxiosPromise<void>;
    /**
     *
     * @summary Trigger an invoice generation for all parked accounts
     * @param {string} xKillbillCreatedBy
     * @param {number} [offset]
     * @param {number} [limit]
     * @param {Array<string>} [pluginProperty]
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    triggerInvoiceGenerationForParkedAccounts(xKillbillCreatedBy: string, offset?: number, limit?: number, pluginProperty?: Array<string>, xKillbillReason?: string, xKillbillComment?: string, options?: any): AxiosPromise<void>;
    /**
     *
     * @summary Update existing paymentTransaction and associated payment state
     * @param {AdminPayment} body
     * @param {string} paymentId
     * @param {string} paymentTransactionId
     * @param {string} xKillbillCreatedBy
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updatePaymentTransactionState(body: AdminPayment, paymentId: string, paymentTransactionId: string, xKillbillCreatedBy: string, xKillbillReason?: string, xKillbillComment?: string, options?: any): AxiosPromise<void>;
};
/**
 * AdminApi - object-oriented interface
 * @export
 * @class AdminApi
 * @extends {BaseAPI}
 */
export declare class AdminApi extends BaseAPI {
    /**
     *
     * @summary Get queues entries
     * @param {string} [accountId]
     * @param {string} [queueName]
     * @param {string} [serviceName]
     * @param {boolean} [withHistory]
     * @param {string} [minDate]
     * @param {string} [maxDate]
     * @param {boolean} [withInProcessing]
     * @param {boolean} [withBusEvents]
     * @param {boolean} [withNotifications]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    getQueueEntries(accountId?: string, queueName?: string, serviceName?: string, withHistory?: boolean, minDate?: string, maxDate?: string, withInProcessing?: boolean, withBusEvents?: boolean, withNotifications?: boolean, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     *
     * @summary Invalidates the given Cache if specified, otherwise invalidates all caches
     * @param {string} [cacheName]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    invalidatesCache(cacheName?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     *
     * @summary Invalidates Caches per account level
     * @param {string} accountId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    invalidatesCacheByAccount(accountId: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     *
     * @summary Invalidates Caches per tenant level
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    invalidatesCacheByTenant(options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     *
     * @summary Put the host back into rotation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    putInRotation(options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     *
     * @summary Put the host out of rotation
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    putOutOfRotation(options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     *
     * @summary Trigger an invoice generation for all parked accounts
     * @param {string} xKillbillCreatedBy
     * @param {number} [offset]
     * @param {number} [limit]
     * @param {Array<string>} [pluginProperty]
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    triggerInvoiceGenerationForParkedAccounts(xKillbillCreatedBy: string, offset?: number, limit?: number, pluginProperty?: Array<string>, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     *
     * @summary Update existing paymentTransaction and associated payment state
     * @param {AdminPayment} body
     * @param {string} paymentId
     * @param {string} paymentTransactionId
     * @param {string} xKillbillCreatedBy
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApi
     */
    updatePaymentTransactionState(body: AdminPayment, paymentId: string, paymentTransactionId: string, xKillbillCreatedBy: string, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
}
/**
 * BundleApi - axios parameter creator
 * @export
 */
export declare const BundleApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Block a bundle
     * @param {BlockingState} body
     * @param {string} bundleId
     * @param {string} xKillbillCreatedBy
     * @param {string} [requestedDate]
     * @param {Array<string>} [pluginProperty]
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addBundleBlockingState: (body: BlockingState, bundleId: string, xKillbillCreatedBy: string, requestedDate?: string, pluginProperty?: Array<string>, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Add custom fields to bundle
     * @param {Array<CustomField>} body
     * @param {string} bundleId
     * @param {string} xKillbillCreatedBy
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createBundleCustomFields: (body: Array<CustomField>, bundleId: string, xKillbillCreatedBy: string, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Add tags to bundle
     * @param {Array<string>} body
     * @param {string} bundleId
     * @param {string} xKillbillCreatedBy
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createBundleTags: (body: Array<string>, bundleId: string, xKillbillCreatedBy: string, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Remove custom fields from bundle
     * @param {string} bundleId
     * @param {string} xKillbillCreatedBy
     * @param {Array<string>} [customField]
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteBundleCustomFields: (bundleId: string, xKillbillCreatedBy: string, customField?: Array<string>, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Remove tags from bundle
     * @param {string} bundleId
     * @param {string} xKillbillCreatedBy
     * @param {Array<string>} [tagDef]
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteBundleTags: (bundleId: string, xKillbillCreatedBy: string, tagDef?: Array<string>, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Retrieve a bundle by id
     * @param {string} bundleId
     * @param {'FULL' | 'MINIMAL' | 'NONE'} [audit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBundle: (bundleId: string, audit?: 'FULL' | 'MINIMAL' | 'NONE', options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Retrieve bundle audit logs with history by id
     * @param {string} bundleId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBundleAuditLogsWithHistory: (bundleId: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Retrieve a bundle by external key
     * @param {string} externalKey
     * @param {boolean} [includedDeleted]
     * @param {'FULL' | 'MINIMAL' | 'NONE'} [audit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBundleByKey: (externalKey: string, includedDeleted?: boolean, audit?: 'FULL' | 'MINIMAL' | 'NONE', options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Retrieve bundle custom fields
     * @param {string} bundleId
     * @param {'FULL' | 'MINIMAL' | 'NONE'} [audit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBundleCustomFields: (bundleId: string, audit?: 'FULL' | 'MINIMAL' | 'NONE', options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Retrieve bundle tags
     * @param {string} bundleId
     * @param {boolean} [includedDeleted]
     * @param {'FULL' | 'MINIMAL' | 'NONE'} [audit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBundleTags: (bundleId: string, includedDeleted?: boolean, audit?: 'FULL' | 'MINIMAL' | 'NONE', options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary List bundles
     * @param {number} [offset]
     * @param {number} [limit]
     * @param {'FULL' | 'MINIMAL' | 'NONE'} [audit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBundles: (offset?: number, limit?: number, audit?: 'FULL' | 'MINIMAL' | 'NONE', options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Modify custom fields to bundle
     * @param {Array<CustomField>} body
     * @param {string} bundleId
     * @param {string} xKillbillCreatedBy
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    modifyBundleCustomFields: (body: Array<CustomField>, bundleId: string, xKillbillCreatedBy: string, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Pause a bundle
     * @param {string} bundleId
     * @param {string} xKillbillCreatedBy
     * @param {string} [requestedDate]
     * @param {Array<string>} [pluginProperty]
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    pauseBundle: (bundleId: string, xKillbillCreatedBy: string, requestedDate?: string, pluginProperty?: Array<string>, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Update a bundle externalKey
     * @param {Bundle} body
     * @param {string} bundleId
     * @param {string} xKillbillCreatedBy
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    renameExternalKey: (body: Bundle, bundleId: string, xKillbillCreatedBy: string, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Resume a bundle
     * @param {string} bundleId
     * @param {string} xKillbillCreatedBy
     * @param {string} [requestedDate]
     * @param {Array<string>} [pluginProperty]
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    resumeBundle: (bundleId: string, xKillbillCreatedBy: string, requestedDate?: string, pluginProperty?: Array<string>, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Search bundles
     * @param {string} searchKey
     * @param {number} [offset]
     * @param {number} [limit]
     * @param {'FULL' | 'MINIMAL' | 'NONE'} [audit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchBundles: (searchKey: string, offset?: number, limit?: number, audit?: 'FULL' | 'MINIMAL' | 'NONE', options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Transfer a bundle to another account
     * @param {Bundle} body
     * @param {string} bundleId
     * @param {string} xKillbillCreatedBy
     * @param {string} [requestedDate]
     * @param {'START_OF_TERM' | 'END_OF_TERM' | 'IMMEDIATE' | 'ILLEGAL'} [billingPolicy]
     * @param {'NONE' | 'USE_EXISTING' | 'ALIGN_WITH_EFF_DT'} [bcdTransfer]
     * @param {Array<string>} [pluginProperty]
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    transferBundle: (body: Bundle, bundleId: string, xKillbillCreatedBy: string, requestedDate?: string, billingPolicy?: 'START_OF_TERM' | 'END_OF_TERM' | 'IMMEDIATE' | 'ILLEGAL', bcdTransfer?: 'NONE' | 'USE_EXISTING' | 'ALIGN_WITH_EFF_DT', pluginProperty?: Array<string>, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * BundleApi - functional programming interface
 * @export
 */
export declare const BundleApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary Block a bundle
     * @param {BlockingState} body
     * @param {string} bundleId
     * @param {string} xKillbillCreatedBy
     * @param {string} [requestedDate]
     * @param {Array<string>} [pluginProperty]
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addBundleBlockingState(body: BlockingState, bundleId: string, xKillbillCreatedBy: string, requestedDate?: string, pluginProperty?: Array<string>, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<BlockingState>>>;
    /**
     *
     * @summary Add custom fields to bundle
     * @param {Array<CustomField>} body
     * @param {string} bundleId
     * @param {string} xKillbillCreatedBy
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createBundleCustomFields(body: Array<CustomField>, bundleId: string, xKillbillCreatedBy: string, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CustomField>>>;
    /**
     *
     * @summary Add tags to bundle
     * @param {Array<string>} body
     * @param {string} bundleId
     * @param {string} xKillbillCreatedBy
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createBundleTags(body: Array<string>, bundleId: string, xKillbillCreatedBy: string, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Tag>>>;
    /**
     *
     * @summary Remove custom fields from bundle
     * @param {string} bundleId
     * @param {string} xKillbillCreatedBy
     * @param {Array<string>} [customField]
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteBundleCustomFields(bundleId: string, xKillbillCreatedBy: string, customField?: Array<string>, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary Remove tags from bundle
     * @param {string} bundleId
     * @param {string} xKillbillCreatedBy
     * @param {Array<string>} [tagDef]
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteBundleTags(bundleId: string, xKillbillCreatedBy: string, tagDef?: Array<string>, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary Retrieve a bundle by id
     * @param {string} bundleId
     * @param {'FULL' | 'MINIMAL' | 'NONE'} [audit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBundle(bundleId: string, audit?: 'FULL' | 'MINIMAL' | 'NONE', options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Bundle>>;
    /**
     *
     * @summary Retrieve bundle audit logs with history by id
     * @param {string} bundleId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBundleAuditLogsWithHistory(bundleId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<AuditLog>>>;
    /**
     *
     * @summary Retrieve a bundle by external key
     * @param {string} externalKey
     * @param {boolean} [includedDeleted]
     * @param {'FULL' | 'MINIMAL' | 'NONE'} [audit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBundleByKey(externalKey: string, includedDeleted?: boolean, audit?: 'FULL' | 'MINIMAL' | 'NONE', options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Bundle>>>;
    /**
     *
     * @summary Retrieve bundle custom fields
     * @param {string} bundleId
     * @param {'FULL' | 'MINIMAL' | 'NONE'} [audit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBundleCustomFields(bundleId: string, audit?: 'FULL' | 'MINIMAL' | 'NONE', options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CustomField>>>;
    /**
     *
     * @summary Retrieve bundle tags
     * @param {string} bundleId
     * @param {boolean} [includedDeleted]
     * @param {'FULL' | 'MINIMAL' | 'NONE'} [audit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBundleTags(bundleId: string, includedDeleted?: boolean, audit?: 'FULL' | 'MINIMAL' | 'NONE', options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Tag>>>;
    /**
     *
     * @summary List bundles
     * @param {number} [offset]
     * @param {number} [limit]
     * @param {'FULL' | 'MINIMAL' | 'NONE'} [audit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBundles(offset?: number, limit?: number, audit?: 'FULL' | 'MINIMAL' | 'NONE', options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Bundle>>>;
    /**
     *
     * @summary Modify custom fields to bundle
     * @param {Array<CustomField>} body
     * @param {string} bundleId
     * @param {string} xKillbillCreatedBy
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    modifyBundleCustomFields(body: Array<CustomField>, bundleId: string, xKillbillCreatedBy: string, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary Pause a bundle
     * @param {string} bundleId
     * @param {string} xKillbillCreatedBy
     * @param {string} [requestedDate]
     * @param {Array<string>} [pluginProperty]
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    pauseBundle(bundleId: string, xKillbillCreatedBy: string, requestedDate?: string, pluginProperty?: Array<string>, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary Update a bundle externalKey
     * @param {Bundle} body
     * @param {string} bundleId
     * @param {string} xKillbillCreatedBy
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    renameExternalKey(body: Bundle, bundleId: string, xKillbillCreatedBy: string, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary Resume a bundle
     * @param {string} bundleId
     * @param {string} xKillbillCreatedBy
     * @param {string} [requestedDate]
     * @param {Array<string>} [pluginProperty]
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    resumeBundle(bundleId: string, xKillbillCreatedBy: string, requestedDate?: string, pluginProperty?: Array<string>, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary Search bundles
     * @param {string} searchKey
     * @param {number} [offset]
     * @param {number} [limit]
     * @param {'FULL' | 'MINIMAL' | 'NONE'} [audit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchBundles(searchKey: string, offset?: number, limit?: number, audit?: 'FULL' | 'MINIMAL' | 'NONE', options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Bundle>>>;
    /**
     *
     * @summary Transfer a bundle to another account
     * @param {Bundle} body
     * @param {string} bundleId
     * @param {string} xKillbillCreatedBy
     * @param {string} [requestedDate]
     * @param {'START_OF_TERM' | 'END_OF_TERM' | 'IMMEDIATE' | 'ILLEGAL'} [billingPolicy]
     * @param {'NONE' | 'USE_EXISTING' | 'ALIGN_WITH_EFF_DT'} [bcdTransfer]
     * @param {Array<string>} [pluginProperty]
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    transferBundle(body: Bundle, bundleId: string, xKillbillCreatedBy: string, requestedDate?: string, billingPolicy?: 'START_OF_TERM' | 'END_OF_TERM' | 'IMMEDIATE' | 'ILLEGAL', bcdTransfer?: 'NONE' | 'USE_EXISTING' | 'ALIGN_WITH_EFF_DT', pluginProperty?: Array<string>, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Bundle>>;
};
/**
 * BundleApi - factory interface
 * @export
 */
export declare const BundleApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Block a bundle
     * @param {BlockingState} body
     * @param {string} bundleId
     * @param {string} xKillbillCreatedBy
     * @param {string} [requestedDate]
     * @param {Array<string>} [pluginProperty]
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addBundleBlockingState(body: BlockingState, bundleId: string, xKillbillCreatedBy: string, requestedDate?: string, pluginProperty?: Array<string>, xKillbillReason?: string, xKillbillComment?: string, options?: any): AxiosPromise<Array<BlockingState>>;
    /**
     *
     * @summary Add custom fields to bundle
     * @param {Array<CustomField>} body
     * @param {string} bundleId
     * @param {string} xKillbillCreatedBy
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createBundleCustomFields(body: Array<CustomField>, bundleId: string, xKillbillCreatedBy: string, xKillbillReason?: string, xKillbillComment?: string, options?: any): AxiosPromise<Array<CustomField>>;
    /**
     *
     * @summary Add tags to bundle
     * @param {Array<string>} body
     * @param {string} bundleId
     * @param {string} xKillbillCreatedBy
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createBundleTags(body: Array<string>, bundleId: string, xKillbillCreatedBy: string, xKillbillReason?: string, xKillbillComment?: string, options?: any): AxiosPromise<Array<Tag>>;
    /**
     *
     * @summary Remove custom fields from bundle
     * @param {string} bundleId
     * @param {string} xKillbillCreatedBy
     * @param {Array<string>} [customField]
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteBundleCustomFields(bundleId: string, xKillbillCreatedBy: string, customField?: Array<string>, xKillbillReason?: string, xKillbillComment?: string, options?: any): AxiosPromise<void>;
    /**
     *
     * @summary Remove tags from bundle
     * @param {string} bundleId
     * @param {string} xKillbillCreatedBy
     * @param {Array<string>} [tagDef]
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteBundleTags(bundleId: string, xKillbillCreatedBy: string, tagDef?: Array<string>, xKillbillReason?: string, xKillbillComment?: string, options?: any): AxiosPromise<void>;
    /**
     *
     * @summary Retrieve a bundle by id
     * @param {string} bundleId
     * @param {'FULL' | 'MINIMAL' | 'NONE'} [audit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBundle(bundleId: string, audit?: 'FULL' | 'MINIMAL' | 'NONE', options?: any): AxiosPromise<Bundle>;
    /**
     *
     * @summary Retrieve bundle audit logs with history by id
     * @param {string} bundleId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBundleAuditLogsWithHistory(bundleId: string, options?: any): AxiosPromise<Array<AuditLog>>;
    /**
     *
     * @summary Retrieve a bundle by external key
     * @param {string} externalKey
     * @param {boolean} [includedDeleted]
     * @param {'FULL' | 'MINIMAL' | 'NONE'} [audit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBundleByKey(externalKey: string, includedDeleted?: boolean, audit?: 'FULL' | 'MINIMAL' | 'NONE', options?: any): AxiosPromise<Array<Bundle>>;
    /**
     *
     * @summary Retrieve bundle custom fields
     * @param {string} bundleId
     * @param {'FULL' | 'MINIMAL' | 'NONE'} [audit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBundleCustomFields(bundleId: string, audit?: 'FULL' | 'MINIMAL' | 'NONE', options?: any): AxiosPromise<Array<CustomField>>;
    /**
     *
     * @summary Retrieve bundle tags
     * @param {string} bundleId
     * @param {boolean} [includedDeleted]
     * @param {'FULL' | 'MINIMAL' | 'NONE'} [audit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBundleTags(bundleId: string, includedDeleted?: boolean, audit?: 'FULL' | 'MINIMAL' | 'NONE', options?: any): AxiosPromise<Array<Tag>>;
    /**
     *
     * @summary List bundles
     * @param {number} [offset]
     * @param {number} [limit]
     * @param {'FULL' | 'MINIMAL' | 'NONE'} [audit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getBundles(offset?: number, limit?: number, audit?: 'FULL' | 'MINIMAL' | 'NONE', options?: any): AxiosPromise<Array<Bundle>>;
    /**
     *
     * @summary Modify custom fields to bundle
     * @param {Array<CustomField>} body
     * @param {string} bundleId
     * @param {string} xKillbillCreatedBy
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    modifyBundleCustomFields(body: Array<CustomField>, bundleId: string, xKillbillCreatedBy: string, xKillbillReason?: string, xKillbillComment?: string, options?: any): AxiosPromise<void>;
    /**
     *
     * @summary Pause a bundle
     * @param {string} bundleId
     * @param {string} xKillbillCreatedBy
     * @param {string} [requestedDate]
     * @param {Array<string>} [pluginProperty]
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    pauseBundle(bundleId: string, xKillbillCreatedBy: string, requestedDate?: string, pluginProperty?: Array<string>, xKillbillReason?: string, xKillbillComment?: string, options?: any): AxiosPromise<void>;
    /**
     *
     * @summary Update a bundle externalKey
     * @param {Bundle} body
     * @param {string} bundleId
     * @param {string} xKillbillCreatedBy
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    renameExternalKey(body: Bundle, bundleId: string, xKillbillCreatedBy: string, xKillbillReason?: string, xKillbillComment?: string, options?: any): AxiosPromise<void>;
    /**
     *
     * @summary Resume a bundle
     * @param {string} bundleId
     * @param {string} xKillbillCreatedBy
     * @param {string} [requestedDate]
     * @param {Array<string>} [pluginProperty]
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    resumeBundle(bundleId: string, xKillbillCreatedBy: string, requestedDate?: string, pluginProperty?: Array<string>, xKillbillReason?: string, xKillbillComment?: string, options?: any): AxiosPromise<void>;
    /**
     *
     * @summary Search bundles
     * @param {string} searchKey
     * @param {number} [offset]
     * @param {number} [limit]
     * @param {'FULL' | 'MINIMAL' | 'NONE'} [audit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchBundles(searchKey: string, offset?: number, limit?: number, audit?: 'FULL' | 'MINIMAL' | 'NONE', options?: any): AxiosPromise<Array<Bundle>>;
    /**
     *
     * @summary Transfer a bundle to another account
     * @param {Bundle} body
     * @param {string} bundleId
     * @param {string} xKillbillCreatedBy
     * @param {string} [requestedDate]
     * @param {'START_OF_TERM' | 'END_OF_TERM' | 'IMMEDIATE' | 'ILLEGAL'} [billingPolicy]
     * @param {'NONE' | 'USE_EXISTING' | 'ALIGN_WITH_EFF_DT'} [bcdTransfer]
     * @param {Array<string>} [pluginProperty]
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    transferBundle(body: Bundle, bundleId: string, xKillbillCreatedBy: string, requestedDate?: string, billingPolicy?: 'START_OF_TERM' | 'END_OF_TERM' | 'IMMEDIATE' | 'ILLEGAL', bcdTransfer?: 'NONE' | 'USE_EXISTING' | 'ALIGN_WITH_EFF_DT', pluginProperty?: Array<string>, xKillbillReason?: string, xKillbillComment?: string, options?: any): AxiosPromise<Bundle>;
};
/**
 * BundleApi - object-oriented interface
 * @export
 * @class BundleApi
 * @extends {BaseAPI}
 */
export declare class BundleApi extends BaseAPI {
    /**
     *
     * @summary Block a bundle
     * @param {BlockingState} body
     * @param {string} bundleId
     * @param {string} xKillbillCreatedBy
     * @param {string} [requestedDate]
     * @param {Array<string>} [pluginProperty]
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BundleApi
     */
    addBundleBlockingState(body: BlockingState, bundleId: string, xKillbillCreatedBy: string, requestedDate?: string, pluginProperty?: Array<string>, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<BlockingState[], any>>;
    /**
     *
     * @summary Add custom fields to bundle
     * @param {Array<CustomField>} body
     * @param {string} bundleId
     * @param {string} xKillbillCreatedBy
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BundleApi
     */
    createBundleCustomFields(body: Array<CustomField>, bundleId: string, xKillbillCreatedBy: string, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<CustomField[], any>>;
    /**
     *
     * @summary Add tags to bundle
     * @param {Array<string>} body
     * @param {string} bundleId
     * @param {string} xKillbillCreatedBy
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BundleApi
     */
    createBundleTags(body: Array<string>, bundleId: string, xKillbillCreatedBy: string, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Tag[], any>>;
    /**
     *
     * @summary Remove custom fields from bundle
     * @param {string} bundleId
     * @param {string} xKillbillCreatedBy
     * @param {Array<string>} [customField]
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BundleApi
     */
    deleteBundleCustomFields(bundleId: string, xKillbillCreatedBy: string, customField?: Array<string>, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     *
     * @summary Remove tags from bundle
     * @param {string} bundleId
     * @param {string} xKillbillCreatedBy
     * @param {Array<string>} [tagDef]
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BundleApi
     */
    deleteBundleTags(bundleId: string, xKillbillCreatedBy: string, tagDef?: Array<string>, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     *
     * @summary Retrieve a bundle by id
     * @param {string} bundleId
     * @param {'FULL' | 'MINIMAL' | 'NONE'} [audit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BundleApi
     */
    getBundle(bundleId: string, audit?: 'FULL' | 'MINIMAL' | 'NONE', options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Bundle, any>>;
    /**
     *
     * @summary Retrieve bundle audit logs with history by id
     * @param {string} bundleId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BundleApi
     */
    getBundleAuditLogsWithHistory(bundleId: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<AuditLog[], any>>;
    /**
     *
     * @summary Retrieve a bundle by external key
     * @param {string} externalKey
     * @param {boolean} [includedDeleted]
     * @param {'FULL' | 'MINIMAL' | 'NONE'} [audit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BundleApi
     */
    getBundleByKey(externalKey: string, includedDeleted?: boolean, audit?: 'FULL' | 'MINIMAL' | 'NONE', options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Bundle[], any>>;
    /**
     *
     * @summary Retrieve bundle custom fields
     * @param {string} bundleId
     * @param {'FULL' | 'MINIMAL' | 'NONE'} [audit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BundleApi
     */
    getBundleCustomFields(bundleId: string, audit?: 'FULL' | 'MINIMAL' | 'NONE', options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<CustomField[], any>>;
    /**
     *
     * @summary Retrieve bundle tags
     * @param {string} bundleId
     * @param {boolean} [includedDeleted]
     * @param {'FULL' | 'MINIMAL' | 'NONE'} [audit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BundleApi
     */
    getBundleTags(bundleId: string, includedDeleted?: boolean, audit?: 'FULL' | 'MINIMAL' | 'NONE', options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Tag[], any>>;
    /**
     *
     * @summary List bundles
     * @param {number} [offset]
     * @param {number} [limit]
     * @param {'FULL' | 'MINIMAL' | 'NONE'} [audit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BundleApi
     */
    getBundles(offset?: number, limit?: number, audit?: 'FULL' | 'MINIMAL' | 'NONE', options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Bundle[], any>>;
    /**
     *
     * @summary Modify custom fields to bundle
     * @param {Array<CustomField>} body
     * @param {string} bundleId
     * @param {string} xKillbillCreatedBy
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BundleApi
     */
    modifyBundleCustomFields(body: Array<CustomField>, bundleId: string, xKillbillCreatedBy: string, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     *
     * @summary Pause a bundle
     * @param {string} bundleId
     * @param {string} xKillbillCreatedBy
     * @param {string} [requestedDate]
     * @param {Array<string>} [pluginProperty]
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BundleApi
     */
    pauseBundle(bundleId: string, xKillbillCreatedBy: string, requestedDate?: string, pluginProperty?: Array<string>, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     *
     * @summary Update a bundle externalKey
     * @param {Bundle} body
     * @param {string} bundleId
     * @param {string} xKillbillCreatedBy
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BundleApi
     */
    renameExternalKey(body: Bundle, bundleId: string, xKillbillCreatedBy: string, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     *
     * @summary Resume a bundle
     * @param {string} bundleId
     * @param {string} xKillbillCreatedBy
     * @param {string} [requestedDate]
     * @param {Array<string>} [pluginProperty]
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BundleApi
     */
    resumeBundle(bundleId: string, xKillbillCreatedBy: string, requestedDate?: string, pluginProperty?: Array<string>, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     *
     * @summary Search bundles
     * @param {string} searchKey
     * @param {number} [offset]
     * @param {number} [limit]
     * @param {'FULL' | 'MINIMAL' | 'NONE'} [audit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BundleApi
     */
    searchBundles(searchKey: string, offset?: number, limit?: number, audit?: 'FULL' | 'MINIMAL' | 'NONE', options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Bundle[], any>>;
    /**
     *
     * @summary Transfer a bundle to another account
     * @param {Bundle} body
     * @param {string} bundleId
     * @param {string} xKillbillCreatedBy
     * @param {string} [requestedDate]
     * @param {'START_OF_TERM' | 'END_OF_TERM' | 'IMMEDIATE' | 'ILLEGAL'} [billingPolicy]
     * @param {'NONE' | 'USE_EXISTING' | 'ALIGN_WITH_EFF_DT'} [bcdTransfer]
     * @param {Array<string>} [pluginProperty]
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BundleApi
     */
    transferBundle(body: Bundle, bundleId: string, xKillbillCreatedBy: string, requestedDate?: string, billingPolicy?: 'START_OF_TERM' | 'END_OF_TERM' | 'IMMEDIATE' | 'ILLEGAL', bcdTransfer?: 'NONE' | 'USE_EXISTING' | 'ALIGN_WITH_EFF_DT', pluginProperty?: Array<string>, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Bundle, any>>;
}
/**
 * CatalogApi - axios parameter creator
 * @export
 */
export declare const CatalogApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Add a simple plan entry in the current version of the catalog
     * @param {SimplePlan} body
     * @param {string} xKillbillCreatedBy
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addSimplePlan: (body: SimplePlan, xKillbillCreatedBy: string, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Delete all versions for a per tenant catalog
     * @param {string} xKillbillCreatedBy
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteCatalog: (xKillbillCreatedBy: string, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Retrieve available add-ons for a given product
     * @param {string} [baseProductName]
     * @param {string} [priceListName]
     * @param {string} [accountId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAvailableAddons: (baseProductName?: string, priceListName?: string, accountId?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Retrieve available base plans
     * @param {string} [accountId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAvailableBasePlans: (accountId?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Retrieve the catalog as JSON
     * @param {string} [requestedDate]
     * @param {string} [accountId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCatalogJson: (requestedDate?: string, accountId?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Retrieve a list of catalog versions
     * @param {string} [accountId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCatalogVersions: (accountId?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Retrieve the full catalog as XML
     * @param {string} [requestedDate]
     * @param {string} [accountId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCatalogXml: (requestedDate?: string, accountId?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Retrieve phase for a given subscription and date
     * @param {string} [subscriptionId]
     * @param {string} [requestedDate]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPhaseForSubscriptionAndDate: (subscriptionId?: string, requestedDate?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Retrieve plan for a given subscription and date
     * @param {string} [subscriptionId]
     * @param {string} [requestedDate]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPlanForSubscriptionAndDate: (subscriptionId?: string, requestedDate?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Retrieve priceList for a given subscription and date
     * @param {string} [subscriptionId]
     * @param {string} [requestedDate]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPriceListForSubscriptionAndDate: (subscriptionId?: string, requestedDate?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Retrieve product for a given subscription and date
     * @param {string} [subscriptionId]
     * @param {string} [requestedDate]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getProductForSubscriptionAndDate: (subscriptionId?: string, requestedDate?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Upload the full catalog as XML
     * @param {string} body
     * @param {string} xKillbillCreatedBy
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    uploadCatalogXml: (body: string, xKillbillCreatedBy: string, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Validate a XML catalog
     * @param {string} body
     * @param {string} xKillbillCreatedBy
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    validateCatalogXml: (body: string, xKillbillCreatedBy: string, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * CatalogApi - functional programming interface
 * @export
 */
export declare const CatalogApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary Add a simple plan entry in the current version of the catalog
     * @param {SimplePlan} body
     * @param {string} xKillbillCreatedBy
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addSimplePlan(body: SimplePlan, xKillbillCreatedBy: string, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>>;
    /**
     *
     * @summary Delete all versions for a per tenant catalog
     * @param {string} xKillbillCreatedBy
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteCatalog(xKillbillCreatedBy: string, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary Retrieve available add-ons for a given product
     * @param {string} [baseProductName]
     * @param {string} [priceListName]
     * @param {string} [accountId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAvailableAddons(baseProductName?: string, priceListName?: string, accountId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<PlanDetail>>>;
    /**
     *
     * @summary Retrieve available base plans
     * @param {string} [accountId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAvailableBasePlans(accountId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<PlanDetail>>>;
    /**
     *
     * @summary Retrieve the catalog as JSON
     * @param {string} [requestedDate]
     * @param {string} [accountId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCatalogJson(requestedDate?: string, accountId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Catalog>>>;
    /**
     *
     * @summary Retrieve a list of catalog versions
     * @param {string} [accountId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCatalogVersions(accountId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<string>>>;
    /**
     *
     * @summary Retrieve the full catalog as XML
     * @param {string} [requestedDate]
     * @param {string} [accountId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCatalogXml(requestedDate?: string, accountId?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>>;
    /**
     *
     * @summary Retrieve phase for a given subscription and date
     * @param {string} [subscriptionId]
     * @param {string} [requestedDate]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPhaseForSubscriptionAndDate(subscriptionId?: string, requestedDate?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Phase>>;
    /**
     *
     * @summary Retrieve plan for a given subscription and date
     * @param {string} [subscriptionId]
     * @param {string} [requestedDate]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPlanForSubscriptionAndDate(subscriptionId?: string, requestedDate?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Plan>>;
    /**
     *
     * @summary Retrieve priceList for a given subscription and date
     * @param {string} [subscriptionId]
     * @param {string} [requestedDate]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPriceListForSubscriptionAndDate(subscriptionId?: string, requestedDate?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PriceList>>;
    /**
     *
     * @summary Retrieve product for a given subscription and date
     * @param {string} [subscriptionId]
     * @param {string} [requestedDate]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getProductForSubscriptionAndDate(subscriptionId?: string, requestedDate?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Product>>;
    /**
     *
     * @summary Upload the full catalog as XML
     * @param {string} body
     * @param {string} xKillbillCreatedBy
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    uploadCatalogXml(body: string, xKillbillCreatedBy: string, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>>;
    /**
     *
     * @summary Validate a XML catalog
     * @param {string} body
     * @param {string} xKillbillCreatedBy
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    validateCatalogXml(body: string, xKillbillCreatedBy: string, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CatalogValidation>>;
};
/**
 * CatalogApi - factory interface
 * @export
 */
export declare const CatalogApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Add a simple plan entry in the current version of the catalog
     * @param {SimplePlan} body
     * @param {string} xKillbillCreatedBy
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addSimplePlan(body: SimplePlan, xKillbillCreatedBy: string, xKillbillReason?: string, xKillbillComment?: string, options?: any): AxiosPromise<string>;
    /**
     *
     * @summary Delete all versions for a per tenant catalog
     * @param {string} xKillbillCreatedBy
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteCatalog(xKillbillCreatedBy: string, xKillbillReason?: string, xKillbillComment?: string, options?: any): AxiosPromise<void>;
    /**
     *
     * @summary Retrieve available add-ons for a given product
     * @param {string} [baseProductName]
     * @param {string} [priceListName]
     * @param {string} [accountId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAvailableAddons(baseProductName?: string, priceListName?: string, accountId?: string, options?: any): AxiosPromise<Array<PlanDetail>>;
    /**
     *
     * @summary Retrieve available base plans
     * @param {string} [accountId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAvailableBasePlans(accountId?: string, options?: any): AxiosPromise<Array<PlanDetail>>;
    /**
     *
     * @summary Retrieve the catalog as JSON
     * @param {string} [requestedDate]
     * @param {string} [accountId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCatalogJson(requestedDate?: string, accountId?: string, options?: any): AxiosPromise<Array<Catalog>>;
    /**
     *
     * @summary Retrieve a list of catalog versions
     * @param {string} [accountId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCatalogVersions(accountId?: string, options?: any): AxiosPromise<Array<string>>;
    /**
     *
     * @summary Retrieve the full catalog as XML
     * @param {string} [requestedDate]
     * @param {string} [accountId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCatalogXml(requestedDate?: string, accountId?: string, options?: any): AxiosPromise<string>;
    /**
     *
     * @summary Retrieve phase for a given subscription and date
     * @param {string} [subscriptionId]
     * @param {string} [requestedDate]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPhaseForSubscriptionAndDate(subscriptionId?: string, requestedDate?: string, options?: any): AxiosPromise<Phase>;
    /**
     *
     * @summary Retrieve plan for a given subscription and date
     * @param {string} [subscriptionId]
     * @param {string} [requestedDate]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPlanForSubscriptionAndDate(subscriptionId?: string, requestedDate?: string, options?: any): AxiosPromise<Plan>;
    /**
     *
     * @summary Retrieve priceList for a given subscription and date
     * @param {string} [subscriptionId]
     * @param {string} [requestedDate]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPriceListForSubscriptionAndDate(subscriptionId?: string, requestedDate?: string, options?: any): AxiosPromise<PriceList>;
    /**
     *
     * @summary Retrieve product for a given subscription and date
     * @param {string} [subscriptionId]
     * @param {string} [requestedDate]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getProductForSubscriptionAndDate(subscriptionId?: string, requestedDate?: string, options?: any): AxiosPromise<Product>;
    /**
     *
     * @summary Upload the full catalog as XML
     * @param {string} body
     * @param {string} xKillbillCreatedBy
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    uploadCatalogXml(body: string, xKillbillCreatedBy: string, xKillbillReason?: string, xKillbillComment?: string, options?: any): AxiosPromise<string>;
    /**
     *
     * @summary Validate a XML catalog
     * @param {string} body
     * @param {string} xKillbillCreatedBy
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    validateCatalogXml(body: string, xKillbillCreatedBy: string, xKillbillReason?: string, xKillbillComment?: string, options?: any): AxiosPromise<CatalogValidation>;
};
/**
 * CatalogApi - object-oriented interface
 * @export
 * @class CatalogApi
 * @extends {BaseAPI}
 */
export declare class CatalogApi extends BaseAPI {
    /**
     *
     * @summary Add a simple plan entry in the current version of the catalog
     * @param {SimplePlan} body
     * @param {string} xKillbillCreatedBy
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CatalogApi
     */
    addSimplePlan(body: SimplePlan, xKillbillCreatedBy: string, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<string, any>>;
    /**
     *
     * @summary Delete all versions for a per tenant catalog
     * @param {string} xKillbillCreatedBy
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CatalogApi
     */
    deleteCatalog(xKillbillCreatedBy: string, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     *
     * @summary Retrieve available add-ons for a given product
     * @param {string} [baseProductName]
     * @param {string} [priceListName]
     * @param {string} [accountId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CatalogApi
     */
    getAvailableAddons(baseProductName?: string, priceListName?: string, accountId?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<PlanDetail[], any>>;
    /**
     *
     * @summary Retrieve available base plans
     * @param {string} [accountId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CatalogApi
     */
    getAvailableBasePlans(accountId?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<PlanDetail[], any>>;
    /**
     *
     * @summary Retrieve the catalog as JSON
     * @param {string} [requestedDate]
     * @param {string} [accountId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CatalogApi
     */
    getCatalogJson(requestedDate?: string, accountId?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Catalog[], any>>;
    /**
     *
     * @summary Retrieve a list of catalog versions
     * @param {string} [accountId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CatalogApi
     */
    getCatalogVersions(accountId?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<string[], any>>;
    /**
     *
     * @summary Retrieve the full catalog as XML
     * @param {string} [requestedDate]
     * @param {string} [accountId]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CatalogApi
     */
    getCatalogXml(requestedDate?: string, accountId?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<string, any>>;
    /**
     *
     * @summary Retrieve phase for a given subscription and date
     * @param {string} [subscriptionId]
     * @param {string} [requestedDate]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CatalogApi
     */
    getPhaseForSubscriptionAndDate(subscriptionId?: string, requestedDate?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Phase, any>>;
    /**
     *
     * @summary Retrieve plan for a given subscription and date
     * @param {string} [subscriptionId]
     * @param {string} [requestedDate]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CatalogApi
     */
    getPlanForSubscriptionAndDate(subscriptionId?: string, requestedDate?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Plan, any>>;
    /**
     *
     * @summary Retrieve priceList for a given subscription and date
     * @param {string} [subscriptionId]
     * @param {string} [requestedDate]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CatalogApi
     */
    getPriceListForSubscriptionAndDate(subscriptionId?: string, requestedDate?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<PriceList, any>>;
    /**
     *
     * @summary Retrieve product for a given subscription and date
     * @param {string} [subscriptionId]
     * @param {string} [requestedDate]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CatalogApi
     */
    getProductForSubscriptionAndDate(subscriptionId?: string, requestedDate?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Product, any>>;
    /**
     *
     * @summary Upload the full catalog as XML
     * @param {string} body
     * @param {string} xKillbillCreatedBy
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CatalogApi
     */
    uploadCatalogXml(body: string, xKillbillCreatedBy: string, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<string, any>>;
    /**
     *
     * @summary Validate a XML catalog
     * @param {string} body
     * @param {string} xKillbillCreatedBy
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CatalogApi
     */
    validateCatalogXml(body: string, xKillbillCreatedBy: string, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<CatalogValidation, any>>;
}
/**
 * CreditApi - axios parameter creator
 * @export
 */
export declare const CreditApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Create a credit
     * @param {Array<InvoiceItem>} body
     * @param {string} xKillbillCreatedBy
     * @param {boolean} [autoCommit]
     * @param {Array<string>} [pluginProperty]
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createCredits: (body: Array<InvoiceItem>, xKillbillCreatedBy: string, autoCommit?: boolean, pluginProperty?: Array<string>, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Retrieve a credit by id
     * @param {string} creditId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCredit: (creditId: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * CreditApi - functional programming interface
 * @export
 */
export declare const CreditApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary Create a credit
     * @param {Array<InvoiceItem>} body
     * @param {string} xKillbillCreatedBy
     * @param {boolean} [autoCommit]
     * @param {Array<string>} [pluginProperty]
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createCredits(body: Array<InvoiceItem>, xKillbillCreatedBy: string, autoCommit?: boolean, pluginProperty?: Array<string>, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<InvoiceItem>>>;
    /**
     *
     * @summary Retrieve a credit by id
     * @param {string} creditId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCredit(creditId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InvoiceItem>>;
};
/**
 * CreditApi - factory interface
 * @export
 */
export declare const CreditApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Create a credit
     * @param {Array<InvoiceItem>} body
     * @param {string} xKillbillCreatedBy
     * @param {boolean} [autoCommit]
     * @param {Array<string>} [pluginProperty]
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createCredits(body: Array<InvoiceItem>, xKillbillCreatedBy: string, autoCommit?: boolean, pluginProperty?: Array<string>, xKillbillReason?: string, xKillbillComment?: string, options?: any): AxiosPromise<Array<InvoiceItem>>;
    /**
     *
     * @summary Retrieve a credit by id
     * @param {string} creditId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCredit(creditId: string, options?: any): AxiosPromise<InvoiceItem>;
};
/**
 * CreditApi - object-oriented interface
 * @export
 * @class CreditApi
 * @extends {BaseAPI}
 */
export declare class CreditApi extends BaseAPI {
    /**
     *
     * @summary Create a credit
     * @param {Array<InvoiceItem>} body
     * @param {string} xKillbillCreatedBy
     * @param {boolean} [autoCommit]
     * @param {Array<string>} [pluginProperty]
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CreditApi
     */
    createCredits(body: Array<InvoiceItem>, xKillbillCreatedBy: string, autoCommit?: boolean, pluginProperty?: Array<string>, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<InvoiceItem[], any>>;
    /**
     *
     * @summary Retrieve a credit by id
     * @param {string} creditId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CreditApi
     */
    getCredit(creditId: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<InvoiceItem, any>>;
}
/**
 * CustomFieldApi - axios parameter creator
 * @export
 */
export declare const CustomFieldApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Retrieve custom field audit logs with history by id
     * @param {string} customFieldId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCustomFieldAuditLogsWithHistory: (customFieldId: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary List custom fields
     * @param {number} [offset]
     * @param {number} [limit]
     * @param {'FULL' | 'MINIMAL' | 'NONE'} [audit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCustomFields: (offset?: number, limit?: number, audit?: 'FULL' | 'MINIMAL' | 'NONE', options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Search custom fields
     * @param {string} searchKey
     * @param {number} [offset]
     * @param {number} [limit]
     * @param {'FULL' | 'MINIMAL' | 'NONE'} [audit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchCustomFields: (searchKey: string, offset?: number, limit?: number, audit?: 'FULL' | 'MINIMAL' | 'NONE', options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Search custom fields by type, name and optional value
     * @param {string} [objectType]
     * @param {string} [fieldName]
     * @param {string} [fieldValue]
     * @param {number} [offset]
     * @param {number} [limit]
     * @param {'FULL' | 'MINIMAL' | 'NONE'} [audit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchCustomFieldsByTypeName: (objectType?: string, fieldName?: string, fieldValue?: string, offset?: number, limit?: number, audit?: 'FULL' | 'MINIMAL' | 'NONE', options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * CustomFieldApi - functional programming interface
 * @export
 */
export declare const CustomFieldApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary Retrieve custom field audit logs with history by id
     * @param {string} customFieldId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCustomFieldAuditLogsWithHistory(customFieldId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<AuditLog>>>;
    /**
     *
     * @summary List custom fields
     * @param {number} [offset]
     * @param {number} [limit]
     * @param {'FULL' | 'MINIMAL' | 'NONE'} [audit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCustomFields(offset?: number, limit?: number, audit?: 'FULL' | 'MINIMAL' | 'NONE', options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CustomField>>>;
    /**
     *
     * @summary Search custom fields
     * @param {string} searchKey
     * @param {number} [offset]
     * @param {number} [limit]
     * @param {'FULL' | 'MINIMAL' | 'NONE'} [audit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchCustomFields(searchKey: string, offset?: number, limit?: number, audit?: 'FULL' | 'MINIMAL' | 'NONE', options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CustomField>>>;
    /**
     *
     * @summary Search custom fields by type, name and optional value
     * @param {string} [objectType]
     * @param {string} [fieldName]
     * @param {string} [fieldValue]
     * @param {number} [offset]
     * @param {number} [limit]
     * @param {'FULL' | 'MINIMAL' | 'NONE'} [audit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchCustomFieldsByTypeName(objectType?: string, fieldName?: string, fieldValue?: string, offset?: number, limit?: number, audit?: 'FULL' | 'MINIMAL' | 'NONE', options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CustomField>>>;
};
/**
 * CustomFieldApi - factory interface
 * @export
 */
export declare const CustomFieldApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Retrieve custom field audit logs with history by id
     * @param {string} customFieldId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCustomFieldAuditLogsWithHistory(customFieldId: string, options?: any): AxiosPromise<Array<AuditLog>>;
    /**
     *
     * @summary List custom fields
     * @param {number} [offset]
     * @param {number} [limit]
     * @param {'FULL' | 'MINIMAL' | 'NONE'} [audit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCustomFields(offset?: number, limit?: number, audit?: 'FULL' | 'MINIMAL' | 'NONE', options?: any): AxiosPromise<Array<CustomField>>;
    /**
     *
     * @summary Search custom fields
     * @param {string} searchKey
     * @param {number} [offset]
     * @param {number} [limit]
     * @param {'FULL' | 'MINIMAL' | 'NONE'} [audit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchCustomFields(searchKey: string, offset?: number, limit?: number, audit?: 'FULL' | 'MINIMAL' | 'NONE', options?: any): AxiosPromise<Array<CustomField>>;
    /**
     *
     * @summary Search custom fields by type, name and optional value
     * @param {string} [objectType]
     * @param {string} [fieldName]
     * @param {string} [fieldValue]
     * @param {number} [offset]
     * @param {number} [limit]
     * @param {'FULL' | 'MINIMAL' | 'NONE'} [audit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchCustomFieldsByTypeName(objectType?: string, fieldName?: string, fieldValue?: string, offset?: number, limit?: number, audit?: 'FULL' | 'MINIMAL' | 'NONE', options?: any): AxiosPromise<Array<CustomField>>;
};
/**
 * CustomFieldApi - object-oriented interface
 * @export
 * @class CustomFieldApi
 * @extends {BaseAPI}
 */
export declare class CustomFieldApi extends BaseAPI {
    /**
     *
     * @summary Retrieve custom field audit logs with history by id
     * @param {string} customFieldId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomFieldApi
     */
    getCustomFieldAuditLogsWithHistory(customFieldId: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<AuditLog[], any>>;
    /**
     *
     * @summary List custom fields
     * @param {number} [offset]
     * @param {number} [limit]
     * @param {'FULL' | 'MINIMAL' | 'NONE'} [audit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomFieldApi
     */
    getCustomFields(offset?: number, limit?: number, audit?: 'FULL' | 'MINIMAL' | 'NONE', options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<CustomField[], any>>;
    /**
     *
     * @summary Search custom fields
     * @param {string} searchKey
     * @param {number} [offset]
     * @param {number} [limit]
     * @param {'FULL' | 'MINIMAL' | 'NONE'} [audit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomFieldApi
     */
    searchCustomFields(searchKey: string, offset?: number, limit?: number, audit?: 'FULL' | 'MINIMAL' | 'NONE', options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<CustomField[], any>>;
    /**
     *
     * @summary Search custom fields by type, name and optional value
     * @param {string} [objectType]
     * @param {string} [fieldName]
     * @param {string} [fieldValue]
     * @param {number} [offset]
     * @param {number} [limit]
     * @param {'FULL' | 'MINIMAL' | 'NONE'} [audit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CustomFieldApi
     */
    searchCustomFieldsByTypeName(objectType?: string, fieldName?: string, fieldValue?: string, offset?: number, limit?: number, audit?: 'FULL' | 'MINIMAL' | 'NONE', options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<CustomField[], any>>;
}
/**
 * ExportApi - axios parameter creator
 * @export
 */
export declare const ExportApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Export account data
     * @param {string} accountId
     * @param {string} xKillbillCreatedBy
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    exportDataForAccount: (accountId: string, xKillbillCreatedBy: string, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * ExportApi - functional programming interface
 * @export
 */
export declare const ExportApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary Export account data
     * @param {string} accountId
     * @param {string} xKillbillCreatedBy
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    exportDataForAccount(accountId: string, xKillbillCreatedBy: string, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
};
/**
 * ExportApi - factory interface
 * @export
 */
export declare const ExportApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Export account data
     * @param {string} accountId
     * @param {string} xKillbillCreatedBy
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    exportDataForAccount(accountId: string, xKillbillCreatedBy: string, xKillbillReason?: string, xKillbillComment?: string, options?: any): AxiosPromise<void>;
};
/**
 * ExportApi - object-oriented interface
 * @export
 * @class ExportApi
 * @extends {BaseAPI}
 */
export declare class ExportApi extends BaseAPI {
    /**
     *
     * @summary Export account data
     * @param {string} accountId
     * @param {string} xKillbillCreatedBy
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExportApi
     */
    exportDataForAccount(accountId: string, xKillbillCreatedBy: string, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
}
/**
 * InvoiceApi - axios parameter creator
 * @export
 */
export declare const InvoiceApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Adjust an invoice item
     * @param {InvoiceItem} body
     * @param {string} invoiceId
     * @param {string} xKillbillCreatedBy
     * @param {string} [requestedDate]
     * @param {Array<string>} [pluginProperty]
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adjustInvoiceItem: (body: InvoiceItem, invoiceId: string, xKillbillCreatedBy: string, requestedDate?: string, pluginProperty?: Array<string>, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Perform the invoice status transition from DRAFT to COMMITTED
     * @param {string} invoiceId
     * @param {string} xKillbillCreatedBy
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    commitInvoice: (invoiceId: string, xKillbillCreatedBy: string, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Create external charge(s)
     * @param {Array<InvoiceItem>} body
     * @param {string} accountId
     * @param {string} xKillbillCreatedBy
     * @param {string} [requestedDate]
     * @param {boolean} [autoCommit]
     * @param {Array<string>} [pluginProperty]
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createExternalCharges: (body: Array<InvoiceItem>, accountId: string, xKillbillCreatedBy: string, requestedDate?: string, autoCommit?: boolean, pluginProperty?: Array<string>, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Trigger an invoice generation
     * @param {string} accountId
     * @param {string} xKillbillCreatedBy
     * @param {string} [targetDate]
     * @param {Array<string>} [pluginProperty]
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createFutureInvoice: (accountId: string, xKillbillCreatedBy: string, targetDate?: string, pluginProperty?: Array<string>, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Trigger an invoice generation
     * @param {string} accountId
     * @param {string} xKillbillCreatedBy
     * @param {string} [targetDate]
     * @param {Array<string>} [pluginProperty]
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createFutureInvoiceGroup: (accountId: string, xKillbillCreatedBy: string, targetDate?: string, pluginProperty?: Array<string>, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Trigger a payment for invoice
     * @param {InvoicePayment} body
     * @param {string} invoiceId
     * @param {string} xKillbillCreatedBy
     * @param {boolean} [externalPayment]
     * @param {Array<string>} [controlPluginName]
     * @param {Array<string>} [pluginProperty]
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createInstantPayment: (body: InvoicePayment, invoiceId: string, xKillbillCreatedBy: string, externalPayment?: boolean, controlPluginName?: Array<string>, pluginProperty?: Array<string>, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Add custom fields to invoice
     * @param {Array<CustomField>} body
     * @param {string} invoiceId
     * @param {string} xKillbillCreatedBy
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createInvoiceCustomFields: (body: Array<CustomField>, invoiceId: string, xKillbillCreatedBy: string, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Add tags to invoice
     * @param {Array<string>} body
     * @param {string} invoiceId
     * @param {string} xKillbillCreatedBy
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createInvoiceTags: (body: Array<string>, invoiceId: string, xKillbillCreatedBy: string, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Create a migration invoice
     * @param {Array<InvoiceItem>} body
     * @param {string} accountId
     * @param {string} xKillbillCreatedBy
     * @param {string} [targetDate]
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createMigrationInvoice: (body: Array<InvoiceItem>, accountId: string, xKillbillCreatedBy: string, targetDate?: string, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Create tax items
     * @param {Array<InvoiceItem>} body
     * @param {string} accountId
     * @param {string} xKillbillCreatedBy
     * @param {boolean} [autoCommit]
     * @param {string} [requestedDate]
     * @param {Array<string>} [pluginProperty]
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createTaxItems: (body: Array<InvoiceItem>, accountId: string, xKillbillCreatedBy: string, autoCommit?: boolean, requestedDate?: string, pluginProperty?: Array<string>, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Delete a CBA item
     * @param {string} invoiceId
     * @param {string} invoiceItemId
     * @param {string} accountId
     * @param {string} xKillbillCreatedBy
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteCBA: (invoiceId: string, invoiceItemId: string, accountId: string, xKillbillCreatedBy: string, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Remove custom fields from invoice
     * @param {string} invoiceId
     * @param {string} xKillbillCreatedBy
     * @param {Array<string>} [customField]
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteInvoiceCustomFields: (invoiceId: string, xKillbillCreatedBy: string, customField?: Array<string>, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Remove tags from invoice
     * @param {string} invoiceId
     * @param {string} xKillbillCreatedBy
     * @param {Array<string>} [tagDef]
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteInvoiceTags: (invoiceId: string, xKillbillCreatedBy: string, tagDef?: Array<string>, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Generate a dryRun invoice
     * @param {InvoiceDryRun} body
     * @param {string} accountId
     * @param {string} xKillbillCreatedBy
     * @param {string} [targetDate]
     * @param {Array<string>} [pluginProperty]
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    generateDryRunInvoice: (body: InvoiceDryRun, accountId: string, xKillbillCreatedBy: string, targetDate?: string, pluginProperty?: Array<string>, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Retrieves the catalog translation for the tenant
     * @param {string} locale
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCatalogTranslation: (locale: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Retrieve an invoice by id
     * @param {string} invoiceId
     * @param {boolean} [withChildrenItems]
     * @param {'FULL' | 'MINIMAL' | 'NONE'} [audit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getInvoice: (invoiceId: string, withChildrenItems?: boolean, audit?: 'FULL' | 'MINIMAL' | 'NONE', options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Render an invoice as HTML
     * @param {string} invoiceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getInvoiceAsHTML: (invoiceId: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Retrieve invoice audit logs with history by id
     * @param {string} invoiceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getInvoiceAuditLogsWithHistory: (invoiceId: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Retrieve an invoice by invoice item id
     * @param {string} itemId
     * @param {boolean} [withChildrenItems]
     * @param {'FULL' | 'MINIMAL' | 'NONE'} [audit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getInvoiceByItemId: (itemId: string, withChildrenItems?: boolean, audit?: 'FULL' | 'MINIMAL' | 'NONE', options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Retrieve an invoice by number
     * @param {number} invoiceNumber
     * @param {boolean} [withChildrenItems]
     * @param {'FULL' | 'MINIMAL' | 'NONE'} [audit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getInvoiceByNumber: (invoiceNumber: number, withChildrenItems?: boolean, audit?: 'FULL' | 'MINIMAL' | 'NONE', options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Retrieve invoice custom fields
     * @param {string} invoiceId
     * @param {'FULL' | 'MINIMAL' | 'NONE'} [audit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getInvoiceCustomFields: (invoiceId: string, audit?: 'FULL' | 'MINIMAL' | 'NONE', options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Retrieves the manualPay invoice template for the tenant
     * @param {string} locale
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getInvoiceMPTemplate: (locale: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Retrieve invoice tags
     * @param {string} invoiceId
     * @param {boolean} [includedDeleted]
     * @param {'FULL' | 'MINIMAL' | 'NONE'} [audit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getInvoiceTags: (invoiceId: string, includedDeleted?: boolean, audit?: 'FULL' | 'MINIMAL' | 'NONE', options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Retrieves the invoice template for the tenant
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getInvoiceTemplate: (options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Retrieves the invoice translation for the tenant
     * @param {string} locale
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getInvoiceTranslation: (locale: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary List invoices
     * @param {number} [offset]
     * @param {number} [limit]
     * @param {'FULL' | 'MINIMAL' | 'NONE'} [audit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getInvoices: (offset?: number, limit?: number, audit?: 'FULL' | 'MINIMAL' | 'NONE', options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Retrieve a set of invoices by group id
     * @param {string} groupId
     * @param {string} accountId
     * @param {boolean} [withChildrenItems]
     * @param {'FULL' | 'MINIMAL' | 'NONE'} [audit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getInvoicesGroup: (groupId: string, accountId: string, withChildrenItems?: boolean, audit?: 'FULL' | 'MINIMAL' | 'NONE', options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Retrieve payments associated with an invoice
     * @param {string} invoiceId
     * @param {boolean} [withPluginInfo]
     * @param {boolean} [withAttempts]
     * @param {'FULL' | 'MINIMAL' | 'NONE'} [audit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPaymentsForInvoice: (invoiceId: string, withPluginInfo?: boolean, withAttempts?: boolean, audit?: 'FULL' | 'MINIMAL' | 'NONE', options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Modify custom fields to invoice
     * @param {Array<CustomField>} body
     * @param {string} invoiceId
     * @param {string} xKillbillCreatedBy
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    modifyInvoiceCustomFields: (body: Array<CustomField>, invoiceId: string, xKillbillCreatedBy: string, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Search invoices
     * @param {string} searchKey
     * @param {number} [offset]
     * @param {number} [limit]
     * @param {'FULL' | 'MINIMAL' | 'NONE'} [audit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchInvoices: (searchKey: string, offset?: number, limit?: number, audit?: 'FULL' | 'MINIMAL' | 'NONE', options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Upload the catalog translation for the tenant
     * @param {string} body
     * @param {string} locale
     * @param {string} xKillbillCreatedBy
     * @param {boolean} [deleteIfExists]
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    uploadCatalogTranslation: (body: string, locale: string, xKillbillCreatedBy: string, deleteIfExists?: boolean, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Upload the manualPay invoice template for the tenant
     * @param {string} body
     * @param {string} xKillbillCreatedBy
     * @param {boolean} [deleteIfExists]
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    uploadInvoiceMPTemplate: (body: string, xKillbillCreatedBy: string, deleteIfExists?: boolean, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Upload the invoice template for the tenant
     * @param {string} body
     * @param {string} xKillbillCreatedBy
     * @param {boolean} [deleteIfExists]
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    uploadInvoiceTemplate: (body: string, xKillbillCreatedBy: string, deleteIfExists?: boolean, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Upload the invoice translation for the tenant
     * @param {string} body
     * @param {string} locale
     * @param {string} xKillbillCreatedBy
     * @param {boolean} [deleteIfExists]
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    uploadInvoiceTranslation: (body: string, locale: string, xKillbillCreatedBy: string, deleteIfExists?: boolean, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Perform the action of voiding an invoice
     * @param {string} invoiceId
     * @param {string} xKillbillCreatedBy
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    voidInvoice: (invoiceId: string, xKillbillCreatedBy: string, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * InvoiceApi - functional programming interface
 * @export
 */
export declare const InvoiceApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary Adjust an invoice item
     * @param {InvoiceItem} body
     * @param {string} invoiceId
     * @param {string} xKillbillCreatedBy
     * @param {string} [requestedDate]
     * @param {Array<string>} [pluginProperty]
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adjustInvoiceItem(body: InvoiceItem, invoiceId: string, xKillbillCreatedBy: string, requestedDate?: string, pluginProperty?: Array<string>, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Invoice>>;
    /**
     *
     * @summary Perform the invoice status transition from DRAFT to COMMITTED
     * @param {string} invoiceId
     * @param {string} xKillbillCreatedBy
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    commitInvoice(invoiceId: string, xKillbillCreatedBy: string, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary Create external charge(s)
     * @param {Array<InvoiceItem>} body
     * @param {string} accountId
     * @param {string} xKillbillCreatedBy
     * @param {string} [requestedDate]
     * @param {boolean} [autoCommit]
     * @param {Array<string>} [pluginProperty]
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createExternalCharges(body: Array<InvoiceItem>, accountId: string, xKillbillCreatedBy: string, requestedDate?: string, autoCommit?: boolean, pluginProperty?: Array<string>, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<InvoiceItem>>>;
    /**
     *
     * @summary Trigger an invoice generation
     * @param {string} accountId
     * @param {string} xKillbillCreatedBy
     * @param {string} [targetDate]
     * @param {Array<string>} [pluginProperty]
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createFutureInvoice(accountId: string, xKillbillCreatedBy: string, targetDate?: string, pluginProperty?: Array<string>, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Invoice>>;
    /**
     *
     * @summary Trigger an invoice generation
     * @param {string} accountId
     * @param {string} xKillbillCreatedBy
     * @param {string} [targetDate]
     * @param {Array<string>} [pluginProperty]
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createFutureInvoiceGroup(accountId: string, xKillbillCreatedBy: string, targetDate?: string, pluginProperty?: Array<string>, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Invoice>>>;
    /**
     *
     * @summary Trigger a payment for invoice
     * @param {InvoicePayment} body
     * @param {string} invoiceId
     * @param {string} xKillbillCreatedBy
     * @param {boolean} [externalPayment]
     * @param {Array<string>} [controlPluginName]
     * @param {Array<string>} [pluginProperty]
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createInstantPayment(body: InvoicePayment, invoiceId: string, xKillbillCreatedBy: string, externalPayment?: boolean, controlPluginName?: Array<string>, pluginProperty?: Array<string>, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InvoicePayment>>;
    /**
     *
     * @summary Add custom fields to invoice
     * @param {Array<CustomField>} body
     * @param {string} invoiceId
     * @param {string} xKillbillCreatedBy
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createInvoiceCustomFields(body: Array<CustomField>, invoiceId: string, xKillbillCreatedBy: string, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CustomField>>>;
    /**
     *
     * @summary Add tags to invoice
     * @param {Array<string>} body
     * @param {string} invoiceId
     * @param {string} xKillbillCreatedBy
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createInvoiceTags(body: Array<string>, invoiceId: string, xKillbillCreatedBy: string, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Tag>>>;
    /**
     *
     * @summary Create a migration invoice
     * @param {Array<InvoiceItem>} body
     * @param {string} accountId
     * @param {string} xKillbillCreatedBy
     * @param {string} [targetDate]
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createMigrationInvoice(body: Array<InvoiceItem>, accountId: string, xKillbillCreatedBy: string, targetDate?: string, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Invoice>>;
    /**
     *
     * @summary Create tax items
     * @param {Array<InvoiceItem>} body
     * @param {string} accountId
     * @param {string} xKillbillCreatedBy
     * @param {boolean} [autoCommit]
     * @param {string} [requestedDate]
     * @param {Array<string>} [pluginProperty]
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createTaxItems(body: Array<InvoiceItem>, accountId: string, xKillbillCreatedBy: string, autoCommit?: boolean, requestedDate?: string, pluginProperty?: Array<string>, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<InvoiceItem>>>;
    /**
     *
     * @summary Delete a CBA item
     * @param {string} invoiceId
     * @param {string} invoiceItemId
     * @param {string} accountId
     * @param {string} xKillbillCreatedBy
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteCBA(invoiceId: string, invoiceItemId: string, accountId: string, xKillbillCreatedBy: string, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary Remove custom fields from invoice
     * @param {string} invoiceId
     * @param {string} xKillbillCreatedBy
     * @param {Array<string>} [customField]
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteInvoiceCustomFields(invoiceId: string, xKillbillCreatedBy: string, customField?: Array<string>, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary Remove tags from invoice
     * @param {string} invoiceId
     * @param {string} xKillbillCreatedBy
     * @param {Array<string>} [tagDef]
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteInvoiceTags(invoiceId: string, xKillbillCreatedBy: string, tagDef?: Array<string>, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary Generate a dryRun invoice
     * @param {InvoiceDryRun} body
     * @param {string} accountId
     * @param {string} xKillbillCreatedBy
     * @param {string} [targetDate]
     * @param {Array<string>} [pluginProperty]
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    generateDryRunInvoice(body: InvoiceDryRun, accountId: string, xKillbillCreatedBy: string, targetDate?: string, pluginProperty?: Array<string>, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Invoice>>;
    /**
     *
     * @summary Retrieves the catalog translation for the tenant
     * @param {string} locale
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCatalogTranslation(locale: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>>;
    /**
     *
     * @summary Retrieve an invoice by id
     * @param {string} invoiceId
     * @param {boolean} [withChildrenItems]
     * @param {'FULL' | 'MINIMAL' | 'NONE'} [audit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getInvoice(invoiceId: string, withChildrenItems?: boolean, audit?: 'FULL' | 'MINIMAL' | 'NONE', options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Invoice>>;
    /**
     *
     * @summary Render an invoice as HTML
     * @param {string} invoiceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getInvoiceAsHTML(invoiceId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>>;
    /**
     *
     * @summary Retrieve invoice audit logs with history by id
     * @param {string} invoiceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getInvoiceAuditLogsWithHistory(invoiceId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<AuditLog>>>;
    /**
     *
     * @summary Retrieve an invoice by invoice item id
     * @param {string} itemId
     * @param {boolean} [withChildrenItems]
     * @param {'FULL' | 'MINIMAL' | 'NONE'} [audit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getInvoiceByItemId(itemId: string, withChildrenItems?: boolean, audit?: 'FULL' | 'MINIMAL' | 'NONE', options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Invoice>>;
    /**
     *
     * @summary Retrieve an invoice by number
     * @param {number} invoiceNumber
     * @param {boolean} [withChildrenItems]
     * @param {'FULL' | 'MINIMAL' | 'NONE'} [audit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getInvoiceByNumber(invoiceNumber: number, withChildrenItems?: boolean, audit?: 'FULL' | 'MINIMAL' | 'NONE', options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Invoice>>;
    /**
     *
     * @summary Retrieve invoice custom fields
     * @param {string} invoiceId
     * @param {'FULL' | 'MINIMAL' | 'NONE'} [audit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getInvoiceCustomFields(invoiceId: string, audit?: 'FULL' | 'MINIMAL' | 'NONE', options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CustomField>>>;
    /**
     *
     * @summary Retrieves the manualPay invoice template for the tenant
     * @param {string} locale
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getInvoiceMPTemplate(locale: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>>;
    /**
     *
     * @summary Retrieve invoice tags
     * @param {string} invoiceId
     * @param {boolean} [includedDeleted]
     * @param {'FULL' | 'MINIMAL' | 'NONE'} [audit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getInvoiceTags(invoiceId: string, includedDeleted?: boolean, audit?: 'FULL' | 'MINIMAL' | 'NONE', options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Tag>>>;
    /**
     *
     * @summary Retrieves the invoice template for the tenant
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getInvoiceTemplate(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>>;
    /**
     *
     * @summary Retrieves the invoice translation for the tenant
     * @param {string} locale
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getInvoiceTranslation(locale: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>>;
    /**
     *
     * @summary List invoices
     * @param {number} [offset]
     * @param {number} [limit]
     * @param {'FULL' | 'MINIMAL' | 'NONE'} [audit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getInvoices(offset?: number, limit?: number, audit?: 'FULL' | 'MINIMAL' | 'NONE', options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Invoice>>>;
    /**
     *
     * @summary Retrieve a set of invoices by group id
     * @param {string} groupId
     * @param {string} accountId
     * @param {boolean} [withChildrenItems]
     * @param {'FULL' | 'MINIMAL' | 'NONE'} [audit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getInvoicesGroup(groupId: string, accountId: string, withChildrenItems?: boolean, audit?: 'FULL' | 'MINIMAL' | 'NONE', options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Invoice>>>;
    /**
     *
     * @summary Retrieve payments associated with an invoice
     * @param {string} invoiceId
     * @param {boolean} [withPluginInfo]
     * @param {boolean} [withAttempts]
     * @param {'FULL' | 'MINIMAL' | 'NONE'} [audit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPaymentsForInvoice(invoiceId: string, withPluginInfo?: boolean, withAttempts?: boolean, audit?: 'FULL' | 'MINIMAL' | 'NONE', options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<InvoicePayment>>>;
    /**
     *
     * @summary Modify custom fields to invoice
     * @param {Array<CustomField>} body
     * @param {string} invoiceId
     * @param {string} xKillbillCreatedBy
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    modifyInvoiceCustomFields(body: Array<CustomField>, invoiceId: string, xKillbillCreatedBy: string, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary Search invoices
     * @param {string} searchKey
     * @param {number} [offset]
     * @param {number} [limit]
     * @param {'FULL' | 'MINIMAL' | 'NONE'} [audit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchInvoices(searchKey: string, offset?: number, limit?: number, audit?: 'FULL' | 'MINIMAL' | 'NONE', options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Invoice>>>;
    /**
     *
     * @summary Upload the catalog translation for the tenant
     * @param {string} body
     * @param {string} locale
     * @param {string} xKillbillCreatedBy
     * @param {boolean} [deleteIfExists]
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    uploadCatalogTranslation(body: string, locale: string, xKillbillCreatedBy: string, deleteIfExists?: boolean, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>>;
    /**
     *
     * @summary Upload the manualPay invoice template for the tenant
     * @param {string} body
     * @param {string} xKillbillCreatedBy
     * @param {boolean} [deleteIfExists]
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    uploadInvoiceMPTemplate(body: string, xKillbillCreatedBy: string, deleteIfExists?: boolean, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>>;
    /**
     *
     * @summary Upload the invoice template for the tenant
     * @param {string} body
     * @param {string} xKillbillCreatedBy
     * @param {boolean} [deleteIfExists]
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    uploadInvoiceTemplate(body: string, xKillbillCreatedBy: string, deleteIfExists?: boolean, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>>;
    /**
     *
     * @summary Upload the invoice translation for the tenant
     * @param {string} body
     * @param {string} locale
     * @param {string} xKillbillCreatedBy
     * @param {boolean} [deleteIfExists]
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    uploadInvoiceTranslation(body: string, locale: string, xKillbillCreatedBy: string, deleteIfExists?: boolean, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>>;
    /**
     *
     * @summary Perform the action of voiding an invoice
     * @param {string} invoiceId
     * @param {string} xKillbillCreatedBy
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    voidInvoice(invoiceId: string, xKillbillCreatedBy: string, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
};
/**
 * InvoiceApi - factory interface
 * @export
 */
export declare const InvoiceApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Adjust an invoice item
     * @param {InvoiceItem} body
     * @param {string} invoiceId
     * @param {string} xKillbillCreatedBy
     * @param {string} [requestedDate]
     * @param {Array<string>} [pluginProperty]
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    adjustInvoiceItem(body: InvoiceItem, invoiceId: string, xKillbillCreatedBy: string, requestedDate?: string, pluginProperty?: Array<string>, xKillbillReason?: string, xKillbillComment?: string, options?: any): AxiosPromise<Invoice>;
    /**
     *
     * @summary Perform the invoice status transition from DRAFT to COMMITTED
     * @param {string} invoiceId
     * @param {string} xKillbillCreatedBy
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    commitInvoice(invoiceId: string, xKillbillCreatedBy: string, xKillbillReason?: string, xKillbillComment?: string, options?: any): AxiosPromise<void>;
    /**
     *
     * @summary Create external charge(s)
     * @param {Array<InvoiceItem>} body
     * @param {string} accountId
     * @param {string} xKillbillCreatedBy
     * @param {string} [requestedDate]
     * @param {boolean} [autoCommit]
     * @param {Array<string>} [pluginProperty]
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createExternalCharges(body: Array<InvoiceItem>, accountId: string, xKillbillCreatedBy: string, requestedDate?: string, autoCommit?: boolean, pluginProperty?: Array<string>, xKillbillReason?: string, xKillbillComment?: string, options?: any): AxiosPromise<Array<InvoiceItem>>;
    /**
     *
     * @summary Trigger an invoice generation
     * @param {string} accountId
     * @param {string} xKillbillCreatedBy
     * @param {string} [targetDate]
     * @param {Array<string>} [pluginProperty]
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createFutureInvoice(accountId: string, xKillbillCreatedBy: string, targetDate?: string, pluginProperty?: Array<string>, xKillbillReason?: string, xKillbillComment?: string, options?: any): AxiosPromise<Invoice>;
    /**
     *
     * @summary Trigger an invoice generation
     * @param {string} accountId
     * @param {string} xKillbillCreatedBy
     * @param {string} [targetDate]
     * @param {Array<string>} [pluginProperty]
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createFutureInvoiceGroup(accountId: string, xKillbillCreatedBy: string, targetDate?: string, pluginProperty?: Array<string>, xKillbillReason?: string, xKillbillComment?: string, options?: any): AxiosPromise<Array<Invoice>>;
    /**
     *
     * @summary Trigger a payment for invoice
     * @param {InvoicePayment} body
     * @param {string} invoiceId
     * @param {string} xKillbillCreatedBy
     * @param {boolean} [externalPayment]
     * @param {Array<string>} [controlPluginName]
     * @param {Array<string>} [pluginProperty]
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createInstantPayment(body: InvoicePayment, invoiceId: string, xKillbillCreatedBy: string, externalPayment?: boolean, controlPluginName?: Array<string>, pluginProperty?: Array<string>, xKillbillReason?: string, xKillbillComment?: string, options?: any): AxiosPromise<InvoicePayment>;
    /**
     *
     * @summary Add custom fields to invoice
     * @param {Array<CustomField>} body
     * @param {string} invoiceId
     * @param {string} xKillbillCreatedBy
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createInvoiceCustomFields(body: Array<CustomField>, invoiceId: string, xKillbillCreatedBy: string, xKillbillReason?: string, xKillbillComment?: string, options?: any): AxiosPromise<Array<CustomField>>;
    /**
     *
     * @summary Add tags to invoice
     * @param {Array<string>} body
     * @param {string} invoiceId
     * @param {string} xKillbillCreatedBy
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createInvoiceTags(body: Array<string>, invoiceId: string, xKillbillCreatedBy: string, xKillbillReason?: string, xKillbillComment?: string, options?: any): AxiosPromise<Array<Tag>>;
    /**
     *
     * @summary Create a migration invoice
     * @param {Array<InvoiceItem>} body
     * @param {string} accountId
     * @param {string} xKillbillCreatedBy
     * @param {string} [targetDate]
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createMigrationInvoice(body: Array<InvoiceItem>, accountId: string, xKillbillCreatedBy: string, targetDate?: string, xKillbillReason?: string, xKillbillComment?: string, options?: any): AxiosPromise<Invoice>;
    /**
     *
     * @summary Create tax items
     * @param {Array<InvoiceItem>} body
     * @param {string} accountId
     * @param {string} xKillbillCreatedBy
     * @param {boolean} [autoCommit]
     * @param {string} [requestedDate]
     * @param {Array<string>} [pluginProperty]
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createTaxItems(body: Array<InvoiceItem>, accountId: string, xKillbillCreatedBy: string, autoCommit?: boolean, requestedDate?: string, pluginProperty?: Array<string>, xKillbillReason?: string, xKillbillComment?: string, options?: any): AxiosPromise<Array<InvoiceItem>>;
    /**
     *
     * @summary Delete a CBA item
     * @param {string} invoiceId
     * @param {string} invoiceItemId
     * @param {string} accountId
     * @param {string} xKillbillCreatedBy
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteCBA(invoiceId: string, invoiceItemId: string, accountId: string, xKillbillCreatedBy: string, xKillbillReason?: string, xKillbillComment?: string, options?: any): AxiosPromise<void>;
    /**
     *
     * @summary Remove custom fields from invoice
     * @param {string} invoiceId
     * @param {string} xKillbillCreatedBy
     * @param {Array<string>} [customField]
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteInvoiceCustomFields(invoiceId: string, xKillbillCreatedBy: string, customField?: Array<string>, xKillbillReason?: string, xKillbillComment?: string, options?: any): AxiosPromise<void>;
    /**
     *
     * @summary Remove tags from invoice
     * @param {string} invoiceId
     * @param {string} xKillbillCreatedBy
     * @param {Array<string>} [tagDef]
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteInvoiceTags(invoiceId: string, xKillbillCreatedBy: string, tagDef?: Array<string>, xKillbillReason?: string, xKillbillComment?: string, options?: any): AxiosPromise<void>;
    /**
     *
     * @summary Generate a dryRun invoice
     * @param {InvoiceDryRun} body
     * @param {string} accountId
     * @param {string} xKillbillCreatedBy
     * @param {string} [targetDate]
     * @param {Array<string>} [pluginProperty]
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    generateDryRunInvoice(body: InvoiceDryRun, accountId: string, xKillbillCreatedBy: string, targetDate?: string, pluginProperty?: Array<string>, xKillbillReason?: string, xKillbillComment?: string, options?: any): AxiosPromise<Invoice>;
    /**
     *
     * @summary Retrieves the catalog translation for the tenant
     * @param {string} locale
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCatalogTranslation(locale: string, options?: any): AxiosPromise<string>;
    /**
     *
     * @summary Retrieve an invoice by id
     * @param {string} invoiceId
     * @param {boolean} [withChildrenItems]
     * @param {'FULL' | 'MINIMAL' | 'NONE'} [audit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getInvoice(invoiceId: string, withChildrenItems?: boolean, audit?: 'FULL' | 'MINIMAL' | 'NONE', options?: any): AxiosPromise<Invoice>;
    /**
     *
     * @summary Render an invoice as HTML
     * @param {string} invoiceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getInvoiceAsHTML(invoiceId: string, options?: any): AxiosPromise<string>;
    /**
     *
     * @summary Retrieve invoice audit logs with history by id
     * @param {string} invoiceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getInvoiceAuditLogsWithHistory(invoiceId: string, options?: any): AxiosPromise<Array<AuditLog>>;
    /**
     *
     * @summary Retrieve an invoice by invoice item id
     * @param {string} itemId
     * @param {boolean} [withChildrenItems]
     * @param {'FULL' | 'MINIMAL' | 'NONE'} [audit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getInvoiceByItemId(itemId: string, withChildrenItems?: boolean, audit?: 'FULL' | 'MINIMAL' | 'NONE', options?: any): AxiosPromise<Invoice>;
    /**
     *
     * @summary Retrieve an invoice by number
     * @param {number} invoiceNumber
     * @param {boolean} [withChildrenItems]
     * @param {'FULL' | 'MINIMAL' | 'NONE'} [audit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getInvoiceByNumber(invoiceNumber: number, withChildrenItems?: boolean, audit?: 'FULL' | 'MINIMAL' | 'NONE', options?: any): AxiosPromise<Invoice>;
    /**
     *
     * @summary Retrieve invoice custom fields
     * @param {string} invoiceId
     * @param {'FULL' | 'MINIMAL' | 'NONE'} [audit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getInvoiceCustomFields(invoiceId: string, audit?: 'FULL' | 'MINIMAL' | 'NONE', options?: any): AxiosPromise<Array<CustomField>>;
    /**
     *
     * @summary Retrieves the manualPay invoice template for the tenant
     * @param {string} locale
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getInvoiceMPTemplate(locale: string, options?: any): AxiosPromise<string>;
    /**
     *
     * @summary Retrieve invoice tags
     * @param {string} invoiceId
     * @param {boolean} [includedDeleted]
     * @param {'FULL' | 'MINIMAL' | 'NONE'} [audit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getInvoiceTags(invoiceId: string, includedDeleted?: boolean, audit?: 'FULL' | 'MINIMAL' | 'NONE', options?: any): AxiosPromise<Array<Tag>>;
    /**
     *
     * @summary Retrieves the invoice template for the tenant
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getInvoiceTemplate(options?: any): AxiosPromise<string>;
    /**
     *
     * @summary Retrieves the invoice translation for the tenant
     * @param {string} locale
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getInvoiceTranslation(locale: string, options?: any): AxiosPromise<string>;
    /**
     *
     * @summary List invoices
     * @param {number} [offset]
     * @param {number} [limit]
     * @param {'FULL' | 'MINIMAL' | 'NONE'} [audit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getInvoices(offset?: number, limit?: number, audit?: 'FULL' | 'MINIMAL' | 'NONE', options?: any): AxiosPromise<Array<Invoice>>;
    /**
     *
     * @summary Retrieve a set of invoices by group id
     * @param {string} groupId
     * @param {string} accountId
     * @param {boolean} [withChildrenItems]
     * @param {'FULL' | 'MINIMAL' | 'NONE'} [audit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getInvoicesGroup(groupId: string, accountId: string, withChildrenItems?: boolean, audit?: 'FULL' | 'MINIMAL' | 'NONE', options?: any): AxiosPromise<Array<Invoice>>;
    /**
     *
     * @summary Retrieve payments associated with an invoice
     * @param {string} invoiceId
     * @param {boolean} [withPluginInfo]
     * @param {boolean} [withAttempts]
     * @param {'FULL' | 'MINIMAL' | 'NONE'} [audit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPaymentsForInvoice(invoiceId: string, withPluginInfo?: boolean, withAttempts?: boolean, audit?: 'FULL' | 'MINIMAL' | 'NONE', options?: any): AxiosPromise<Array<InvoicePayment>>;
    /**
     *
     * @summary Modify custom fields to invoice
     * @param {Array<CustomField>} body
     * @param {string} invoiceId
     * @param {string} xKillbillCreatedBy
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    modifyInvoiceCustomFields(body: Array<CustomField>, invoiceId: string, xKillbillCreatedBy: string, xKillbillReason?: string, xKillbillComment?: string, options?: any): AxiosPromise<void>;
    /**
     *
     * @summary Search invoices
     * @param {string} searchKey
     * @param {number} [offset]
     * @param {number} [limit]
     * @param {'FULL' | 'MINIMAL' | 'NONE'} [audit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchInvoices(searchKey: string, offset?: number, limit?: number, audit?: 'FULL' | 'MINIMAL' | 'NONE', options?: any): AxiosPromise<Array<Invoice>>;
    /**
     *
     * @summary Upload the catalog translation for the tenant
     * @param {string} body
     * @param {string} locale
     * @param {string} xKillbillCreatedBy
     * @param {boolean} [deleteIfExists]
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    uploadCatalogTranslation(body: string, locale: string, xKillbillCreatedBy: string, deleteIfExists?: boolean, xKillbillReason?: string, xKillbillComment?: string, options?: any): AxiosPromise<string>;
    /**
     *
     * @summary Upload the manualPay invoice template for the tenant
     * @param {string} body
     * @param {string} xKillbillCreatedBy
     * @param {boolean} [deleteIfExists]
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    uploadInvoiceMPTemplate(body: string, xKillbillCreatedBy: string, deleteIfExists?: boolean, xKillbillReason?: string, xKillbillComment?: string, options?: any): AxiosPromise<string>;
    /**
     *
     * @summary Upload the invoice template for the tenant
     * @param {string} body
     * @param {string} xKillbillCreatedBy
     * @param {boolean} [deleteIfExists]
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    uploadInvoiceTemplate(body: string, xKillbillCreatedBy: string, deleteIfExists?: boolean, xKillbillReason?: string, xKillbillComment?: string, options?: any): AxiosPromise<string>;
    /**
     *
     * @summary Upload the invoice translation for the tenant
     * @param {string} body
     * @param {string} locale
     * @param {string} xKillbillCreatedBy
     * @param {boolean} [deleteIfExists]
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    uploadInvoiceTranslation(body: string, locale: string, xKillbillCreatedBy: string, deleteIfExists?: boolean, xKillbillReason?: string, xKillbillComment?: string, options?: any): AxiosPromise<string>;
    /**
     *
     * @summary Perform the action of voiding an invoice
     * @param {string} invoiceId
     * @param {string} xKillbillCreatedBy
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    voidInvoice(invoiceId: string, xKillbillCreatedBy: string, xKillbillReason?: string, xKillbillComment?: string, options?: any): AxiosPromise<void>;
};
/**
 * InvoiceApi - object-oriented interface
 * @export
 * @class InvoiceApi
 * @extends {BaseAPI}
 */
export declare class InvoiceApi extends BaseAPI {
    /**
     *
     * @summary Adjust an invoice item
     * @param {InvoiceItem} body
     * @param {string} invoiceId
     * @param {string} xKillbillCreatedBy
     * @param {string} [requestedDate]
     * @param {Array<string>} [pluginProperty]
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InvoiceApi
     */
    adjustInvoiceItem(body: InvoiceItem, invoiceId: string, xKillbillCreatedBy: string, requestedDate?: string, pluginProperty?: Array<string>, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Invoice, any>>;
    /**
     *
     * @summary Perform the invoice status transition from DRAFT to COMMITTED
     * @param {string} invoiceId
     * @param {string} xKillbillCreatedBy
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InvoiceApi
     */
    commitInvoice(invoiceId: string, xKillbillCreatedBy: string, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     *
     * @summary Create external charge(s)
     * @param {Array<InvoiceItem>} body
     * @param {string} accountId
     * @param {string} xKillbillCreatedBy
     * @param {string} [requestedDate]
     * @param {boolean} [autoCommit]
     * @param {Array<string>} [pluginProperty]
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InvoiceApi
     */
    createExternalCharges(body: Array<InvoiceItem>, accountId: string, xKillbillCreatedBy: string, requestedDate?: string, autoCommit?: boolean, pluginProperty?: Array<string>, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<InvoiceItem[], any>>;
    /**
     *
     * @summary Trigger an invoice generation
     * @param {string} accountId
     * @param {string} xKillbillCreatedBy
     * @param {string} [targetDate]
     * @param {Array<string>} [pluginProperty]
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InvoiceApi
     */
    createFutureInvoice(accountId: string, xKillbillCreatedBy: string, targetDate?: string, pluginProperty?: Array<string>, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Invoice, any>>;
    /**
     *
     * @summary Trigger an invoice generation
     * @param {string} accountId
     * @param {string} xKillbillCreatedBy
     * @param {string} [targetDate]
     * @param {Array<string>} [pluginProperty]
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InvoiceApi
     */
    createFutureInvoiceGroup(accountId: string, xKillbillCreatedBy: string, targetDate?: string, pluginProperty?: Array<string>, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Invoice[], any>>;
    /**
     *
     * @summary Trigger a payment for invoice
     * @param {InvoicePayment} body
     * @param {string} invoiceId
     * @param {string} xKillbillCreatedBy
     * @param {boolean} [externalPayment]
     * @param {Array<string>} [controlPluginName]
     * @param {Array<string>} [pluginProperty]
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InvoiceApi
     */
    createInstantPayment(body: InvoicePayment, invoiceId: string, xKillbillCreatedBy: string, externalPayment?: boolean, controlPluginName?: Array<string>, pluginProperty?: Array<string>, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<InvoicePayment, any>>;
    /**
     *
     * @summary Add custom fields to invoice
     * @param {Array<CustomField>} body
     * @param {string} invoiceId
     * @param {string} xKillbillCreatedBy
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InvoiceApi
     */
    createInvoiceCustomFields(body: Array<CustomField>, invoiceId: string, xKillbillCreatedBy: string, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<CustomField[], any>>;
    /**
     *
     * @summary Add tags to invoice
     * @param {Array<string>} body
     * @param {string} invoiceId
     * @param {string} xKillbillCreatedBy
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InvoiceApi
     */
    createInvoiceTags(body: Array<string>, invoiceId: string, xKillbillCreatedBy: string, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Tag[], any>>;
    /**
     *
     * @summary Create a migration invoice
     * @param {Array<InvoiceItem>} body
     * @param {string} accountId
     * @param {string} xKillbillCreatedBy
     * @param {string} [targetDate]
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InvoiceApi
     */
    createMigrationInvoice(body: Array<InvoiceItem>, accountId: string, xKillbillCreatedBy: string, targetDate?: string, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Invoice, any>>;
    /**
     *
     * @summary Create tax items
     * @param {Array<InvoiceItem>} body
     * @param {string} accountId
     * @param {string} xKillbillCreatedBy
     * @param {boolean} [autoCommit]
     * @param {string} [requestedDate]
     * @param {Array<string>} [pluginProperty]
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InvoiceApi
     */
    createTaxItems(body: Array<InvoiceItem>, accountId: string, xKillbillCreatedBy: string, autoCommit?: boolean, requestedDate?: string, pluginProperty?: Array<string>, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<InvoiceItem[], any>>;
    /**
     *
     * @summary Delete a CBA item
     * @param {string} invoiceId
     * @param {string} invoiceItemId
     * @param {string} accountId
     * @param {string} xKillbillCreatedBy
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InvoiceApi
     */
    deleteCBA(invoiceId: string, invoiceItemId: string, accountId: string, xKillbillCreatedBy: string, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     *
     * @summary Remove custom fields from invoice
     * @param {string} invoiceId
     * @param {string} xKillbillCreatedBy
     * @param {Array<string>} [customField]
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InvoiceApi
     */
    deleteInvoiceCustomFields(invoiceId: string, xKillbillCreatedBy: string, customField?: Array<string>, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     *
     * @summary Remove tags from invoice
     * @param {string} invoiceId
     * @param {string} xKillbillCreatedBy
     * @param {Array<string>} [tagDef]
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InvoiceApi
     */
    deleteInvoiceTags(invoiceId: string, xKillbillCreatedBy: string, tagDef?: Array<string>, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     *
     * @summary Generate a dryRun invoice
     * @param {InvoiceDryRun} body
     * @param {string} accountId
     * @param {string} xKillbillCreatedBy
     * @param {string} [targetDate]
     * @param {Array<string>} [pluginProperty]
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InvoiceApi
     */
    generateDryRunInvoice(body: InvoiceDryRun, accountId: string, xKillbillCreatedBy: string, targetDate?: string, pluginProperty?: Array<string>, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Invoice, any>>;
    /**
     *
     * @summary Retrieves the catalog translation for the tenant
     * @param {string} locale
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InvoiceApi
     */
    getCatalogTranslation(locale: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<string, any>>;
    /**
     *
     * @summary Retrieve an invoice by id
     * @param {string} invoiceId
     * @param {boolean} [withChildrenItems]
     * @param {'FULL' | 'MINIMAL' | 'NONE'} [audit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InvoiceApi
     */
    getInvoice(invoiceId: string, withChildrenItems?: boolean, audit?: 'FULL' | 'MINIMAL' | 'NONE', options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Invoice, any>>;
    /**
     *
     * @summary Render an invoice as HTML
     * @param {string} invoiceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InvoiceApi
     */
    getInvoiceAsHTML(invoiceId: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<string, any>>;
    /**
     *
     * @summary Retrieve invoice audit logs with history by id
     * @param {string} invoiceId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InvoiceApi
     */
    getInvoiceAuditLogsWithHistory(invoiceId: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<AuditLog[], any>>;
    /**
     *
     * @summary Retrieve an invoice by invoice item id
     * @param {string} itemId
     * @param {boolean} [withChildrenItems]
     * @param {'FULL' | 'MINIMAL' | 'NONE'} [audit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InvoiceApi
     */
    getInvoiceByItemId(itemId: string, withChildrenItems?: boolean, audit?: 'FULL' | 'MINIMAL' | 'NONE', options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Invoice, any>>;
    /**
     *
     * @summary Retrieve an invoice by number
     * @param {number} invoiceNumber
     * @param {boolean} [withChildrenItems]
     * @param {'FULL' | 'MINIMAL' | 'NONE'} [audit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InvoiceApi
     */
    getInvoiceByNumber(invoiceNumber: number, withChildrenItems?: boolean, audit?: 'FULL' | 'MINIMAL' | 'NONE', options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Invoice, any>>;
    /**
     *
     * @summary Retrieve invoice custom fields
     * @param {string} invoiceId
     * @param {'FULL' | 'MINIMAL' | 'NONE'} [audit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InvoiceApi
     */
    getInvoiceCustomFields(invoiceId: string, audit?: 'FULL' | 'MINIMAL' | 'NONE', options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<CustomField[], any>>;
    /**
     *
     * @summary Retrieves the manualPay invoice template for the tenant
     * @param {string} locale
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InvoiceApi
     */
    getInvoiceMPTemplate(locale: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<string, any>>;
    /**
     *
     * @summary Retrieve invoice tags
     * @param {string} invoiceId
     * @param {boolean} [includedDeleted]
     * @param {'FULL' | 'MINIMAL' | 'NONE'} [audit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InvoiceApi
     */
    getInvoiceTags(invoiceId: string, includedDeleted?: boolean, audit?: 'FULL' | 'MINIMAL' | 'NONE', options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Tag[], any>>;
    /**
     *
     * @summary Retrieves the invoice template for the tenant
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InvoiceApi
     */
    getInvoiceTemplate(options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<string, any>>;
    /**
     *
     * @summary Retrieves the invoice translation for the tenant
     * @param {string} locale
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InvoiceApi
     */
    getInvoiceTranslation(locale: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<string, any>>;
    /**
     *
     * @summary List invoices
     * @param {number} [offset]
     * @param {number} [limit]
     * @param {'FULL' | 'MINIMAL' | 'NONE'} [audit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InvoiceApi
     */
    getInvoices(offset?: number, limit?: number, audit?: 'FULL' | 'MINIMAL' | 'NONE', options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Invoice[], any>>;
    /**
     *
     * @summary Retrieve a set of invoices by group id
     * @param {string} groupId
     * @param {string} accountId
     * @param {boolean} [withChildrenItems]
     * @param {'FULL' | 'MINIMAL' | 'NONE'} [audit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InvoiceApi
     */
    getInvoicesGroup(groupId: string, accountId: string, withChildrenItems?: boolean, audit?: 'FULL' | 'MINIMAL' | 'NONE', options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Invoice[], any>>;
    /**
     *
     * @summary Retrieve payments associated with an invoice
     * @param {string} invoiceId
     * @param {boolean} [withPluginInfo]
     * @param {boolean} [withAttempts]
     * @param {'FULL' | 'MINIMAL' | 'NONE'} [audit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InvoiceApi
     */
    getPaymentsForInvoice(invoiceId: string, withPluginInfo?: boolean, withAttempts?: boolean, audit?: 'FULL' | 'MINIMAL' | 'NONE', options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<InvoicePayment[], any>>;
    /**
     *
     * @summary Modify custom fields to invoice
     * @param {Array<CustomField>} body
     * @param {string} invoiceId
     * @param {string} xKillbillCreatedBy
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InvoiceApi
     */
    modifyInvoiceCustomFields(body: Array<CustomField>, invoiceId: string, xKillbillCreatedBy: string, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     *
     * @summary Search invoices
     * @param {string} searchKey
     * @param {number} [offset]
     * @param {number} [limit]
     * @param {'FULL' | 'MINIMAL' | 'NONE'} [audit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InvoiceApi
     */
    searchInvoices(searchKey: string, offset?: number, limit?: number, audit?: 'FULL' | 'MINIMAL' | 'NONE', options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Invoice[], any>>;
    /**
     *
     * @summary Upload the catalog translation for the tenant
     * @param {string} body
     * @param {string} locale
     * @param {string} xKillbillCreatedBy
     * @param {boolean} [deleteIfExists]
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InvoiceApi
     */
    uploadCatalogTranslation(body: string, locale: string, xKillbillCreatedBy: string, deleteIfExists?: boolean, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<string, any>>;
    /**
     *
     * @summary Upload the manualPay invoice template for the tenant
     * @param {string} body
     * @param {string} xKillbillCreatedBy
     * @param {boolean} [deleteIfExists]
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InvoiceApi
     */
    uploadInvoiceMPTemplate(body: string, xKillbillCreatedBy: string, deleteIfExists?: boolean, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<string, any>>;
    /**
     *
     * @summary Upload the invoice template for the tenant
     * @param {string} body
     * @param {string} xKillbillCreatedBy
     * @param {boolean} [deleteIfExists]
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InvoiceApi
     */
    uploadInvoiceTemplate(body: string, xKillbillCreatedBy: string, deleteIfExists?: boolean, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<string, any>>;
    /**
     *
     * @summary Upload the invoice translation for the tenant
     * @param {string} body
     * @param {string} locale
     * @param {string} xKillbillCreatedBy
     * @param {boolean} [deleteIfExists]
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InvoiceApi
     */
    uploadInvoiceTranslation(body: string, locale: string, xKillbillCreatedBy: string, deleteIfExists?: boolean, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<string, any>>;
    /**
     *
     * @summary Perform the action of voiding an invoice
     * @param {string} invoiceId
     * @param {string} xKillbillCreatedBy
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InvoiceApi
     */
    voidInvoice(invoiceId: string, xKillbillCreatedBy: string, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
}
/**
 * InvoiceItemApi - axios parameter creator
 * @export
 */
export declare const InvoiceItemApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Add custom fields to invoice item
     * @param {Array<CustomField>} body
     * @param {string} invoiceItemId
     * @param {string} xKillbillCreatedBy
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createInvoiceItemCustomFields: (body: Array<CustomField>, invoiceItemId: string, xKillbillCreatedBy: string, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Add tags to invoice item
     * @param {Array<string>} body
     * @param {string} invoiceItemId
     * @param {string} xKillbillCreatedBy
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createInvoiceItemTags: (body: Array<string>, invoiceItemId: string, xKillbillCreatedBy: string, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Remove custom fields from invoice item
     * @param {string} invoiceItemId
     * @param {string} xKillbillCreatedBy
     * @param {Array<string>} [customField]
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteInvoiceItemCustomFields: (invoiceItemId: string, xKillbillCreatedBy: string, customField?: Array<string>, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Remove tags from invoice item
     * @param {string} invoiceItemId
     * @param {string} xKillbillCreatedBy
     * @param {Array<string>} [tagDef]
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteInvoiceItemTags: (invoiceItemId: string, xKillbillCreatedBy: string, tagDef?: Array<string>, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Retrieve invoice item audit logs with history by id
     * @param {string} invoiceItemId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getInvoiceItemAuditLogsWithHistory: (invoiceItemId: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Retrieve invoice item custom fields
     * @param {string} invoiceItemId
     * @param {'FULL' | 'MINIMAL' | 'NONE'} [audit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getInvoiceItemCustomFields: (invoiceItemId: string, audit?: 'FULL' | 'MINIMAL' | 'NONE', options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Retrieve invoice item tags
     * @param {string} invoiceItemId
     * @param {string} accountId
     * @param {boolean} [includedDeleted]
     * @param {'FULL' | 'MINIMAL' | 'NONE'} [audit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getInvoiceItemTags: (invoiceItemId: string, accountId: string, includedDeleted?: boolean, audit?: 'FULL' | 'MINIMAL' | 'NONE', options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Modify custom fields to invoice item
     * @param {Array<CustomField>} body
     * @param {string} invoiceItemId
     * @param {string} xKillbillCreatedBy
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    modifyInvoiceItemCustomFields: (body: Array<CustomField>, invoiceItemId: string, xKillbillCreatedBy: string, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * InvoiceItemApi - functional programming interface
 * @export
 */
export declare const InvoiceItemApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary Add custom fields to invoice item
     * @param {Array<CustomField>} body
     * @param {string} invoiceItemId
     * @param {string} xKillbillCreatedBy
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createInvoiceItemCustomFields(body: Array<CustomField>, invoiceItemId: string, xKillbillCreatedBy: string, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CustomField>>>;
    /**
     *
     * @summary Add tags to invoice item
     * @param {Array<string>} body
     * @param {string} invoiceItemId
     * @param {string} xKillbillCreatedBy
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createInvoiceItemTags(body: Array<string>, invoiceItemId: string, xKillbillCreatedBy: string, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Tag>>>;
    /**
     *
     * @summary Remove custom fields from invoice item
     * @param {string} invoiceItemId
     * @param {string} xKillbillCreatedBy
     * @param {Array<string>} [customField]
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteInvoiceItemCustomFields(invoiceItemId: string, xKillbillCreatedBy: string, customField?: Array<string>, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary Remove tags from invoice item
     * @param {string} invoiceItemId
     * @param {string} xKillbillCreatedBy
     * @param {Array<string>} [tagDef]
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteInvoiceItemTags(invoiceItemId: string, xKillbillCreatedBy: string, tagDef?: Array<string>, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary Retrieve invoice item audit logs with history by id
     * @param {string} invoiceItemId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getInvoiceItemAuditLogsWithHistory(invoiceItemId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<AuditLog>>>;
    /**
     *
     * @summary Retrieve invoice item custom fields
     * @param {string} invoiceItemId
     * @param {'FULL' | 'MINIMAL' | 'NONE'} [audit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getInvoiceItemCustomFields(invoiceItemId: string, audit?: 'FULL' | 'MINIMAL' | 'NONE', options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CustomField>>>;
    /**
     *
     * @summary Retrieve invoice item tags
     * @param {string} invoiceItemId
     * @param {string} accountId
     * @param {boolean} [includedDeleted]
     * @param {'FULL' | 'MINIMAL' | 'NONE'} [audit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getInvoiceItemTags(invoiceItemId: string, accountId: string, includedDeleted?: boolean, audit?: 'FULL' | 'MINIMAL' | 'NONE', options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Tag>>>;
    /**
     *
     * @summary Modify custom fields to invoice item
     * @param {Array<CustomField>} body
     * @param {string} invoiceItemId
     * @param {string} xKillbillCreatedBy
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    modifyInvoiceItemCustomFields(body: Array<CustomField>, invoiceItemId: string, xKillbillCreatedBy: string, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
};
/**
 * InvoiceItemApi - factory interface
 * @export
 */
export declare const InvoiceItemApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Add custom fields to invoice item
     * @param {Array<CustomField>} body
     * @param {string} invoiceItemId
     * @param {string} xKillbillCreatedBy
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createInvoiceItemCustomFields(body: Array<CustomField>, invoiceItemId: string, xKillbillCreatedBy: string, xKillbillReason?: string, xKillbillComment?: string, options?: any): AxiosPromise<Array<CustomField>>;
    /**
     *
     * @summary Add tags to invoice item
     * @param {Array<string>} body
     * @param {string} invoiceItemId
     * @param {string} xKillbillCreatedBy
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createInvoiceItemTags(body: Array<string>, invoiceItemId: string, xKillbillCreatedBy: string, xKillbillReason?: string, xKillbillComment?: string, options?: any): AxiosPromise<Array<Tag>>;
    /**
     *
     * @summary Remove custom fields from invoice item
     * @param {string} invoiceItemId
     * @param {string} xKillbillCreatedBy
     * @param {Array<string>} [customField]
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteInvoiceItemCustomFields(invoiceItemId: string, xKillbillCreatedBy: string, customField?: Array<string>, xKillbillReason?: string, xKillbillComment?: string, options?: any): AxiosPromise<void>;
    /**
     *
     * @summary Remove tags from invoice item
     * @param {string} invoiceItemId
     * @param {string} xKillbillCreatedBy
     * @param {Array<string>} [tagDef]
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteInvoiceItemTags(invoiceItemId: string, xKillbillCreatedBy: string, tagDef?: Array<string>, xKillbillReason?: string, xKillbillComment?: string, options?: any): AxiosPromise<void>;
    /**
     *
     * @summary Retrieve invoice item audit logs with history by id
     * @param {string} invoiceItemId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getInvoiceItemAuditLogsWithHistory(invoiceItemId: string, options?: any): AxiosPromise<Array<AuditLog>>;
    /**
     *
     * @summary Retrieve invoice item custom fields
     * @param {string} invoiceItemId
     * @param {'FULL' | 'MINIMAL' | 'NONE'} [audit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getInvoiceItemCustomFields(invoiceItemId: string, audit?: 'FULL' | 'MINIMAL' | 'NONE', options?: any): AxiosPromise<Array<CustomField>>;
    /**
     *
     * @summary Retrieve invoice item tags
     * @param {string} invoiceItemId
     * @param {string} accountId
     * @param {boolean} [includedDeleted]
     * @param {'FULL' | 'MINIMAL' | 'NONE'} [audit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getInvoiceItemTags(invoiceItemId: string, accountId: string, includedDeleted?: boolean, audit?: 'FULL' | 'MINIMAL' | 'NONE', options?: any): AxiosPromise<Array<Tag>>;
    /**
     *
     * @summary Modify custom fields to invoice item
     * @param {Array<CustomField>} body
     * @param {string} invoiceItemId
     * @param {string} xKillbillCreatedBy
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    modifyInvoiceItemCustomFields(body: Array<CustomField>, invoiceItemId: string, xKillbillCreatedBy: string, xKillbillReason?: string, xKillbillComment?: string, options?: any): AxiosPromise<void>;
};
/**
 * InvoiceItemApi - object-oriented interface
 * @export
 * @class InvoiceItemApi
 * @extends {BaseAPI}
 */
export declare class InvoiceItemApi extends BaseAPI {
    /**
     *
     * @summary Add custom fields to invoice item
     * @param {Array<CustomField>} body
     * @param {string} invoiceItemId
     * @param {string} xKillbillCreatedBy
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InvoiceItemApi
     */
    createInvoiceItemCustomFields(body: Array<CustomField>, invoiceItemId: string, xKillbillCreatedBy: string, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<CustomField[], any>>;
    /**
     *
     * @summary Add tags to invoice item
     * @param {Array<string>} body
     * @param {string} invoiceItemId
     * @param {string} xKillbillCreatedBy
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InvoiceItemApi
     */
    createInvoiceItemTags(body: Array<string>, invoiceItemId: string, xKillbillCreatedBy: string, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Tag[], any>>;
    /**
     *
     * @summary Remove custom fields from invoice item
     * @param {string} invoiceItemId
     * @param {string} xKillbillCreatedBy
     * @param {Array<string>} [customField]
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InvoiceItemApi
     */
    deleteInvoiceItemCustomFields(invoiceItemId: string, xKillbillCreatedBy: string, customField?: Array<string>, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     *
     * @summary Remove tags from invoice item
     * @param {string} invoiceItemId
     * @param {string} xKillbillCreatedBy
     * @param {Array<string>} [tagDef]
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InvoiceItemApi
     */
    deleteInvoiceItemTags(invoiceItemId: string, xKillbillCreatedBy: string, tagDef?: Array<string>, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     *
     * @summary Retrieve invoice item audit logs with history by id
     * @param {string} invoiceItemId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InvoiceItemApi
     */
    getInvoiceItemAuditLogsWithHistory(invoiceItemId: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<AuditLog[], any>>;
    /**
     *
     * @summary Retrieve invoice item custom fields
     * @param {string} invoiceItemId
     * @param {'FULL' | 'MINIMAL' | 'NONE'} [audit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InvoiceItemApi
     */
    getInvoiceItemCustomFields(invoiceItemId: string, audit?: 'FULL' | 'MINIMAL' | 'NONE', options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<CustomField[], any>>;
    /**
     *
     * @summary Retrieve invoice item tags
     * @param {string} invoiceItemId
     * @param {string} accountId
     * @param {boolean} [includedDeleted]
     * @param {'FULL' | 'MINIMAL' | 'NONE'} [audit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InvoiceItemApi
     */
    getInvoiceItemTags(invoiceItemId: string, accountId: string, includedDeleted?: boolean, audit?: 'FULL' | 'MINIMAL' | 'NONE', options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Tag[], any>>;
    /**
     *
     * @summary Modify custom fields to invoice item
     * @param {Array<CustomField>} body
     * @param {string} invoiceItemId
     * @param {string} xKillbillCreatedBy
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InvoiceItemApi
     */
    modifyInvoiceItemCustomFields(body: Array<CustomField>, invoiceItemId: string, xKillbillCreatedBy: string, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
}
/**
 * InvoicePaymentApi - axios parameter creator
 * @export
 */
export declare const InvoicePaymentApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Complete an existing transaction
     * @param {PaymentTransaction} body
     * @param {string} paymentId
     * @param {string} xKillbillCreatedBy
     * @param {Array<string>} [controlPluginName]
     * @param {Array<string>} [pluginProperty]
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    completeInvoicePaymentTransaction: (body: PaymentTransaction, paymentId: string, xKillbillCreatedBy: string, controlPluginName?: Array<string>, pluginProperty?: Array<string>, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Record a chargeback
     * @param {InvoicePaymentTransaction} body
     * @param {string} paymentId
     * @param {string} xKillbillCreatedBy
     * @param {Array<string>} [pluginProperty]
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createChargeback: (body: InvoicePaymentTransaction, paymentId: string, xKillbillCreatedBy: string, pluginProperty?: Array<string>, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Record a chargebackReversal
     * @param {InvoicePaymentTransaction} body
     * @param {string} paymentId
     * @param {string} xKillbillCreatedBy
     * @param {Array<string>} [pluginProperty]
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createChargebackReversal: (body: InvoicePaymentTransaction, paymentId: string, xKillbillCreatedBy: string, pluginProperty?: Array<string>, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Add custom fields to payment
     * @param {Array<CustomField>} body
     * @param {string} paymentId
     * @param {string} xKillbillCreatedBy
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createInvoicePaymentCustomFields: (body: Array<CustomField>, paymentId: string, xKillbillCreatedBy: string, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Add tags to payment
     * @param {Array<string>} body
     * @param {string} paymentId
     * @param {string} xKillbillCreatedBy
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createInvoicePaymentTags: (body: Array<string>, paymentId: string, xKillbillCreatedBy: string, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Refund a payment, and adjust the invoice if needed
     * @param {InvoicePaymentTransaction} body
     * @param {string} paymentId
     * @param {string} xKillbillCreatedBy
     * @param {boolean} [externalPayment]
     * @param {string} [paymentMethodId]
     * @param {Array<string>} [pluginProperty]
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createRefundWithAdjustments: (body: InvoicePaymentTransaction, paymentId: string, xKillbillCreatedBy: string, externalPayment?: boolean, paymentMethodId?: string, pluginProperty?: Array<string>, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Remove custom fields from payment
     * @param {string} paymentId
     * @param {string} xKillbillCreatedBy
     * @param {Array<string>} [customField]
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteInvoicePaymentCustomFields: (paymentId: string, xKillbillCreatedBy: string, customField?: Array<string>, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Remove tags from payment
     * @param {string} paymentId
     * @param {string} xKillbillCreatedBy
     * @param {Array<string>} [tagDef]
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteInvoicePaymentTags: (paymentId: string, xKillbillCreatedBy: string, tagDef?: Array<string>, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Retrieve a payment by id
     * @param {string} paymentId
     * @param {boolean} [withPluginInfo]
     * @param {boolean} [withAttempts]
     * @param {Array<string>} [pluginProperty]
     * @param {'FULL' | 'MINIMAL' | 'NONE'} [audit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getInvoicePayment: (paymentId: string, withPluginInfo?: boolean, withAttempts?: boolean, pluginProperty?: Array<string>, audit?: 'FULL' | 'MINIMAL' | 'NONE', options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Retrieve invoice payment audit logs with history by id
     * @param {string} invoicePaymentId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getInvoicePaymentAuditLogsWithHistory: (invoicePaymentId: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Retrieve payment custom fields
     * @param {string} paymentId
     * @param {'FULL' | 'MINIMAL' | 'NONE'} [audit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getInvoicePaymentCustomFields: (paymentId: string, audit?: 'FULL' | 'MINIMAL' | 'NONE', options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Retrieve payment tags
     * @param {string} paymentId
     * @param {boolean} [includedDeleted]
     * @param {Array<string>} [pluginProperty]
     * @param {'FULL' | 'MINIMAL' | 'NONE'} [audit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getInvoicePaymentTags: (paymentId: string, includedDeleted?: boolean, pluginProperty?: Array<string>, audit?: 'FULL' | 'MINIMAL' | 'NONE', options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Modify custom fields to payment
     * @param {Array<CustomField>} body
     * @param {string} paymentId
     * @param {string} xKillbillCreatedBy
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    modifyInvoicePaymentCustomFields: (body: Array<CustomField>, paymentId: string, xKillbillCreatedBy: string, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * InvoicePaymentApi - functional programming interface
 * @export
 */
export declare const InvoicePaymentApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary Complete an existing transaction
     * @param {PaymentTransaction} body
     * @param {string} paymentId
     * @param {string} xKillbillCreatedBy
     * @param {Array<string>} [controlPluginName]
     * @param {Array<string>} [pluginProperty]
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    completeInvoicePaymentTransaction(body: PaymentTransaction, paymentId: string, xKillbillCreatedBy: string, controlPluginName?: Array<string>, pluginProperty?: Array<string>, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary Record a chargeback
     * @param {InvoicePaymentTransaction} body
     * @param {string} paymentId
     * @param {string} xKillbillCreatedBy
     * @param {Array<string>} [pluginProperty]
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createChargeback(body: InvoicePaymentTransaction, paymentId: string, xKillbillCreatedBy: string, pluginProperty?: Array<string>, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InvoicePayment>>;
    /**
     *
     * @summary Record a chargebackReversal
     * @param {InvoicePaymentTransaction} body
     * @param {string} paymentId
     * @param {string} xKillbillCreatedBy
     * @param {Array<string>} [pluginProperty]
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createChargebackReversal(body: InvoicePaymentTransaction, paymentId: string, xKillbillCreatedBy: string, pluginProperty?: Array<string>, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InvoicePayment>>;
    /**
     *
     * @summary Add custom fields to payment
     * @param {Array<CustomField>} body
     * @param {string} paymentId
     * @param {string} xKillbillCreatedBy
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createInvoicePaymentCustomFields(body: Array<CustomField>, paymentId: string, xKillbillCreatedBy: string, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CustomField>>>;
    /**
     *
     * @summary Add tags to payment
     * @param {Array<string>} body
     * @param {string} paymentId
     * @param {string} xKillbillCreatedBy
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createInvoicePaymentTags(body: Array<string>, paymentId: string, xKillbillCreatedBy: string, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Tag>>>;
    /**
     *
     * @summary Refund a payment, and adjust the invoice if needed
     * @param {InvoicePaymentTransaction} body
     * @param {string} paymentId
     * @param {string} xKillbillCreatedBy
     * @param {boolean} [externalPayment]
     * @param {string} [paymentMethodId]
     * @param {Array<string>} [pluginProperty]
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createRefundWithAdjustments(body: InvoicePaymentTransaction, paymentId: string, xKillbillCreatedBy: string, externalPayment?: boolean, paymentMethodId?: string, pluginProperty?: Array<string>, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InvoicePayment>>;
    /**
     *
     * @summary Remove custom fields from payment
     * @param {string} paymentId
     * @param {string} xKillbillCreatedBy
     * @param {Array<string>} [customField]
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteInvoicePaymentCustomFields(paymentId: string, xKillbillCreatedBy: string, customField?: Array<string>, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary Remove tags from payment
     * @param {string} paymentId
     * @param {string} xKillbillCreatedBy
     * @param {Array<string>} [tagDef]
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteInvoicePaymentTags(paymentId: string, xKillbillCreatedBy: string, tagDef?: Array<string>, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary Retrieve a payment by id
     * @param {string} paymentId
     * @param {boolean} [withPluginInfo]
     * @param {boolean} [withAttempts]
     * @param {Array<string>} [pluginProperty]
     * @param {'FULL' | 'MINIMAL' | 'NONE'} [audit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getInvoicePayment(paymentId: string, withPluginInfo?: boolean, withAttempts?: boolean, pluginProperty?: Array<string>, audit?: 'FULL' | 'MINIMAL' | 'NONE', options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InvoicePayment>>;
    /**
     *
     * @summary Retrieve invoice payment audit logs with history by id
     * @param {string} invoicePaymentId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getInvoicePaymentAuditLogsWithHistory(invoicePaymentId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<AuditLog>>>;
    /**
     *
     * @summary Retrieve payment custom fields
     * @param {string} paymentId
     * @param {'FULL' | 'MINIMAL' | 'NONE'} [audit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getInvoicePaymentCustomFields(paymentId: string, audit?: 'FULL' | 'MINIMAL' | 'NONE', options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CustomField>>>;
    /**
     *
     * @summary Retrieve payment tags
     * @param {string} paymentId
     * @param {boolean} [includedDeleted]
     * @param {Array<string>} [pluginProperty]
     * @param {'FULL' | 'MINIMAL' | 'NONE'} [audit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getInvoicePaymentTags(paymentId: string, includedDeleted?: boolean, pluginProperty?: Array<string>, audit?: 'FULL' | 'MINIMAL' | 'NONE', options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Tag>>>;
    /**
     *
     * @summary Modify custom fields to payment
     * @param {Array<CustomField>} body
     * @param {string} paymentId
     * @param {string} xKillbillCreatedBy
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    modifyInvoicePaymentCustomFields(body: Array<CustomField>, paymentId: string, xKillbillCreatedBy: string, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
};
/**
 * InvoicePaymentApi - factory interface
 * @export
 */
export declare const InvoicePaymentApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Complete an existing transaction
     * @param {PaymentTransaction} body
     * @param {string} paymentId
     * @param {string} xKillbillCreatedBy
     * @param {Array<string>} [controlPluginName]
     * @param {Array<string>} [pluginProperty]
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    completeInvoicePaymentTransaction(body: PaymentTransaction, paymentId: string, xKillbillCreatedBy: string, controlPluginName?: Array<string>, pluginProperty?: Array<string>, xKillbillReason?: string, xKillbillComment?: string, options?: any): AxiosPromise<void>;
    /**
     *
     * @summary Record a chargeback
     * @param {InvoicePaymentTransaction} body
     * @param {string} paymentId
     * @param {string} xKillbillCreatedBy
     * @param {Array<string>} [pluginProperty]
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createChargeback(body: InvoicePaymentTransaction, paymentId: string, xKillbillCreatedBy: string, pluginProperty?: Array<string>, xKillbillReason?: string, xKillbillComment?: string, options?: any): AxiosPromise<InvoicePayment>;
    /**
     *
     * @summary Record a chargebackReversal
     * @param {InvoicePaymentTransaction} body
     * @param {string} paymentId
     * @param {string} xKillbillCreatedBy
     * @param {Array<string>} [pluginProperty]
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createChargebackReversal(body: InvoicePaymentTransaction, paymentId: string, xKillbillCreatedBy: string, pluginProperty?: Array<string>, xKillbillReason?: string, xKillbillComment?: string, options?: any): AxiosPromise<InvoicePayment>;
    /**
     *
     * @summary Add custom fields to payment
     * @param {Array<CustomField>} body
     * @param {string} paymentId
     * @param {string} xKillbillCreatedBy
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createInvoicePaymentCustomFields(body: Array<CustomField>, paymentId: string, xKillbillCreatedBy: string, xKillbillReason?: string, xKillbillComment?: string, options?: any): AxiosPromise<Array<CustomField>>;
    /**
     *
     * @summary Add tags to payment
     * @param {Array<string>} body
     * @param {string} paymentId
     * @param {string} xKillbillCreatedBy
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createInvoicePaymentTags(body: Array<string>, paymentId: string, xKillbillCreatedBy: string, xKillbillReason?: string, xKillbillComment?: string, options?: any): AxiosPromise<Array<Tag>>;
    /**
     *
     * @summary Refund a payment, and adjust the invoice if needed
     * @param {InvoicePaymentTransaction} body
     * @param {string} paymentId
     * @param {string} xKillbillCreatedBy
     * @param {boolean} [externalPayment]
     * @param {string} [paymentMethodId]
     * @param {Array<string>} [pluginProperty]
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createRefundWithAdjustments(body: InvoicePaymentTransaction, paymentId: string, xKillbillCreatedBy: string, externalPayment?: boolean, paymentMethodId?: string, pluginProperty?: Array<string>, xKillbillReason?: string, xKillbillComment?: string, options?: any): AxiosPromise<InvoicePayment>;
    /**
     *
     * @summary Remove custom fields from payment
     * @param {string} paymentId
     * @param {string} xKillbillCreatedBy
     * @param {Array<string>} [customField]
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteInvoicePaymentCustomFields(paymentId: string, xKillbillCreatedBy: string, customField?: Array<string>, xKillbillReason?: string, xKillbillComment?: string, options?: any): AxiosPromise<void>;
    /**
     *
     * @summary Remove tags from payment
     * @param {string} paymentId
     * @param {string} xKillbillCreatedBy
     * @param {Array<string>} [tagDef]
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteInvoicePaymentTags(paymentId: string, xKillbillCreatedBy: string, tagDef?: Array<string>, xKillbillReason?: string, xKillbillComment?: string, options?: any): AxiosPromise<void>;
    /**
     *
     * @summary Retrieve a payment by id
     * @param {string} paymentId
     * @param {boolean} [withPluginInfo]
     * @param {boolean} [withAttempts]
     * @param {Array<string>} [pluginProperty]
     * @param {'FULL' | 'MINIMAL' | 'NONE'} [audit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getInvoicePayment(paymentId: string, withPluginInfo?: boolean, withAttempts?: boolean, pluginProperty?: Array<string>, audit?: 'FULL' | 'MINIMAL' | 'NONE', options?: any): AxiosPromise<InvoicePayment>;
    /**
     *
     * @summary Retrieve invoice payment audit logs with history by id
     * @param {string} invoicePaymentId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getInvoicePaymentAuditLogsWithHistory(invoicePaymentId: string, options?: any): AxiosPromise<Array<AuditLog>>;
    /**
     *
     * @summary Retrieve payment custom fields
     * @param {string} paymentId
     * @param {'FULL' | 'MINIMAL' | 'NONE'} [audit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getInvoicePaymentCustomFields(paymentId: string, audit?: 'FULL' | 'MINIMAL' | 'NONE', options?: any): AxiosPromise<Array<CustomField>>;
    /**
     *
     * @summary Retrieve payment tags
     * @param {string} paymentId
     * @param {boolean} [includedDeleted]
     * @param {Array<string>} [pluginProperty]
     * @param {'FULL' | 'MINIMAL' | 'NONE'} [audit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getInvoicePaymentTags(paymentId: string, includedDeleted?: boolean, pluginProperty?: Array<string>, audit?: 'FULL' | 'MINIMAL' | 'NONE', options?: any): AxiosPromise<Array<Tag>>;
    /**
     *
     * @summary Modify custom fields to payment
     * @param {Array<CustomField>} body
     * @param {string} paymentId
     * @param {string} xKillbillCreatedBy
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    modifyInvoicePaymentCustomFields(body: Array<CustomField>, paymentId: string, xKillbillCreatedBy: string, xKillbillReason?: string, xKillbillComment?: string, options?: any): AxiosPromise<void>;
};
/**
 * InvoicePaymentApi - object-oriented interface
 * @export
 * @class InvoicePaymentApi
 * @extends {BaseAPI}
 */
export declare class InvoicePaymentApi extends BaseAPI {
    /**
     *
     * @summary Complete an existing transaction
     * @param {PaymentTransaction} body
     * @param {string} paymentId
     * @param {string} xKillbillCreatedBy
     * @param {Array<string>} [controlPluginName]
     * @param {Array<string>} [pluginProperty]
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InvoicePaymentApi
     */
    completeInvoicePaymentTransaction(body: PaymentTransaction, paymentId: string, xKillbillCreatedBy: string, controlPluginName?: Array<string>, pluginProperty?: Array<string>, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     *
     * @summary Record a chargeback
     * @param {InvoicePaymentTransaction} body
     * @param {string} paymentId
     * @param {string} xKillbillCreatedBy
     * @param {Array<string>} [pluginProperty]
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InvoicePaymentApi
     */
    createChargeback(body: InvoicePaymentTransaction, paymentId: string, xKillbillCreatedBy: string, pluginProperty?: Array<string>, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<InvoicePayment, any>>;
    /**
     *
     * @summary Record a chargebackReversal
     * @param {InvoicePaymentTransaction} body
     * @param {string} paymentId
     * @param {string} xKillbillCreatedBy
     * @param {Array<string>} [pluginProperty]
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InvoicePaymentApi
     */
    createChargebackReversal(body: InvoicePaymentTransaction, paymentId: string, xKillbillCreatedBy: string, pluginProperty?: Array<string>, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<InvoicePayment, any>>;
    /**
     *
     * @summary Add custom fields to payment
     * @param {Array<CustomField>} body
     * @param {string} paymentId
     * @param {string} xKillbillCreatedBy
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InvoicePaymentApi
     */
    createInvoicePaymentCustomFields(body: Array<CustomField>, paymentId: string, xKillbillCreatedBy: string, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<CustomField[], any>>;
    /**
     *
     * @summary Add tags to payment
     * @param {Array<string>} body
     * @param {string} paymentId
     * @param {string} xKillbillCreatedBy
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InvoicePaymentApi
     */
    createInvoicePaymentTags(body: Array<string>, paymentId: string, xKillbillCreatedBy: string, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Tag[], any>>;
    /**
     *
     * @summary Refund a payment, and adjust the invoice if needed
     * @param {InvoicePaymentTransaction} body
     * @param {string} paymentId
     * @param {string} xKillbillCreatedBy
     * @param {boolean} [externalPayment]
     * @param {string} [paymentMethodId]
     * @param {Array<string>} [pluginProperty]
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InvoicePaymentApi
     */
    createRefundWithAdjustments(body: InvoicePaymentTransaction, paymentId: string, xKillbillCreatedBy: string, externalPayment?: boolean, paymentMethodId?: string, pluginProperty?: Array<string>, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<InvoicePayment, any>>;
    /**
     *
     * @summary Remove custom fields from payment
     * @param {string} paymentId
     * @param {string} xKillbillCreatedBy
     * @param {Array<string>} [customField]
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InvoicePaymentApi
     */
    deleteInvoicePaymentCustomFields(paymentId: string, xKillbillCreatedBy: string, customField?: Array<string>, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     *
     * @summary Remove tags from payment
     * @param {string} paymentId
     * @param {string} xKillbillCreatedBy
     * @param {Array<string>} [tagDef]
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InvoicePaymentApi
     */
    deleteInvoicePaymentTags(paymentId: string, xKillbillCreatedBy: string, tagDef?: Array<string>, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     *
     * @summary Retrieve a payment by id
     * @param {string} paymentId
     * @param {boolean} [withPluginInfo]
     * @param {boolean} [withAttempts]
     * @param {Array<string>} [pluginProperty]
     * @param {'FULL' | 'MINIMAL' | 'NONE'} [audit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InvoicePaymentApi
     */
    getInvoicePayment(paymentId: string, withPluginInfo?: boolean, withAttempts?: boolean, pluginProperty?: Array<string>, audit?: 'FULL' | 'MINIMAL' | 'NONE', options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<InvoicePayment, any>>;
    /**
     *
     * @summary Retrieve invoice payment audit logs with history by id
     * @param {string} invoicePaymentId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InvoicePaymentApi
     */
    getInvoicePaymentAuditLogsWithHistory(invoicePaymentId: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<AuditLog[], any>>;
    /**
     *
     * @summary Retrieve payment custom fields
     * @param {string} paymentId
     * @param {'FULL' | 'MINIMAL' | 'NONE'} [audit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InvoicePaymentApi
     */
    getInvoicePaymentCustomFields(paymentId: string, audit?: 'FULL' | 'MINIMAL' | 'NONE', options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<CustomField[], any>>;
    /**
     *
     * @summary Retrieve payment tags
     * @param {string} paymentId
     * @param {boolean} [includedDeleted]
     * @param {Array<string>} [pluginProperty]
     * @param {'FULL' | 'MINIMAL' | 'NONE'} [audit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InvoicePaymentApi
     */
    getInvoicePaymentTags(paymentId: string, includedDeleted?: boolean, pluginProperty?: Array<string>, audit?: 'FULL' | 'MINIMAL' | 'NONE', options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Tag[], any>>;
    /**
     *
     * @summary Modify custom fields to payment
     * @param {Array<CustomField>} body
     * @param {string} paymentId
     * @param {string} xKillbillCreatedBy
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InvoicePaymentApi
     */
    modifyInvoicePaymentCustomFields(body: Array<CustomField>, paymentId: string, xKillbillCreatedBy: string, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
}
/**
 * NodesInfoApi - axios parameter creator
 * @export
 */
export declare const NodesInfoApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Retrieve all the nodes infos
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getNodesInfo: (options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Trigger a node command
     * @param {NodeCommand} body
     * @param {string} xKillbillCreatedBy
     * @param {boolean} [localNodeOnly]
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    triggerNodeCommand: (body: NodeCommand, xKillbillCreatedBy: string, localNodeOnly?: boolean, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * NodesInfoApi - functional programming interface
 * @export
 */
export declare const NodesInfoApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary Retrieve all the nodes infos
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getNodesInfo(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<NodeInfo>>>;
    /**
     *
     * @summary Trigger a node command
     * @param {NodeCommand} body
     * @param {string} xKillbillCreatedBy
     * @param {boolean} [localNodeOnly]
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    triggerNodeCommand(body: NodeCommand, xKillbillCreatedBy: string, localNodeOnly?: boolean, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
};
/**
 * NodesInfoApi - factory interface
 * @export
 */
export declare const NodesInfoApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Retrieve all the nodes infos
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getNodesInfo(options?: any): AxiosPromise<Array<NodeInfo>>;
    /**
     *
     * @summary Trigger a node command
     * @param {NodeCommand} body
     * @param {string} xKillbillCreatedBy
     * @param {boolean} [localNodeOnly]
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    triggerNodeCommand(body: NodeCommand, xKillbillCreatedBy: string, localNodeOnly?: boolean, xKillbillReason?: string, xKillbillComment?: string, options?: any): AxiosPromise<void>;
};
/**
 * NodesInfoApi - object-oriented interface
 * @export
 * @class NodesInfoApi
 * @extends {BaseAPI}
 */
export declare class NodesInfoApi extends BaseAPI {
    /**
     *
     * @summary Retrieve all the nodes infos
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NodesInfoApi
     */
    getNodesInfo(options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<NodeInfo[], any>>;
    /**
     *
     * @summary Trigger a node command
     * @param {NodeCommand} body
     * @param {string} xKillbillCreatedBy
     * @param {boolean} [localNodeOnly]
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof NodesInfoApi
     */
    triggerNodeCommand(body: NodeCommand, xKillbillCreatedBy: string, localNodeOnly?: boolean, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
}
/**
 * OverdueApi - axios parameter creator
 * @export
 */
export declare const OverdueApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Retrieve the overdue config as JSON
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOverdueConfigJson: (options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Retrieve the overdue config as XML
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOverdueConfigXml: (options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Upload the full overdue config as JSON
     * @param {Overdue} body
     * @param {string} xKillbillCreatedBy
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    uploadOverdueConfigJson: (body: Overdue, xKillbillCreatedBy: string, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Upload the full overdue config as XML
     * @param {string} body
     * @param {string} xKillbillCreatedBy
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    uploadOverdueConfigXml: (body: string, xKillbillCreatedBy: string, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * OverdueApi - functional programming interface
 * @export
 */
export declare const OverdueApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary Retrieve the overdue config as JSON
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOverdueConfigJson(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Overdue>>;
    /**
     *
     * @summary Retrieve the overdue config as XML
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOverdueConfigXml(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>>;
    /**
     *
     * @summary Upload the full overdue config as JSON
     * @param {Overdue} body
     * @param {string} xKillbillCreatedBy
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    uploadOverdueConfigJson(body: Overdue, xKillbillCreatedBy: string, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Overdue>>;
    /**
     *
     * @summary Upload the full overdue config as XML
     * @param {string} body
     * @param {string} xKillbillCreatedBy
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    uploadOverdueConfigXml(body: string, xKillbillCreatedBy: string, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>>;
};
/**
 * OverdueApi - factory interface
 * @export
 */
export declare const OverdueApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Retrieve the overdue config as JSON
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOverdueConfigJson(options?: any): AxiosPromise<Overdue>;
    /**
     *
     * @summary Retrieve the overdue config as XML
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getOverdueConfigXml(options?: any): AxiosPromise<string>;
    /**
     *
     * @summary Upload the full overdue config as JSON
     * @param {Overdue} body
     * @param {string} xKillbillCreatedBy
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    uploadOverdueConfigJson(body: Overdue, xKillbillCreatedBy: string, xKillbillReason?: string, xKillbillComment?: string, options?: any): AxiosPromise<Overdue>;
    /**
     *
     * @summary Upload the full overdue config as XML
     * @param {string} body
     * @param {string} xKillbillCreatedBy
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    uploadOverdueConfigXml(body: string, xKillbillCreatedBy: string, xKillbillReason?: string, xKillbillComment?: string, options?: any): AxiosPromise<string>;
};
/**
 * OverdueApi - object-oriented interface
 * @export
 * @class OverdueApi
 * @extends {BaseAPI}
 */
export declare class OverdueApi extends BaseAPI {
    /**
     *
     * @summary Retrieve the overdue config as JSON
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OverdueApi
     */
    getOverdueConfigJson(options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Overdue, any>>;
    /**
     *
     * @summary Retrieve the overdue config as XML
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OverdueApi
     */
    getOverdueConfigXml(options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<string, any>>;
    /**
     *
     * @summary Upload the full overdue config as JSON
     * @param {Overdue} body
     * @param {string} xKillbillCreatedBy
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OverdueApi
     */
    uploadOverdueConfigJson(body: Overdue, xKillbillCreatedBy: string, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Overdue, any>>;
    /**
     *
     * @summary Upload the full overdue config as XML
     * @param {string} body
     * @param {string} xKillbillCreatedBy
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OverdueApi
     */
    uploadOverdueConfigXml(body: string, xKillbillCreatedBy: string, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<string, any>>;
}
/**
 * PaymentApi - axios parameter creator
 * @export
 */
export declare const PaymentApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Cancels a scheduled payment attempt retry
     * @param {string} transactionExternalKey
     * @param {string} xKillbillCreatedBy
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    cancelScheduledPaymentTransactionByExternalKey: (transactionExternalKey: string, xKillbillCreatedBy: string, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Cancels a scheduled payment attempt retry
     * @param {string} paymentTransactionId
     * @param {string} xKillbillCreatedBy
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    cancelScheduledPaymentTransactionById: (paymentTransactionId: string, xKillbillCreatedBy: string, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Capture an existing authorization
     * @param {PaymentTransaction} body
     * @param {string} paymentId
     * @param {string} xKillbillCreatedBy
     * @param {Array<string>} [controlPluginName]
     * @param {Array<string>} [pluginProperty]
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    captureAuthorization: (body: PaymentTransaction, paymentId: string, xKillbillCreatedBy: string, controlPluginName?: Array<string>, pluginProperty?: Array<string>, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Capture an existing authorization
     * @param {PaymentTransaction} body
     * @param {string} xKillbillCreatedBy
     * @param {Array<string>} [controlPluginName]
     * @param {Array<string>} [pluginProperty]
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    captureAuthorizationByExternalKey: (body: PaymentTransaction, xKillbillCreatedBy: string, controlPluginName?: Array<string>, pluginProperty?: Array<string>, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Record a chargeback
     * @param {PaymentTransaction} body
     * @param {string} paymentId
     * @param {string} xKillbillCreatedBy
     * @param {Array<string>} [controlPluginName]
     * @param {Array<string>} [pluginProperty]
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    chargebackPayment: (body: PaymentTransaction, paymentId: string, xKillbillCreatedBy: string, controlPluginName?: Array<string>, pluginProperty?: Array<string>, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Record a chargeback
     * @param {PaymentTransaction} body
     * @param {string} xKillbillCreatedBy
     * @param {Array<string>} [controlPluginName]
     * @param {Array<string>} [pluginProperty]
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    chargebackPaymentByExternalKey: (body: PaymentTransaction, xKillbillCreatedBy: string, controlPluginName?: Array<string>, pluginProperty?: Array<string>, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Record a chargeback reversal
     * @param {PaymentTransaction} body
     * @param {string} paymentId
     * @param {string} xKillbillCreatedBy
     * @param {Array<string>} [controlPluginName]
     * @param {Array<string>} [pluginProperty]
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    chargebackReversalPayment: (body: PaymentTransaction, paymentId: string, xKillbillCreatedBy: string, controlPluginName?: Array<string>, pluginProperty?: Array<string>, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Record a chargeback reversal
     * @param {PaymentTransaction} body
     * @param {string} xKillbillCreatedBy
     * @param {Array<string>} [controlPluginName]
     * @param {Array<string>} [pluginProperty]
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    chargebackReversalPaymentByExternalKey: (body: PaymentTransaction, xKillbillCreatedBy: string, controlPluginName?: Array<string>, pluginProperty?: Array<string>, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Complete an existing transaction
     * @param {PaymentTransaction} body
     * @param {string} paymentId
     * @param {string} xKillbillCreatedBy
     * @param {Array<string>} [controlPluginName]
     * @param {Array<string>} [pluginProperty]
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    completeTransaction: (body: PaymentTransaction, paymentId: string, xKillbillCreatedBy: string, controlPluginName?: Array<string>, pluginProperty?: Array<string>, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Complete an existing transaction
     * @param {PaymentTransaction} body
     * @param {string} xKillbillCreatedBy
     * @param {Array<string>} [controlPluginName]
     * @param {Array<string>} [pluginProperty]
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    completeTransactionByExternalKey: (body: PaymentTransaction, xKillbillCreatedBy: string, controlPluginName?: Array<string>, pluginProperty?: Array<string>, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Combo api to create a new payment transaction on a existing (or not) account
     * @param {ComboPaymentTransaction} body
     * @param {string} xKillbillCreatedBy
     * @param {Array<string>} [controlPluginName]
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createComboPayment: (body: ComboPaymentTransaction, xKillbillCreatedBy: string, controlPluginName?: Array<string>, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Add custom fields to payment
     * @param {Array<CustomField>} body
     * @param {string} paymentId
     * @param {string} xKillbillCreatedBy
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createPaymentCustomFields: (body: Array<CustomField>, paymentId: string, xKillbillCreatedBy: string, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Add tags to payment payment
     * @param {Array<string>} body
     * @param {string} paymentId
     * @param {string} xKillbillCreatedBy
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createPaymentTags: (body: Array<string>, paymentId: string, xKillbillCreatedBy: string, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Remove custom fields from payment payment
     * @param {string} paymentId
     * @param {string} xKillbillCreatedBy
     * @param {Array<string>} [customField]
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deletePaymentCustomFields: (paymentId: string, xKillbillCreatedBy: string, customField?: Array<string>, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Remove tags from payment payment
     * @param {string} paymentId
     * @param {string} xKillbillCreatedBy
     * @param {Array<string>} [tagDef]
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deletePaymentTags: (paymentId: string, xKillbillCreatedBy: string, tagDef?: Array<string>, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Retrieve a payment by id
     * @param {string} paymentId
     * @param {boolean} [withPluginInfo]
     * @param {boolean} [withAttempts]
     * @param {Array<string>} [pluginProperty]
     * @param {'FULL' | 'MINIMAL' | 'NONE'} [audit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPayment: (paymentId: string, withPluginInfo?: boolean, withAttempts?: boolean, pluginProperty?: Array<string>, audit?: 'FULL' | 'MINIMAL' | 'NONE', options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Retrieve payment attempt audit logs with history by id
     * @param {string} paymentAttemptId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPaymentAttemptAuditLogsWithHistory: (paymentAttemptId: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Retrieve payment audit logs with history by id
     * @param {string} paymentId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPaymentAuditLogsWithHistory: (paymentId: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Retrieve a payment by external key
     * @param {string} externalKey
     * @param {boolean} [withPluginInfo]
     * @param {boolean} [withAttempts]
     * @param {Array<string>} [pluginProperty]
     * @param {'FULL' | 'MINIMAL' | 'NONE'} [audit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPaymentByExternalKey: (externalKey: string, withPluginInfo?: boolean, withAttempts?: boolean, pluginProperty?: Array<string>, audit?: 'FULL' | 'MINIMAL' | 'NONE', options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Retrieve payment custom fields
     * @param {string} paymentId
     * @param {'FULL' | 'MINIMAL' | 'NONE'} [audit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPaymentCustomFields: (paymentId: string, audit?: 'FULL' | 'MINIMAL' | 'NONE', options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Retrieve payment payment tags
     * @param {string} paymentId
     * @param {boolean} [includedDeleted]
     * @param {'FULL' | 'MINIMAL' | 'NONE'} [audit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPaymentTags: (paymentId: string, includedDeleted?: boolean, audit?: 'FULL' | 'MINIMAL' | 'NONE', options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Get payments
     * @param {number} [offset]
     * @param {number} [limit]
     * @param {string} [pluginName]
     * @param {boolean} [withPluginInfo]
     * @param {boolean} [withAttempts]
     * @param {Array<string>} [pluginProperty]
     * @param {'FULL' | 'MINIMAL' | 'NONE'} [audit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPayments: (offset?: number, limit?: number, pluginName?: string, withPluginInfo?: boolean, withAttempts?: boolean, pluginProperty?: Array<string>, audit?: 'FULL' | 'MINIMAL' | 'NONE', options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Modify custom fields to payment
     * @param {Array<CustomField>} body
     * @param {string} paymentId
     * @param {string} xKillbillCreatedBy
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    modifyPaymentCustomFields: (body: Array<CustomField>, paymentId: string, xKillbillCreatedBy: string, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Refund an existing payment
     * @param {PaymentTransaction} body
     * @param {string} paymentId
     * @param {string} xKillbillCreatedBy
     * @param {Array<string>} [controlPluginName]
     * @param {Array<string>} [pluginProperty]
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    refundPayment: (body: PaymentTransaction, paymentId: string, xKillbillCreatedBy: string, controlPluginName?: Array<string>, pluginProperty?: Array<string>, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Refund an existing payment
     * @param {PaymentTransaction} body
     * @param {string} xKillbillCreatedBy
     * @param {Array<string>} [controlPluginName]
     * @param {Array<string>} [pluginProperty]
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    refundPaymentByExternalKey: (body: PaymentTransaction, xKillbillCreatedBy: string, controlPluginName?: Array<string>, pluginProperty?: Array<string>, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Search payments
     * @param {string} searchKey
     * @param {number} [offset]
     * @param {number} [limit]
     * @param {boolean} [withPluginInfo]
     * @param {boolean} [withAttempts]
     * @param {string} [pluginName]
     * @param {Array<string>} [pluginProperty]
     * @param {'FULL' | 'MINIMAL' | 'NONE'} [audit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchPayments: (searchKey: string, offset?: number, limit?: number, withPluginInfo?: boolean, withAttempts?: boolean, pluginName?: string, pluginProperty?: Array<string>, audit?: 'FULL' | 'MINIMAL' | 'NONE', options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Void an existing payment
     * @param {PaymentTransaction} body
     * @param {string} paymentId
     * @param {string} xKillbillCreatedBy
     * @param {Array<string>} [controlPluginName]
     * @param {Array<string>} [pluginProperty]
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    voidPayment: (body: PaymentTransaction, paymentId: string, xKillbillCreatedBy: string, controlPluginName?: Array<string>, pluginProperty?: Array<string>, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Void an existing payment
     * @param {PaymentTransaction} body
     * @param {string} xKillbillCreatedBy
     * @param {Array<string>} [controlPluginName]
     * @param {Array<string>} [pluginProperty]
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    voidPaymentByExternalKey: (body: PaymentTransaction, xKillbillCreatedBy: string, controlPluginName?: Array<string>, pluginProperty?: Array<string>, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * PaymentApi - functional programming interface
 * @export
 */
export declare const PaymentApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary Cancels a scheduled payment attempt retry
     * @param {string} transactionExternalKey
     * @param {string} xKillbillCreatedBy
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    cancelScheduledPaymentTransactionByExternalKey(transactionExternalKey: string, xKillbillCreatedBy: string, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary Cancels a scheduled payment attempt retry
     * @param {string} paymentTransactionId
     * @param {string} xKillbillCreatedBy
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    cancelScheduledPaymentTransactionById(paymentTransactionId: string, xKillbillCreatedBy: string, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary Capture an existing authorization
     * @param {PaymentTransaction} body
     * @param {string} paymentId
     * @param {string} xKillbillCreatedBy
     * @param {Array<string>} [controlPluginName]
     * @param {Array<string>} [pluginProperty]
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    captureAuthorization(body: PaymentTransaction, paymentId: string, xKillbillCreatedBy: string, controlPluginName?: Array<string>, pluginProperty?: Array<string>, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Payment>>;
    /**
     *
     * @summary Capture an existing authorization
     * @param {PaymentTransaction} body
     * @param {string} xKillbillCreatedBy
     * @param {Array<string>} [controlPluginName]
     * @param {Array<string>} [pluginProperty]
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    captureAuthorizationByExternalKey(body: PaymentTransaction, xKillbillCreatedBy: string, controlPluginName?: Array<string>, pluginProperty?: Array<string>, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Payment>>;
    /**
     *
     * @summary Record a chargeback
     * @param {PaymentTransaction} body
     * @param {string} paymentId
     * @param {string} xKillbillCreatedBy
     * @param {Array<string>} [controlPluginName]
     * @param {Array<string>} [pluginProperty]
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    chargebackPayment(body: PaymentTransaction, paymentId: string, xKillbillCreatedBy: string, controlPluginName?: Array<string>, pluginProperty?: Array<string>, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Payment>>;
    /**
     *
     * @summary Record a chargeback
     * @param {PaymentTransaction} body
     * @param {string} xKillbillCreatedBy
     * @param {Array<string>} [controlPluginName]
     * @param {Array<string>} [pluginProperty]
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    chargebackPaymentByExternalKey(body: PaymentTransaction, xKillbillCreatedBy: string, controlPluginName?: Array<string>, pluginProperty?: Array<string>, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Payment>>;
    /**
     *
     * @summary Record a chargeback reversal
     * @param {PaymentTransaction} body
     * @param {string} paymentId
     * @param {string} xKillbillCreatedBy
     * @param {Array<string>} [controlPluginName]
     * @param {Array<string>} [pluginProperty]
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    chargebackReversalPayment(body: PaymentTransaction, paymentId: string, xKillbillCreatedBy: string, controlPluginName?: Array<string>, pluginProperty?: Array<string>, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Payment>>;
    /**
     *
     * @summary Record a chargeback reversal
     * @param {PaymentTransaction} body
     * @param {string} xKillbillCreatedBy
     * @param {Array<string>} [controlPluginName]
     * @param {Array<string>} [pluginProperty]
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    chargebackReversalPaymentByExternalKey(body: PaymentTransaction, xKillbillCreatedBy: string, controlPluginName?: Array<string>, pluginProperty?: Array<string>, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Payment>>;
    /**
     *
     * @summary Complete an existing transaction
     * @param {PaymentTransaction} body
     * @param {string} paymentId
     * @param {string} xKillbillCreatedBy
     * @param {Array<string>} [controlPluginName]
     * @param {Array<string>} [pluginProperty]
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    completeTransaction(body: PaymentTransaction, paymentId: string, xKillbillCreatedBy: string, controlPluginName?: Array<string>, pluginProperty?: Array<string>, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary Complete an existing transaction
     * @param {PaymentTransaction} body
     * @param {string} xKillbillCreatedBy
     * @param {Array<string>} [controlPluginName]
     * @param {Array<string>} [pluginProperty]
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    completeTransactionByExternalKey(body: PaymentTransaction, xKillbillCreatedBy: string, controlPluginName?: Array<string>, pluginProperty?: Array<string>, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary Combo api to create a new payment transaction on a existing (or not) account
     * @param {ComboPaymentTransaction} body
     * @param {string} xKillbillCreatedBy
     * @param {Array<string>} [controlPluginName]
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createComboPayment(body: ComboPaymentTransaction, xKillbillCreatedBy: string, controlPluginName?: Array<string>, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Payment>>;
    /**
     *
     * @summary Add custom fields to payment
     * @param {Array<CustomField>} body
     * @param {string} paymentId
     * @param {string} xKillbillCreatedBy
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createPaymentCustomFields(body: Array<CustomField>, paymentId: string, xKillbillCreatedBy: string, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CustomField>>>;
    /**
     *
     * @summary Add tags to payment payment
     * @param {Array<string>} body
     * @param {string} paymentId
     * @param {string} xKillbillCreatedBy
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createPaymentTags(body: Array<string>, paymentId: string, xKillbillCreatedBy: string, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Tag>>>;
    /**
     *
     * @summary Remove custom fields from payment payment
     * @param {string} paymentId
     * @param {string} xKillbillCreatedBy
     * @param {Array<string>} [customField]
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deletePaymentCustomFields(paymentId: string, xKillbillCreatedBy: string, customField?: Array<string>, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary Remove tags from payment payment
     * @param {string} paymentId
     * @param {string} xKillbillCreatedBy
     * @param {Array<string>} [tagDef]
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deletePaymentTags(paymentId: string, xKillbillCreatedBy: string, tagDef?: Array<string>, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary Retrieve a payment by id
     * @param {string} paymentId
     * @param {boolean} [withPluginInfo]
     * @param {boolean} [withAttempts]
     * @param {Array<string>} [pluginProperty]
     * @param {'FULL' | 'MINIMAL' | 'NONE'} [audit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPayment(paymentId: string, withPluginInfo?: boolean, withAttempts?: boolean, pluginProperty?: Array<string>, audit?: 'FULL' | 'MINIMAL' | 'NONE', options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Payment>>;
    /**
     *
     * @summary Retrieve payment attempt audit logs with history by id
     * @param {string} paymentAttemptId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPaymentAttemptAuditLogsWithHistory(paymentAttemptId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<AuditLog>>>;
    /**
     *
     * @summary Retrieve payment audit logs with history by id
     * @param {string} paymentId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPaymentAuditLogsWithHistory(paymentId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<AuditLog>>>;
    /**
     *
     * @summary Retrieve a payment by external key
     * @param {string} externalKey
     * @param {boolean} [withPluginInfo]
     * @param {boolean} [withAttempts]
     * @param {Array<string>} [pluginProperty]
     * @param {'FULL' | 'MINIMAL' | 'NONE'} [audit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPaymentByExternalKey(externalKey: string, withPluginInfo?: boolean, withAttempts?: boolean, pluginProperty?: Array<string>, audit?: 'FULL' | 'MINIMAL' | 'NONE', options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Payment>>;
    /**
     *
     * @summary Retrieve payment custom fields
     * @param {string} paymentId
     * @param {'FULL' | 'MINIMAL' | 'NONE'} [audit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPaymentCustomFields(paymentId: string, audit?: 'FULL' | 'MINIMAL' | 'NONE', options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CustomField>>>;
    /**
     *
     * @summary Retrieve payment payment tags
     * @param {string} paymentId
     * @param {boolean} [includedDeleted]
     * @param {'FULL' | 'MINIMAL' | 'NONE'} [audit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPaymentTags(paymentId: string, includedDeleted?: boolean, audit?: 'FULL' | 'MINIMAL' | 'NONE', options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Tag>>>;
    /**
     *
     * @summary Get payments
     * @param {number} [offset]
     * @param {number} [limit]
     * @param {string} [pluginName]
     * @param {boolean} [withPluginInfo]
     * @param {boolean} [withAttempts]
     * @param {Array<string>} [pluginProperty]
     * @param {'FULL' | 'MINIMAL' | 'NONE'} [audit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPayments(offset?: number, limit?: number, pluginName?: string, withPluginInfo?: boolean, withAttempts?: boolean, pluginProperty?: Array<string>, audit?: 'FULL' | 'MINIMAL' | 'NONE', options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Payment>>>;
    /**
     *
     * @summary Modify custom fields to payment
     * @param {Array<CustomField>} body
     * @param {string} paymentId
     * @param {string} xKillbillCreatedBy
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    modifyPaymentCustomFields(body: Array<CustomField>, paymentId: string, xKillbillCreatedBy: string, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary Refund an existing payment
     * @param {PaymentTransaction} body
     * @param {string} paymentId
     * @param {string} xKillbillCreatedBy
     * @param {Array<string>} [controlPluginName]
     * @param {Array<string>} [pluginProperty]
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    refundPayment(body: PaymentTransaction, paymentId: string, xKillbillCreatedBy: string, controlPluginName?: Array<string>, pluginProperty?: Array<string>, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Payment>>;
    /**
     *
     * @summary Refund an existing payment
     * @param {PaymentTransaction} body
     * @param {string} xKillbillCreatedBy
     * @param {Array<string>} [controlPluginName]
     * @param {Array<string>} [pluginProperty]
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    refundPaymentByExternalKey(body: PaymentTransaction, xKillbillCreatedBy: string, controlPluginName?: Array<string>, pluginProperty?: Array<string>, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Payment>>;
    /**
     *
     * @summary Search payments
     * @param {string} searchKey
     * @param {number} [offset]
     * @param {number} [limit]
     * @param {boolean} [withPluginInfo]
     * @param {boolean} [withAttempts]
     * @param {string} [pluginName]
     * @param {Array<string>} [pluginProperty]
     * @param {'FULL' | 'MINIMAL' | 'NONE'} [audit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchPayments(searchKey: string, offset?: number, limit?: number, withPluginInfo?: boolean, withAttempts?: boolean, pluginName?: string, pluginProperty?: Array<string>, audit?: 'FULL' | 'MINIMAL' | 'NONE', options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Payment>>>;
    /**
     *
     * @summary Void an existing payment
     * @param {PaymentTransaction} body
     * @param {string} paymentId
     * @param {string} xKillbillCreatedBy
     * @param {Array<string>} [controlPluginName]
     * @param {Array<string>} [pluginProperty]
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    voidPayment(body: PaymentTransaction, paymentId: string, xKillbillCreatedBy: string, controlPluginName?: Array<string>, pluginProperty?: Array<string>, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary Void an existing payment
     * @param {PaymentTransaction} body
     * @param {string} xKillbillCreatedBy
     * @param {Array<string>} [controlPluginName]
     * @param {Array<string>} [pluginProperty]
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    voidPaymentByExternalKey(body: PaymentTransaction, xKillbillCreatedBy: string, controlPluginName?: Array<string>, pluginProperty?: Array<string>, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
};
/**
 * PaymentApi - factory interface
 * @export
 */
export declare const PaymentApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Cancels a scheduled payment attempt retry
     * @param {string} transactionExternalKey
     * @param {string} xKillbillCreatedBy
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    cancelScheduledPaymentTransactionByExternalKey(transactionExternalKey: string, xKillbillCreatedBy: string, xKillbillReason?: string, xKillbillComment?: string, options?: any): AxiosPromise<void>;
    /**
     *
     * @summary Cancels a scheduled payment attempt retry
     * @param {string} paymentTransactionId
     * @param {string} xKillbillCreatedBy
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    cancelScheduledPaymentTransactionById(paymentTransactionId: string, xKillbillCreatedBy: string, xKillbillReason?: string, xKillbillComment?: string, options?: any): AxiosPromise<void>;
    /**
     *
     * @summary Capture an existing authorization
     * @param {PaymentTransaction} body
     * @param {string} paymentId
     * @param {string} xKillbillCreatedBy
     * @param {Array<string>} [controlPluginName]
     * @param {Array<string>} [pluginProperty]
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    captureAuthorization(body: PaymentTransaction, paymentId: string, xKillbillCreatedBy: string, controlPluginName?: Array<string>, pluginProperty?: Array<string>, xKillbillReason?: string, xKillbillComment?: string, options?: any): AxiosPromise<Payment>;
    /**
     *
     * @summary Capture an existing authorization
     * @param {PaymentTransaction} body
     * @param {string} xKillbillCreatedBy
     * @param {Array<string>} [controlPluginName]
     * @param {Array<string>} [pluginProperty]
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    captureAuthorizationByExternalKey(body: PaymentTransaction, xKillbillCreatedBy: string, controlPluginName?: Array<string>, pluginProperty?: Array<string>, xKillbillReason?: string, xKillbillComment?: string, options?: any): AxiosPromise<Payment>;
    /**
     *
     * @summary Record a chargeback
     * @param {PaymentTransaction} body
     * @param {string} paymentId
     * @param {string} xKillbillCreatedBy
     * @param {Array<string>} [controlPluginName]
     * @param {Array<string>} [pluginProperty]
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    chargebackPayment(body: PaymentTransaction, paymentId: string, xKillbillCreatedBy: string, controlPluginName?: Array<string>, pluginProperty?: Array<string>, xKillbillReason?: string, xKillbillComment?: string, options?: any): AxiosPromise<Payment>;
    /**
     *
     * @summary Record a chargeback
     * @param {PaymentTransaction} body
     * @param {string} xKillbillCreatedBy
     * @param {Array<string>} [controlPluginName]
     * @param {Array<string>} [pluginProperty]
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    chargebackPaymentByExternalKey(body: PaymentTransaction, xKillbillCreatedBy: string, controlPluginName?: Array<string>, pluginProperty?: Array<string>, xKillbillReason?: string, xKillbillComment?: string, options?: any): AxiosPromise<Payment>;
    /**
     *
     * @summary Record a chargeback reversal
     * @param {PaymentTransaction} body
     * @param {string} paymentId
     * @param {string} xKillbillCreatedBy
     * @param {Array<string>} [controlPluginName]
     * @param {Array<string>} [pluginProperty]
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    chargebackReversalPayment(body: PaymentTransaction, paymentId: string, xKillbillCreatedBy: string, controlPluginName?: Array<string>, pluginProperty?: Array<string>, xKillbillReason?: string, xKillbillComment?: string, options?: any): AxiosPromise<Payment>;
    /**
     *
     * @summary Record a chargeback reversal
     * @param {PaymentTransaction} body
     * @param {string} xKillbillCreatedBy
     * @param {Array<string>} [controlPluginName]
     * @param {Array<string>} [pluginProperty]
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    chargebackReversalPaymentByExternalKey(body: PaymentTransaction, xKillbillCreatedBy: string, controlPluginName?: Array<string>, pluginProperty?: Array<string>, xKillbillReason?: string, xKillbillComment?: string, options?: any): AxiosPromise<Payment>;
    /**
     *
     * @summary Complete an existing transaction
     * @param {PaymentTransaction} body
     * @param {string} paymentId
     * @param {string} xKillbillCreatedBy
     * @param {Array<string>} [controlPluginName]
     * @param {Array<string>} [pluginProperty]
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    completeTransaction(body: PaymentTransaction, paymentId: string, xKillbillCreatedBy: string, controlPluginName?: Array<string>, pluginProperty?: Array<string>, xKillbillReason?: string, xKillbillComment?: string, options?: any): AxiosPromise<void>;
    /**
     *
     * @summary Complete an existing transaction
     * @param {PaymentTransaction} body
     * @param {string} xKillbillCreatedBy
     * @param {Array<string>} [controlPluginName]
     * @param {Array<string>} [pluginProperty]
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    completeTransactionByExternalKey(body: PaymentTransaction, xKillbillCreatedBy: string, controlPluginName?: Array<string>, pluginProperty?: Array<string>, xKillbillReason?: string, xKillbillComment?: string, options?: any): AxiosPromise<void>;
    /**
     *
     * @summary Combo api to create a new payment transaction on a existing (or not) account
     * @param {ComboPaymentTransaction} body
     * @param {string} xKillbillCreatedBy
     * @param {Array<string>} [controlPluginName]
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createComboPayment(body: ComboPaymentTransaction, xKillbillCreatedBy: string, controlPluginName?: Array<string>, xKillbillReason?: string, xKillbillComment?: string, options?: any): AxiosPromise<Payment>;
    /**
     *
     * @summary Add custom fields to payment
     * @param {Array<CustomField>} body
     * @param {string} paymentId
     * @param {string} xKillbillCreatedBy
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createPaymentCustomFields(body: Array<CustomField>, paymentId: string, xKillbillCreatedBy: string, xKillbillReason?: string, xKillbillComment?: string, options?: any): AxiosPromise<Array<CustomField>>;
    /**
     *
     * @summary Add tags to payment payment
     * @param {Array<string>} body
     * @param {string} paymentId
     * @param {string} xKillbillCreatedBy
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createPaymentTags(body: Array<string>, paymentId: string, xKillbillCreatedBy: string, xKillbillReason?: string, xKillbillComment?: string, options?: any): AxiosPromise<Array<Tag>>;
    /**
     *
     * @summary Remove custom fields from payment payment
     * @param {string} paymentId
     * @param {string} xKillbillCreatedBy
     * @param {Array<string>} [customField]
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deletePaymentCustomFields(paymentId: string, xKillbillCreatedBy: string, customField?: Array<string>, xKillbillReason?: string, xKillbillComment?: string, options?: any): AxiosPromise<void>;
    /**
     *
     * @summary Remove tags from payment payment
     * @param {string} paymentId
     * @param {string} xKillbillCreatedBy
     * @param {Array<string>} [tagDef]
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deletePaymentTags(paymentId: string, xKillbillCreatedBy: string, tagDef?: Array<string>, xKillbillReason?: string, xKillbillComment?: string, options?: any): AxiosPromise<void>;
    /**
     *
     * @summary Retrieve a payment by id
     * @param {string} paymentId
     * @param {boolean} [withPluginInfo]
     * @param {boolean} [withAttempts]
     * @param {Array<string>} [pluginProperty]
     * @param {'FULL' | 'MINIMAL' | 'NONE'} [audit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPayment(paymentId: string, withPluginInfo?: boolean, withAttempts?: boolean, pluginProperty?: Array<string>, audit?: 'FULL' | 'MINIMAL' | 'NONE', options?: any): AxiosPromise<Payment>;
    /**
     *
     * @summary Retrieve payment attempt audit logs with history by id
     * @param {string} paymentAttemptId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPaymentAttemptAuditLogsWithHistory(paymentAttemptId: string, options?: any): AxiosPromise<Array<AuditLog>>;
    /**
     *
     * @summary Retrieve payment audit logs with history by id
     * @param {string} paymentId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPaymentAuditLogsWithHistory(paymentId: string, options?: any): AxiosPromise<Array<AuditLog>>;
    /**
     *
     * @summary Retrieve a payment by external key
     * @param {string} externalKey
     * @param {boolean} [withPluginInfo]
     * @param {boolean} [withAttempts]
     * @param {Array<string>} [pluginProperty]
     * @param {'FULL' | 'MINIMAL' | 'NONE'} [audit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPaymentByExternalKey(externalKey: string, withPluginInfo?: boolean, withAttempts?: boolean, pluginProperty?: Array<string>, audit?: 'FULL' | 'MINIMAL' | 'NONE', options?: any): AxiosPromise<Payment>;
    /**
     *
     * @summary Retrieve payment custom fields
     * @param {string} paymentId
     * @param {'FULL' | 'MINIMAL' | 'NONE'} [audit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPaymentCustomFields(paymentId: string, audit?: 'FULL' | 'MINIMAL' | 'NONE', options?: any): AxiosPromise<Array<CustomField>>;
    /**
     *
     * @summary Retrieve payment payment tags
     * @param {string} paymentId
     * @param {boolean} [includedDeleted]
     * @param {'FULL' | 'MINIMAL' | 'NONE'} [audit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPaymentTags(paymentId: string, includedDeleted?: boolean, audit?: 'FULL' | 'MINIMAL' | 'NONE', options?: any): AxiosPromise<Array<Tag>>;
    /**
     *
     * @summary Get payments
     * @param {number} [offset]
     * @param {number} [limit]
     * @param {string} [pluginName]
     * @param {boolean} [withPluginInfo]
     * @param {boolean} [withAttempts]
     * @param {Array<string>} [pluginProperty]
     * @param {'FULL' | 'MINIMAL' | 'NONE'} [audit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPayments(offset?: number, limit?: number, pluginName?: string, withPluginInfo?: boolean, withAttempts?: boolean, pluginProperty?: Array<string>, audit?: 'FULL' | 'MINIMAL' | 'NONE', options?: any): AxiosPromise<Array<Payment>>;
    /**
     *
     * @summary Modify custom fields to payment
     * @param {Array<CustomField>} body
     * @param {string} paymentId
     * @param {string} xKillbillCreatedBy
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    modifyPaymentCustomFields(body: Array<CustomField>, paymentId: string, xKillbillCreatedBy: string, xKillbillReason?: string, xKillbillComment?: string, options?: any): AxiosPromise<void>;
    /**
     *
     * @summary Refund an existing payment
     * @param {PaymentTransaction} body
     * @param {string} paymentId
     * @param {string} xKillbillCreatedBy
     * @param {Array<string>} [controlPluginName]
     * @param {Array<string>} [pluginProperty]
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    refundPayment(body: PaymentTransaction, paymentId: string, xKillbillCreatedBy: string, controlPluginName?: Array<string>, pluginProperty?: Array<string>, xKillbillReason?: string, xKillbillComment?: string, options?: any): AxiosPromise<Payment>;
    /**
     *
     * @summary Refund an existing payment
     * @param {PaymentTransaction} body
     * @param {string} xKillbillCreatedBy
     * @param {Array<string>} [controlPluginName]
     * @param {Array<string>} [pluginProperty]
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    refundPaymentByExternalKey(body: PaymentTransaction, xKillbillCreatedBy: string, controlPluginName?: Array<string>, pluginProperty?: Array<string>, xKillbillReason?: string, xKillbillComment?: string, options?: any): AxiosPromise<Payment>;
    /**
     *
     * @summary Search payments
     * @param {string} searchKey
     * @param {number} [offset]
     * @param {number} [limit]
     * @param {boolean} [withPluginInfo]
     * @param {boolean} [withAttempts]
     * @param {string} [pluginName]
     * @param {Array<string>} [pluginProperty]
     * @param {'FULL' | 'MINIMAL' | 'NONE'} [audit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchPayments(searchKey: string, offset?: number, limit?: number, withPluginInfo?: boolean, withAttempts?: boolean, pluginName?: string, pluginProperty?: Array<string>, audit?: 'FULL' | 'MINIMAL' | 'NONE', options?: any): AxiosPromise<Array<Payment>>;
    /**
     *
     * @summary Void an existing payment
     * @param {PaymentTransaction} body
     * @param {string} paymentId
     * @param {string} xKillbillCreatedBy
     * @param {Array<string>} [controlPluginName]
     * @param {Array<string>} [pluginProperty]
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    voidPayment(body: PaymentTransaction, paymentId: string, xKillbillCreatedBy: string, controlPluginName?: Array<string>, pluginProperty?: Array<string>, xKillbillReason?: string, xKillbillComment?: string, options?: any): AxiosPromise<void>;
    /**
     *
     * @summary Void an existing payment
     * @param {PaymentTransaction} body
     * @param {string} xKillbillCreatedBy
     * @param {Array<string>} [controlPluginName]
     * @param {Array<string>} [pluginProperty]
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    voidPaymentByExternalKey(body: PaymentTransaction, xKillbillCreatedBy: string, controlPluginName?: Array<string>, pluginProperty?: Array<string>, xKillbillReason?: string, xKillbillComment?: string, options?: any): AxiosPromise<void>;
};
/**
 * PaymentApi - object-oriented interface
 * @export
 * @class PaymentApi
 * @extends {BaseAPI}
 */
export declare class PaymentApi extends BaseAPI {
    /**
     *
     * @summary Cancels a scheduled payment attempt retry
     * @param {string} transactionExternalKey
     * @param {string} xKillbillCreatedBy
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentApi
     */
    cancelScheduledPaymentTransactionByExternalKey(transactionExternalKey: string, xKillbillCreatedBy: string, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     *
     * @summary Cancels a scheduled payment attempt retry
     * @param {string} paymentTransactionId
     * @param {string} xKillbillCreatedBy
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentApi
     */
    cancelScheduledPaymentTransactionById(paymentTransactionId: string, xKillbillCreatedBy: string, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     *
     * @summary Capture an existing authorization
     * @param {PaymentTransaction} body
     * @param {string} paymentId
     * @param {string} xKillbillCreatedBy
     * @param {Array<string>} [controlPluginName]
     * @param {Array<string>} [pluginProperty]
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentApi
     */
    captureAuthorization(body: PaymentTransaction, paymentId: string, xKillbillCreatedBy: string, controlPluginName?: Array<string>, pluginProperty?: Array<string>, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Payment, any>>;
    /**
     *
     * @summary Capture an existing authorization
     * @param {PaymentTransaction} body
     * @param {string} xKillbillCreatedBy
     * @param {Array<string>} [controlPluginName]
     * @param {Array<string>} [pluginProperty]
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentApi
     */
    captureAuthorizationByExternalKey(body: PaymentTransaction, xKillbillCreatedBy: string, controlPluginName?: Array<string>, pluginProperty?: Array<string>, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Payment, any>>;
    /**
     *
     * @summary Record a chargeback
     * @param {PaymentTransaction} body
     * @param {string} paymentId
     * @param {string} xKillbillCreatedBy
     * @param {Array<string>} [controlPluginName]
     * @param {Array<string>} [pluginProperty]
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentApi
     */
    chargebackPayment(body: PaymentTransaction, paymentId: string, xKillbillCreatedBy: string, controlPluginName?: Array<string>, pluginProperty?: Array<string>, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Payment, any>>;
    /**
     *
     * @summary Record a chargeback
     * @param {PaymentTransaction} body
     * @param {string} xKillbillCreatedBy
     * @param {Array<string>} [controlPluginName]
     * @param {Array<string>} [pluginProperty]
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentApi
     */
    chargebackPaymentByExternalKey(body: PaymentTransaction, xKillbillCreatedBy: string, controlPluginName?: Array<string>, pluginProperty?: Array<string>, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Payment, any>>;
    /**
     *
     * @summary Record a chargeback reversal
     * @param {PaymentTransaction} body
     * @param {string} paymentId
     * @param {string} xKillbillCreatedBy
     * @param {Array<string>} [controlPluginName]
     * @param {Array<string>} [pluginProperty]
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentApi
     */
    chargebackReversalPayment(body: PaymentTransaction, paymentId: string, xKillbillCreatedBy: string, controlPluginName?: Array<string>, pluginProperty?: Array<string>, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Payment, any>>;
    /**
     *
     * @summary Record a chargeback reversal
     * @param {PaymentTransaction} body
     * @param {string} xKillbillCreatedBy
     * @param {Array<string>} [controlPluginName]
     * @param {Array<string>} [pluginProperty]
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentApi
     */
    chargebackReversalPaymentByExternalKey(body: PaymentTransaction, xKillbillCreatedBy: string, controlPluginName?: Array<string>, pluginProperty?: Array<string>, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Payment, any>>;
    /**
     *
     * @summary Complete an existing transaction
     * @param {PaymentTransaction} body
     * @param {string} paymentId
     * @param {string} xKillbillCreatedBy
     * @param {Array<string>} [controlPluginName]
     * @param {Array<string>} [pluginProperty]
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentApi
     */
    completeTransaction(body: PaymentTransaction, paymentId: string, xKillbillCreatedBy: string, controlPluginName?: Array<string>, pluginProperty?: Array<string>, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     *
     * @summary Complete an existing transaction
     * @param {PaymentTransaction} body
     * @param {string} xKillbillCreatedBy
     * @param {Array<string>} [controlPluginName]
     * @param {Array<string>} [pluginProperty]
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentApi
     */
    completeTransactionByExternalKey(body: PaymentTransaction, xKillbillCreatedBy: string, controlPluginName?: Array<string>, pluginProperty?: Array<string>, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     *
     * @summary Combo api to create a new payment transaction on a existing (or not) account
     * @param {ComboPaymentTransaction} body
     * @param {string} xKillbillCreatedBy
     * @param {Array<string>} [controlPluginName]
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentApi
     */
    createComboPayment(body: ComboPaymentTransaction, xKillbillCreatedBy: string, controlPluginName?: Array<string>, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Payment, any>>;
    /**
     *
     * @summary Add custom fields to payment
     * @param {Array<CustomField>} body
     * @param {string} paymentId
     * @param {string} xKillbillCreatedBy
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentApi
     */
    createPaymentCustomFields(body: Array<CustomField>, paymentId: string, xKillbillCreatedBy: string, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<CustomField[], any>>;
    /**
     *
     * @summary Add tags to payment payment
     * @param {Array<string>} body
     * @param {string} paymentId
     * @param {string} xKillbillCreatedBy
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentApi
     */
    createPaymentTags(body: Array<string>, paymentId: string, xKillbillCreatedBy: string, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Tag[], any>>;
    /**
     *
     * @summary Remove custom fields from payment payment
     * @param {string} paymentId
     * @param {string} xKillbillCreatedBy
     * @param {Array<string>} [customField]
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentApi
     */
    deletePaymentCustomFields(paymentId: string, xKillbillCreatedBy: string, customField?: Array<string>, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     *
     * @summary Remove tags from payment payment
     * @param {string} paymentId
     * @param {string} xKillbillCreatedBy
     * @param {Array<string>} [tagDef]
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentApi
     */
    deletePaymentTags(paymentId: string, xKillbillCreatedBy: string, tagDef?: Array<string>, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     *
     * @summary Retrieve a payment by id
     * @param {string} paymentId
     * @param {boolean} [withPluginInfo]
     * @param {boolean} [withAttempts]
     * @param {Array<string>} [pluginProperty]
     * @param {'FULL' | 'MINIMAL' | 'NONE'} [audit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentApi
     */
    getPayment(paymentId: string, withPluginInfo?: boolean, withAttempts?: boolean, pluginProperty?: Array<string>, audit?: 'FULL' | 'MINIMAL' | 'NONE', options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Payment, any>>;
    /**
     *
     * @summary Retrieve payment attempt audit logs with history by id
     * @param {string} paymentAttemptId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentApi
     */
    getPaymentAttemptAuditLogsWithHistory(paymentAttemptId: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<AuditLog[], any>>;
    /**
     *
     * @summary Retrieve payment audit logs with history by id
     * @param {string} paymentId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentApi
     */
    getPaymentAuditLogsWithHistory(paymentId: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<AuditLog[], any>>;
    /**
     *
     * @summary Retrieve a payment by external key
     * @param {string} externalKey
     * @param {boolean} [withPluginInfo]
     * @param {boolean} [withAttempts]
     * @param {Array<string>} [pluginProperty]
     * @param {'FULL' | 'MINIMAL' | 'NONE'} [audit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentApi
     */
    getPaymentByExternalKey(externalKey: string, withPluginInfo?: boolean, withAttempts?: boolean, pluginProperty?: Array<string>, audit?: 'FULL' | 'MINIMAL' | 'NONE', options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Payment, any>>;
    /**
     *
     * @summary Retrieve payment custom fields
     * @param {string} paymentId
     * @param {'FULL' | 'MINIMAL' | 'NONE'} [audit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentApi
     */
    getPaymentCustomFields(paymentId: string, audit?: 'FULL' | 'MINIMAL' | 'NONE', options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<CustomField[], any>>;
    /**
     *
     * @summary Retrieve payment payment tags
     * @param {string} paymentId
     * @param {boolean} [includedDeleted]
     * @param {'FULL' | 'MINIMAL' | 'NONE'} [audit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentApi
     */
    getPaymentTags(paymentId: string, includedDeleted?: boolean, audit?: 'FULL' | 'MINIMAL' | 'NONE', options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Tag[], any>>;
    /**
     *
     * @summary Get payments
     * @param {number} [offset]
     * @param {number} [limit]
     * @param {string} [pluginName]
     * @param {boolean} [withPluginInfo]
     * @param {boolean} [withAttempts]
     * @param {Array<string>} [pluginProperty]
     * @param {'FULL' | 'MINIMAL' | 'NONE'} [audit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentApi
     */
    getPayments(offset?: number, limit?: number, pluginName?: string, withPluginInfo?: boolean, withAttempts?: boolean, pluginProperty?: Array<string>, audit?: 'FULL' | 'MINIMAL' | 'NONE', options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Payment[], any>>;
    /**
     *
     * @summary Modify custom fields to payment
     * @param {Array<CustomField>} body
     * @param {string} paymentId
     * @param {string} xKillbillCreatedBy
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentApi
     */
    modifyPaymentCustomFields(body: Array<CustomField>, paymentId: string, xKillbillCreatedBy: string, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     *
     * @summary Refund an existing payment
     * @param {PaymentTransaction} body
     * @param {string} paymentId
     * @param {string} xKillbillCreatedBy
     * @param {Array<string>} [controlPluginName]
     * @param {Array<string>} [pluginProperty]
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentApi
     */
    refundPayment(body: PaymentTransaction, paymentId: string, xKillbillCreatedBy: string, controlPluginName?: Array<string>, pluginProperty?: Array<string>, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Payment, any>>;
    /**
     *
     * @summary Refund an existing payment
     * @param {PaymentTransaction} body
     * @param {string} xKillbillCreatedBy
     * @param {Array<string>} [controlPluginName]
     * @param {Array<string>} [pluginProperty]
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentApi
     */
    refundPaymentByExternalKey(body: PaymentTransaction, xKillbillCreatedBy: string, controlPluginName?: Array<string>, pluginProperty?: Array<string>, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Payment, any>>;
    /**
     *
     * @summary Search payments
     * @param {string} searchKey
     * @param {number} [offset]
     * @param {number} [limit]
     * @param {boolean} [withPluginInfo]
     * @param {boolean} [withAttempts]
     * @param {string} [pluginName]
     * @param {Array<string>} [pluginProperty]
     * @param {'FULL' | 'MINIMAL' | 'NONE'} [audit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentApi
     */
    searchPayments(searchKey: string, offset?: number, limit?: number, withPluginInfo?: boolean, withAttempts?: boolean, pluginName?: string, pluginProperty?: Array<string>, audit?: 'FULL' | 'MINIMAL' | 'NONE', options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Payment[], any>>;
    /**
     *
     * @summary Void an existing payment
     * @param {PaymentTransaction} body
     * @param {string} paymentId
     * @param {string} xKillbillCreatedBy
     * @param {Array<string>} [controlPluginName]
     * @param {Array<string>} [pluginProperty]
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentApi
     */
    voidPayment(body: PaymentTransaction, paymentId: string, xKillbillCreatedBy: string, controlPluginName?: Array<string>, pluginProperty?: Array<string>, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     *
     * @summary Void an existing payment
     * @param {PaymentTransaction} body
     * @param {string} xKillbillCreatedBy
     * @param {Array<string>} [controlPluginName]
     * @param {Array<string>} [pluginProperty]
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentApi
     */
    voidPaymentByExternalKey(body: PaymentTransaction, xKillbillCreatedBy: string, controlPluginName?: Array<string>, pluginProperty?: Array<string>, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
}
/**
 * PaymentGatewayApi - axios parameter creator
 * @export
 */
export declare const PaymentGatewayApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Combo API to generate form data to redirect the customer to the gateway
     * @param {ComboHostedPaymentPage} body
     * @param {string} xKillbillCreatedBy
     * @param {Array<string>} [controlPluginName]
     * @param {Array<string>} [pluginProperty]
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    buildComboFormDescriptor: (body: ComboHostedPaymentPage, xKillbillCreatedBy: string, controlPluginName?: Array<string>, pluginProperty?: Array<string>, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Generate form data to redirect the customer to the gateway
     * @param {HostedPaymentPageFields} body
     * @param {string} accountId
     * @param {string} xKillbillCreatedBy
     * @param {string} [paymentMethodId]
     * @param {Array<string>} [controlPluginName]
     * @param {Array<string>} [pluginProperty]
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    buildFormDescriptor: (body: HostedPaymentPageFields, accountId: string, xKillbillCreatedBy: string, paymentMethodId?: string, controlPluginName?: Array<string>, pluginProperty?: Array<string>, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * The response is built by the appropriate plugin
     * @summary Process a gateway notification
     * @param {string} body
     * @param {string} pluginName
     * @param {string} xKillbillCreatedBy
     * @param {Array<string>} [controlPluginName]
     * @param {Array<string>} [pluginProperty]
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    processNotification: (body: string, pluginName: string, xKillbillCreatedBy: string, controlPluginName?: Array<string>, pluginProperty?: Array<string>, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * PaymentGatewayApi - functional programming interface
 * @export
 */
export declare const PaymentGatewayApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary Combo API to generate form data to redirect the customer to the gateway
     * @param {ComboHostedPaymentPage} body
     * @param {string} xKillbillCreatedBy
     * @param {Array<string>} [controlPluginName]
     * @param {Array<string>} [pluginProperty]
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    buildComboFormDescriptor(body: ComboHostedPaymentPage, xKillbillCreatedBy: string, controlPluginName?: Array<string>, pluginProperty?: Array<string>, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<HostedPaymentPageFormDescriptor>>;
    /**
     *
     * @summary Generate form data to redirect the customer to the gateway
     * @param {HostedPaymentPageFields} body
     * @param {string} accountId
     * @param {string} xKillbillCreatedBy
     * @param {string} [paymentMethodId]
     * @param {Array<string>} [controlPluginName]
     * @param {Array<string>} [pluginProperty]
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    buildFormDescriptor(body: HostedPaymentPageFields, accountId: string, xKillbillCreatedBy: string, paymentMethodId?: string, controlPluginName?: Array<string>, pluginProperty?: Array<string>, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<HostedPaymentPageFormDescriptor>>;
    /**
     * The response is built by the appropriate plugin
     * @summary Process a gateway notification
     * @param {string} body
     * @param {string} pluginName
     * @param {string} xKillbillCreatedBy
     * @param {Array<string>} [controlPluginName]
     * @param {Array<string>} [pluginProperty]
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    processNotification(body: string, pluginName: string, xKillbillCreatedBy: string, controlPluginName?: Array<string>, pluginProperty?: Array<string>, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
};
/**
 * PaymentGatewayApi - factory interface
 * @export
 */
export declare const PaymentGatewayApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Combo API to generate form data to redirect the customer to the gateway
     * @param {ComboHostedPaymentPage} body
     * @param {string} xKillbillCreatedBy
     * @param {Array<string>} [controlPluginName]
     * @param {Array<string>} [pluginProperty]
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    buildComboFormDescriptor(body: ComboHostedPaymentPage, xKillbillCreatedBy: string, controlPluginName?: Array<string>, pluginProperty?: Array<string>, xKillbillReason?: string, xKillbillComment?: string, options?: any): AxiosPromise<HostedPaymentPageFormDescriptor>;
    /**
     *
     * @summary Generate form data to redirect the customer to the gateway
     * @param {HostedPaymentPageFields} body
     * @param {string} accountId
     * @param {string} xKillbillCreatedBy
     * @param {string} [paymentMethodId]
     * @param {Array<string>} [controlPluginName]
     * @param {Array<string>} [pluginProperty]
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    buildFormDescriptor(body: HostedPaymentPageFields, accountId: string, xKillbillCreatedBy: string, paymentMethodId?: string, controlPluginName?: Array<string>, pluginProperty?: Array<string>, xKillbillReason?: string, xKillbillComment?: string, options?: any): AxiosPromise<HostedPaymentPageFormDescriptor>;
    /**
     * The response is built by the appropriate plugin
     * @summary Process a gateway notification
     * @param {string} body
     * @param {string} pluginName
     * @param {string} xKillbillCreatedBy
     * @param {Array<string>} [controlPluginName]
     * @param {Array<string>} [pluginProperty]
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    processNotification(body: string, pluginName: string, xKillbillCreatedBy: string, controlPluginName?: Array<string>, pluginProperty?: Array<string>, xKillbillReason?: string, xKillbillComment?: string, options?: any): AxiosPromise<void>;
};
/**
 * PaymentGatewayApi - object-oriented interface
 * @export
 * @class PaymentGatewayApi
 * @extends {BaseAPI}
 */
export declare class PaymentGatewayApi extends BaseAPI {
    /**
     *
     * @summary Combo API to generate form data to redirect the customer to the gateway
     * @param {ComboHostedPaymentPage} body
     * @param {string} xKillbillCreatedBy
     * @param {Array<string>} [controlPluginName]
     * @param {Array<string>} [pluginProperty]
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentGatewayApi
     */
    buildComboFormDescriptor(body: ComboHostedPaymentPage, xKillbillCreatedBy: string, controlPluginName?: Array<string>, pluginProperty?: Array<string>, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<HostedPaymentPageFormDescriptor, any>>;
    /**
     *
     * @summary Generate form data to redirect the customer to the gateway
     * @param {HostedPaymentPageFields} body
     * @param {string} accountId
     * @param {string} xKillbillCreatedBy
     * @param {string} [paymentMethodId]
     * @param {Array<string>} [controlPluginName]
     * @param {Array<string>} [pluginProperty]
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentGatewayApi
     */
    buildFormDescriptor(body: HostedPaymentPageFields, accountId: string, xKillbillCreatedBy: string, paymentMethodId?: string, controlPluginName?: Array<string>, pluginProperty?: Array<string>, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<HostedPaymentPageFormDescriptor, any>>;
    /**
     * The response is built by the appropriate plugin
     * @summary Process a gateway notification
     * @param {string} body
     * @param {string} pluginName
     * @param {string} xKillbillCreatedBy
     * @param {Array<string>} [controlPluginName]
     * @param {Array<string>} [pluginProperty]
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentGatewayApi
     */
    processNotification(body: string, pluginName: string, xKillbillCreatedBy: string, controlPluginName?: Array<string>, pluginProperty?: Array<string>, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
}
/**
 * PaymentMethodApi - axios parameter creator
 * @export
 */
export declare const PaymentMethodApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Add custom fields to payment method
     * @param {Array<CustomField>} body
     * @param {string} paymentMethodId
     * @param {string} xKillbillCreatedBy
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createPaymentMethodCustomFields: (body: Array<CustomField>, paymentMethodId: string, xKillbillCreatedBy: string, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Delete a payment method
     * @param {string} paymentMethodId
     * @param {string} xKillbillCreatedBy
     * @param {boolean} [deleteDefaultPmWithAutoPayOff]
     * @param {boolean} [forceDefaultPmDeletion]
     * @param {Array<string>} [pluginProperty]
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deletePaymentMethod: (paymentMethodId: string, xKillbillCreatedBy: string, deleteDefaultPmWithAutoPayOff?: boolean, forceDefaultPmDeletion?: boolean, pluginProperty?: Array<string>, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Remove custom fields from payment method
     * @param {string} paymentMethodId
     * @param {string} xKillbillCreatedBy
     * @param {Array<string>} [customField]
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deletePaymentMethodCustomFields: (paymentMethodId: string, xKillbillCreatedBy: string, customField?: Array<string>, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Retrieve a payment method by id
     * @param {string} paymentMethodId
     * @param {boolean} [includedDeleted]
     * @param {boolean} [withPluginInfo]
     * @param {Array<string>} [pluginProperty]
     * @param {'FULL' | 'MINIMAL' | 'NONE'} [audit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPaymentMethod: (paymentMethodId: string, includedDeleted?: boolean, withPluginInfo?: boolean, pluginProperty?: Array<string>, audit?: 'FULL' | 'MINIMAL' | 'NONE', options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Retrieve payment method audit logs with history by id
     * @param {string} paymentMethodId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPaymentMethodAuditLogsWithHistory: (paymentMethodId: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Retrieve a payment method by external key
     * @param {string} externalKey
     * @param {boolean} [includedDeleted]
     * @param {boolean} [withPluginInfo]
     * @param {Array<string>} [pluginProperty]
     * @param {'FULL' | 'MINIMAL' | 'NONE'} [audit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPaymentMethodByKey: (externalKey: string, includedDeleted?: boolean, withPluginInfo?: boolean, pluginProperty?: Array<string>, audit?: 'FULL' | 'MINIMAL' | 'NONE', options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Retrieve payment method custom fields
     * @param {string} paymentMethodId
     * @param {'FULL' | 'MINIMAL' | 'NONE'} [audit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPaymentMethodCustomFields: (paymentMethodId: string, audit?: 'FULL' | 'MINIMAL' | 'NONE', options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary List payment methods
     * @param {number} [offset]
     * @param {number} [limit]
     * @param {string} [pluginName]
     * @param {boolean} [withPluginInfo]
     * @param {Array<string>} [pluginProperty]
     * @param {'FULL' | 'MINIMAL' | 'NONE'} [audit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPaymentMethods: (offset?: number, limit?: number, pluginName?: string, withPluginInfo?: boolean, pluginProperty?: Array<string>, audit?: 'FULL' | 'MINIMAL' | 'NONE', options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Modify custom fields to payment method
     * @param {Array<CustomField>} body
     * @param {string} paymentMethodId
     * @param {string} xKillbillCreatedBy
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    modifyPaymentMethodCustomFields: (body: Array<CustomField>, paymentMethodId: string, xKillbillCreatedBy: string, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Search payment methods
     * @param {string} searchKey
     * @param {number} [offset]
     * @param {number} [limit]
     * @param {string} [pluginName]
     * @param {boolean} [withPluginInfo]
     * @param {Array<string>} [pluginProperty]
     * @param {'FULL' | 'MINIMAL' | 'NONE'} [audit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchPaymentMethods: (searchKey: string, offset?: number, limit?: number, pluginName?: string, withPluginInfo?: boolean, pluginProperty?: Array<string>, audit?: 'FULL' | 'MINIMAL' | 'NONE', options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * PaymentMethodApi - functional programming interface
 * @export
 */
export declare const PaymentMethodApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary Add custom fields to payment method
     * @param {Array<CustomField>} body
     * @param {string} paymentMethodId
     * @param {string} xKillbillCreatedBy
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createPaymentMethodCustomFields(body: Array<CustomField>, paymentMethodId: string, xKillbillCreatedBy: string, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CustomField>>>;
    /**
     *
     * @summary Delete a payment method
     * @param {string} paymentMethodId
     * @param {string} xKillbillCreatedBy
     * @param {boolean} [deleteDefaultPmWithAutoPayOff]
     * @param {boolean} [forceDefaultPmDeletion]
     * @param {Array<string>} [pluginProperty]
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deletePaymentMethod(paymentMethodId: string, xKillbillCreatedBy: string, deleteDefaultPmWithAutoPayOff?: boolean, forceDefaultPmDeletion?: boolean, pluginProperty?: Array<string>, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary Remove custom fields from payment method
     * @param {string} paymentMethodId
     * @param {string} xKillbillCreatedBy
     * @param {Array<string>} [customField]
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deletePaymentMethodCustomFields(paymentMethodId: string, xKillbillCreatedBy: string, customField?: Array<string>, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary Retrieve a payment method by id
     * @param {string} paymentMethodId
     * @param {boolean} [includedDeleted]
     * @param {boolean} [withPluginInfo]
     * @param {Array<string>} [pluginProperty]
     * @param {'FULL' | 'MINIMAL' | 'NONE'} [audit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPaymentMethod(paymentMethodId: string, includedDeleted?: boolean, withPluginInfo?: boolean, pluginProperty?: Array<string>, audit?: 'FULL' | 'MINIMAL' | 'NONE', options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaymentMethod>>;
    /**
     *
     * @summary Retrieve payment method audit logs with history by id
     * @param {string} paymentMethodId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPaymentMethodAuditLogsWithHistory(paymentMethodId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<AuditLog>>>;
    /**
     *
     * @summary Retrieve a payment method by external key
     * @param {string} externalKey
     * @param {boolean} [includedDeleted]
     * @param {boolean} [withPluginInfo]
     * @param {Array<string>} [pluginProperty]
     * @param {'FULL' | 'MINIMAL' | 'NONE'} [audit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPaymentMethodByKey(externalKey: string, includedDeleted?: boolean, withPluginInfo?: boolean, pluginProperty?: Array<string>, audit?: 'FULL' | 'MINIMAL' | 'NONE', options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaymentMethod>>;
    /**
     *
     * @summary Retrieve payment method custom fields
     * @param {string} paymentMethodId
     * @param {'FULL' | 'MINIMAL' | 'NONE'} [audit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPaymentMethodCustomFields(paymentMethodId: string, audit?: 'FULL' | 'MINIMAL' | 'NONE', options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CustomField>>>;
    /**
     *
     * @summary List payment methods
     * @param {number} [offset]
     * @param {number} [limit]
     * @param {string} [pluginName]
     * @param {boolean} [withPluginInfo]
     * @param {Array<string>} [pluginProperty]
     * @param {'FULL' | 'MINIMAL' | 'NONE'} [audit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPaymentMethods(offset?: number, limit?: number, pluginName?: string, withPluginInfo?: boolean, pluginProperty?: Array<string>, audit?: 'FULL' | 'MINIMAL' | 'NONE', options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<PaymentMethod>>>;
    /**
     *
     * @summary Modify custom fields to payment method
     * @param {Array<CustomField>} body
     * @param {string} paymentMethodId
     * @param {string} xKillbillCreatedBy
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    modifyPaymentMethodCustomFields(body: Array<CustomField>, paymentMethodId: string, xKillbillCreatedBy: string, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary Search payment methods
     * @param {string} searchKey
     * @param {number} [offset]
     * @param {number} [limit]
     * @param {string} [pluginName]
     * @param {boolean} [withPluginInfo]
     * @param {Array<string>} [pluginProperty]
     * @param {'FULL' | 'MINIMAL' | 'NONE'} [audit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchPaymentMethods(searchKey: string, offset?: number, limit?: number, pluginName?: string, withPluginInfo?: boolean, pluginProperty?: Array<string>, audit?: 'FULL' | 'MINIMAL' | 'NONE', options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<PaymentMethod>>>;
};
/**
 * PaymentMethodApi - factory interface
 * @export
 */
export declare const PaymentMethodApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Add custom fields to payment method
     * @param {Array<CustomField>} body
     * @param {string} paymentMethodId
     * @param {string} xKillbillCreatedBy
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createPaymentMethodCustomFields(body: Array<CustomField>, paymentMethodId: string, xKillbillCreatedBy: string, xKillbillReason?: string, xKillbillComment?: string, options?: any): AxiosPromise<Array<CustomField>>;
    /**
     *
     * @summary Delete a payment method
     * @param {string} paymentMethodId
     * @param {string} xKillbillCreatedBy
     * @param {boolean} [deleteDefaultPmWithAutoPayOff]
     * @param {boolean} [forceDefaultPmDeletion]
     * @param {Array<string>} [pluginProperty]
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deletePaymentMethod(paymentMethodId: string, xKillbillCreatedBy: string, deleteDefaultPmWithAutoPayOff?: boolean, forceDefaultPmDeletion?: boolean, pluginProperty?: Array<string>, xKillbillReason?: string, xKillbillComment?: string, options?: any): AxiosPromise<void>;
    /**
     *
     * @summary Remove custom fields from payment method
     * @param {string} paymentMethodId
     * @param {string} xKillbillCreatedBy
     * @param {Array<string>} [customField]
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deletePaymentMethodCustomFields(paymentMethodId: string, xKillbillCreatedBy: string, customField?: Array<string>, xKillbillReason?: string, xKillbillComment?: string, options?: any): AxiosPromise<void>;
    /**
     *
     * @summary Retrieve a payment method by id
     * @param {string} paymentMethodId
     * @param {boolean} [includedDeleted]
     * @param {boolean} [withPluginInfo]
     * @param {Array<string>} [pluginProperty]
     * @param {'FULL' | 'MINIMAL' | 'NONE'} [audit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPaymentMethod(paymentMethodId: string, includedDeleted?: boolean, withPluginInfo?: boolean, pluginProperty?: Array<string>, audit?: 'FULL' | 'MINIMAL' | 'NONE', options?: any): AxiosPromise<PaymentMethod>;
    /**
     *
     * @summary Retrieve payment method audit logs with history by id
     * @param {string} paymentMethodId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPaymentMethodAuditLogsWithHistory(paymentMethodId: string, options?: any): AxiosPromise<Array<AuditLog>>;
    /**
     *
     * @summary Retrieve a payment method by external key
     * @param {string} externalKey
     * @param {boolean} [includedDeleted]
     * @param {boolean} [withPluginInfo]
     * @param {Array<string>} [pluginProperty]
     * @param {'FULL' | 'MINIMAL' | 'NONE'} [audit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPaymentMethodByKey(externalKey: string, includedDeleted?: boolean, withPluginInfo?: boolean, pluginProperty?: Array<string>, audit?: 'FULL' | 'MINIMAL' | 'NONE', options?: any): AxiosPromise<PaymentMethod>;
    /**
     *
     * @summary Retrieve payment method custom fields
     * @param {string} paymentMethodId
     * @param {'FULL' | 'MINIMAL' | 'NONE'} [audit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPaymentMethodCustomFields(paymentMethodId: string, audit?: 'FULL' | 'MINIMAL' | 'NONE', options?: any): AxiosPromise<Array<CustomField>>;
    /**
     *
     * @summary List payment methods
     * @param {number} [offset]
     * @param {number} [limit]
     * @param {string} [pluginName]
     * @param {boolean} [withPluginInfo]
     * @param {Array<string>} [pluginProperty]
     * @param {'FULL' | 'MINIMAL' | 'NONE'} [audit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPaymentMethods(offset?: number, limit?: number, pluginName?: string, withPluginInfo?: boolean, pluginProperty?: Array<string>, audit?: 'FULL' | 'MINIMAL' | 'NONE', options?: any): AxiosPromise<Array<PaymentMethod>>;
    /**
     *
     * @summary Modify custom fields to payment method
     * @param {Array<CustomField>} body
     * @param {string} paymentMethodId
     * @param {string} xKillbillCreatedBy
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    modifyPaymentMethodCustomFields(body: Array<CustomField>, paymentMethodId: string, xKillbillCreatedBy: string, xKillbillReason?: string, xKillbillComment?: string, options?: any): AxiosPromise<void>;
    /**
     *
     * @summary Search payment methods
     * @param {string} searchKey
     * @param {number} [offset]
     * @param {number} [limit]
     * @param {string} [pluginName]
     * @param {boolean} [withPluginInfo]
     * @param {Array<string>} [pluginProperty]
     * @param {'FULL' | 'MINIMAL' | 'NONE'} [audit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchPaymentMethods(searchKey: string, offset?: number, limit?: number, pluginName?: string, withPluginInfo?: boolean, pluginProperty?: Array<string>, audit?: 'FULL' | 'MINIMAL' | 'NONE', options?: any): AxiosPromise<Array<PaymentMethod>>;
};
/**
 * PaymentMethodApi - object-oriented interface
 * @export
 * @class PaymentMethodApi
 * @extends {BaseAPI}
 */
export declare class PaymentMethodApi extends BaseAPI {
    /**
     *
     * @summary Add custom fields to payment method
     * @param {Array<CustomField>} body
     * @param {string} paymentMethodId
     * @param {string} xKillbillCreatedBy
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentMethodApi
     */
    createPaymentMethodCustomFields(body: Array<CustomField>, paymentMethodId: string, xKillbillCreatedBy: string, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<CustomField[], any>>;
    /**
     *
     * @summary Delete a payment method
     * @param {string} paymentMethodId
     * @param {string} xKillbillCreatedBy
     * @param {boolean} [deleteDefaultPmWithAutoPayOff]
     * @param {boolean} [forceDefaultPmDeletion]
     * @param {Array<string>} [pluginProperty]
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentMethodApi
     */
    deletePaymentMethod(paymentMethodId: string, xKillbillCreatedBy: string, deleteDefaultPmWithAutoPayOff?: boolean, forceDefaultPmDeletion?: boolean, pluginProperty?: Array<string>, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     *
     * @summary Remove custom fields from payment method
     * @param {string} paymentMethodId
     * @param {string} xKillbillCreatedBy
     * @param {Array<string>} [customField]
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentMethodApi
     */
    deletePaymentMethodCustomFields(paymentMethodId: string, xKillbillCreatedBy: string, customField?: Array<string>, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     *
     * @summary Retrieve a payment method by id
     * @param {string} paymentMethodId
     * @param {boolean} [includedDeleted]
     * @param {boolean} [withPluginInfo]
     * @param {Array<string>} [pluginProperty]
     * @param {'FULL' | 'MINIMAL' | 'NONE'} [audit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentMethodApi
     */
    getPaymentMethod(paymentMethodId: string, includedDeleted?: boolean, withPluginInfo?: boolean, pluginProperty?: Array<string>, audit?: 'FULL' | 'MINIMAL' | 'NONE', options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<PaymentMethod, any>>;
    /**
     *
     * @summary Retrieve payment method audit logs with history by id
     * @param {string} paymentMethodId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentMethodApi
     */
    getPaymentMethodAuditLogsWithHistory(paymentMethodId: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<AuditLog[], any>>;
    /**
     *
     * @summary Retrieve a payment method by external key
     * @param {string} externalKey
     * @param {boolean} [includedDeleted]
     * @param {boolean} [withPluginInfo]
     * @param {Array<string>} [pluginProperty]
     * @param {'FULL' | 'MINIMAL' | 'NONE'} [audit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentMethodApi
     */
    getPaymentMethodByKey(externalKey: string, includedDeleted?: boolean, withPluginInfo?: boolean, pluginProperty?: Array<string>, audit?: 'FULL' | 'MINIMAL' | 'NONE', options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<PaymentMethod, any>>;
    /**
     *
     * @summary Retrieve payment method custom fields
     * @param {string} paymentMethodId
     * @param {'FULL' | 'MINIMAL' | 'NONE'} [audit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentMethodApi
     */
    getPaymentMethodCustomFields(paymentMethodId: string, audit?: 'FULL' | 'MINIMAL' | 'NONE', options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<CustomField[], any>>;
    /**
     *
     * @summary List payment methods
     * @param {number} [offset]
     * @param {number} [limit]
     * @param {string} [pluginName]
     * @param {boolean} [withPluginInfo]
     * @param {Array<string>} [pluginProperty]
     * @param {'FULL' | 'MINIMAL' | 'NONE'} [audit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentMethodApi
     */
    getPaymentMethods(offset?: number, limit?: number, pluginName?: string, withPluginInfo?: boolean, pluginProperty?: Array<string>, audit?: 'FULL' | 'MINIMAL' | 'NONE', options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<PaymentMethod[], any>>;
    /**
     *
     * @summary Modify custom fields to payment method
     * @param {Array<CustomField>} body
     * @param {string} paymentMethodId
     * @param {string} xKillbillCreatedBy
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentMethodApi
     */
    modifyPaymentMethodCustomFields(body: Array<CustomField>, paymentMethodId: string, xKillbillCreatedBy: string, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     *
     * @summary Search payment methods
     * @param {string} searchKey
     * @param {number} [offset]
     * @param {number} [limit]
     * @param {string} [pluginName]
     * @param {boolean} [withPluginInfo]
     * @param {Array<string>} [pluginProperty]
     * @param {'FULL' | 'MINIMAL' | 'NONE'} [audit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentMethodApi
     */
    searchPaymentMethods(searchKey: string, offset?: number, limit?: number, pluginName?: string, withPluginInfo?: boolean, pluginProperty?: Array<string>, audit?: 'FULL' | 'MINIMAL' | 'NONE', options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<PaymentMethod[], any>>;
}
/**
 * PaymentTransactionApi - axios parameter creator
 * @export
 */
export declare const PaymentTransactionApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Add custom fields to payment transaction
     * @param {Array<CustomField>} body
     * @param {string} transactionId
     * @param {string} xKillbillCreatedBy
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createTransactionCustomFields: (body: Array<CustomField>, transactionId: string, xKillbillCreatedBy: string, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Add tags to payment transaction
     * @param {Array<string>} body
     * @param {string} transactionId
     * @param {string} xKillbillCreatedBy
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createTransactionTags: (body: Array<string>, transactionId: string, xKillbillCreatedBy: string, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Remove custom fields from payment transaction
     * @param {string} transactionId
     * @param {string} xKillbillCreatedBy
     * @param {Array<string>} [customField]
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteTransactionCustomFields: (transactionId: string, xKillbillCreatedBy: string, customField?: Array<string>, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Remove tags from payment transaction
     * @param {string} transactionId
     * @param {string} xKillbillCreatedBy
     * @param {Array<string>} [tagDef]
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteTransactionTags: (transactionId: string, xKillbillCreatedBy: string, tagDef?: Array<string>, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Retrieve a payment by transaction external key
     * @param {string} transactionExternalKey
     * @param {boolean} [withPluginInfo]
     * @param {boolean} [withAttempts]
     * @param {Array<string>} [pluginProperty]
     * @param {'FULL' | 'MINIMAL' | 'NONE'} [audit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPaymentByTransactionExternalKey: (transactionExternalKey: string, withPluginInfo?: boolean, withAttempts?: boolean, pluginProperty?: Array<string>, audit?: 'FULL' | 'MINIMAL' | 'NONE', options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Retrieve a payment by transaction id
     * @param {string} transactionId
     * @param {boolean} [withPluginInfo]
     * @param {boolean} [withAttempts]
     * @param {Array<string>} [pluginProperty]
     * @param {'FULL' | 'MINIMAL' | 'NONE'} [audit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPaymentByTransactionId: (transactionId: string, withPluginInfo?: boolean, withAttempts?: boolean, pluginProperty?: Array<string>, audit?: 'FULL' | 'MINIMAL' | 'NONE', options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Retrieve payment transaction audit logs with history by id
     * @param {string} transactionId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTransactionAuditLogsWithHistory: (transactionId: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Retrieve payment transaction custom fields
     * @param {string} transactionId
     * @param {'FULL' | 'MINIMAL' | 'NONE'} [audit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTransactionCustomFields: (transactionId: string, audit?: 'FULL' | 'MINIMAL' | 'NONE', options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Retrieve payment transaction tags
     * @param {string} transactionId
     * @param {boolean} [includedDeleted]
     * @param {'FULL' | 'MINIMAL' | 'NONE'} [audit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTransactionTags: (transactionId: string, includedDeleted?: boolean, audit?: 'FULL' | 'MINIMAL' | 'NONE', options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Modify custom fields to payment transaction
     * @param {Array<CustomField>} body
     * @param {string} transactionId
     * @param {string} xKillbillCreatedBy
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    modifyTransactionCustomFields: (body: Array<CustomField>, transactionId: string, xKillbillCreatedBy: string, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Mark a pending payment transaction as succeeded or failed
     * @param {PaymentTransaction} body
     * @param {string} transactionId
     * @param {string} xKillbillCreatedBy
     * @param {Array<string>} [controlPluginName]
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    notifyStateChanged: (body: PaymentTransaction, transactionId: string, xKillbillCreatedBy: string, controlPluginName?: Array<string>, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * PaymentTransactionApi - functional programming interface
 * @export
 */
export declare const PaymentTransactionApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary Add custom fields to payment transaction
     * @param {Array<CustomField>} body
     * @param {string} transactionId
     * @param {string} xKillbillCreatedBy
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createTransactionCustomFields(body: Array<CustomField>, transactionId: string, xKillbillCreatedBy: string, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CustomField>>>;
    /**
     *
     * @summary Add tags to payment transaction
     * @param {Array<string>} body
     * @param {string} transactionId
     * @param {string} xKillbillCreatedBy
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createTransactionTags(body: Array<string>, transactionId: string, xKillbillCreatedBy: string, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Tag>>>;
    /**
     *
     * @summary Remove custom fields from payment transaction
     * @param {string} transactionId
     * @param {string} xKillbillCreatedBy
     * @param {Array<string>} [customField]
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteTransactionCustomFields(transactionId: string, xKillbillCreatedBy: string, customField?: Array<string>, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary Remove tags from payment transaction
     * @param {string} transactionId
     * @param {string} xKillbillCreatedBy
     * @param {Array<string>} [tagDef]
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteTransactionTags(transactionId: string, xKillbillCreatedBy: string, tagDef?: Array<string>, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary Retrieve a payment by transaction external key
     * @param {string} transactionExternalKey
     * @param {boolean} [withPluginInfo]
     * @param {boolean} [withAttempts]
     * @param {Array<string>} [pluginProperty]
     * @param {'FULL' | 'MINIMAL' | 'NONE'} [audit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPaymentByTransactionExternalKey(transactionExternalKey: string, withPluginInfo?: boolean, withAttempts?: boolean, pluginProperty?: Array<string>, audit?: 'FULL' | 'MINIMAL' | 'NONE', options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Payment>>;
    /**
     *
     * @summary Retrieve a payment by transaction id
     * @param {string} transactionId
     * @param {boolean} [withPluginInfo]
     * @param {boolean} [withAttempts]
     * @param {Array<string>} [pluginProperty]
     * @param {'FULL' | 'MINIMAL' | 'NONE'} [audit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPaymentByTransactionId(transactionId: string, withPluginInfo?: boolean, withAttempts?: boolean, pluginProperty?: Array<string>, audit?: 'FULL' | 'MINIMAL' | 'NONE', options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Payment>>;
    /**
     *
     * @summary Retrieve payment transaction audit logs with history by id
     * @param {string} transactionId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTransactionAuditLogsWithHistory(transactionId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<AuditLog>>>;
    /**
     *
     * @summary Retrieve payment transaction custom fields
     * @param {string} transactionId
     * @param {'FULL' | 'MINIMAL' | 'NONE'} [audit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTransactionCustomFields(transactionId: string, audit?: 'FULL' | 'MINIMAL' | 'NONE', options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CustomField>>>;
    /**
     *
     * @summary Retrieve payment transaction tags
     * @param {string} transactionId
     * @param {boolean} [includedDeleted]
     * @param {'FULL' | 'MINIMAL' | 'NONE'} [audit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTransactionTags(transactionId: string, includedDeleted?: boolean, audit?: 'FULL' | 'MINIMAL' | 'NONE', options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Tag>>>;
    /**
     *
     * @summary Modify custom fields to payment transaction
     * @param {Array<CustomField>} body
     * @param {string} transactionId
     * @param {string} xKillbillCreatedBy
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    modifyTransactionCustomFields(body: Array<CustomField>, transactionId: string, xKillbillCreatedBy: string, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary Mark a pending payment transaction as succeeded or failed
     * @param {PaymentTransaction} body
     * @param {string} transactionId
     * @param {string} xKillbillCreatedBy
     * @param {Array<string>} [controlPluginName]
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    notifyStateChanged(body: PaymentTransaction, transactionId: string, xKillbillCreatedBy: string, controlPluginName?: Array<string>, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Payment>>;
};
/**
 * PaymentTransactionApi - factory interface
 * @export
 */
export declare const PaymentTransactionApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Add custom fields to payment transaction
     * @param {Array<CustomField>} body
     * @param {string} transactionId
     * @param {string} xKillbillCreatedBy
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createTransactionCustomFields(body: Array<CustomField>, transactionId: string, xKillbillCreatedBy: string, xKillbillReason?: string, xKillbillComment?: string, options?: any): AxiosPromise<Array<CustomField>>;
    /**
     *
     * @summary Add tags to payment transaction
     * @param {Array<string>} body
     * @param {string} transactionId
     * @param {string} xKillbillCreatedBy
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createTransactionTags(body: Array<string>, transactionId: string, xKillbillCreatedBy: string, xKillbillReason?: string, xKillbillComment?: string, options?: any): AxiosPromise<Array<Tag>>;
    /**
     *
     * @summary Remove custom fields from payment transaction
     * @param {string} transactionId
     * @param {string} xKillbillCreatedBy
     * @param {Array<string>} [customField]
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteTransactionCustomFields(transactionId: string, xKillbillCreatedBy: string, customField?: Array<string>, xKillbillReason?: string, xKillbillComment?: string, options?: any): AxiosPromise<void>;
    /**
     *
     * @summary Remove tags from payment transaction
     * @param {string} transactionId
     * @param {string} xKillbillCreatedBy
     * @param {Array<string>} [tagDef]
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteTransactionTags(transactionId: string, xKillbillCreatedBy: string, tagDef?: Array<string>, xKillbillReason?: string, xKillbillComment?: string, options?: any): AxiosPromise<void>;
    /**
     *
     * @summary Retrieve a payment by transaction external key
     * @param {string} transactionExternalKey
     * @param {boolean} [withPluginInfo]
     * @param {boolean} [withAttempts]
     * @param {Array<string>} [pluginProperty]
     * @param {'FULL' | 'MINIMAL' | 'NONE'} [audit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPaymentByTransactionExternalKey(transactionExternalKey: string, withPluginInfo?: boolean, withAttempts?: boolean, pluginProperty?: Array<string>, audit?: 'FULL' | 'MINIMAL' | 'NONE', options?: any): AxiosPromise<Payment>;
    /**
     *
     * @summary Retrieve a payment by transaction id
     * @param {string} transactionId
     * @param {boolean} [withPluginInfo]
     * @param {boolean} [withAttempts]
     * @param {Array<string>} [pluginProperty]
     * @param {'FULL' | 'MINIMAL' | 'NONE'} [audit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPaymentByTransactionId(transactionId: string, withPluginInfo?: boolean, withAttempts?: boolean, pluginProperty?: Array<string>, audit?: 'FULL' | 'MINIMAL' | 'NONE', options?: any): AxiosPromise<Payment>;
    /**
     *
     * @summary Retrieve payment transaction audit logs with history by id
     * @param {string} transactionId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTransactionAuditLogsWithHistory(transactionId: string, options?: any): AxiosPromise<Array<AuditLog>>;
    /**
     *
     * @summary Retrieve payment transaction custom fields
     * @param {string} transactionId
     * @param {'FULL' | 'MINIMAL' | 'NONE'} [audit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTransactionCustomFields(transactionId: string, audit?: 'FULL' | 'MINIMAL' | 'NONE', options?: any): AxiosPromise<Array<CustomField>>;
    /**
     *
     * @summary Retrieve payment transaction tags
     * @param {string} transactionId
     * @param {boolean} [includedDeleted]
     * @param {'FULL' | 'MINIMAL' | 'NONE'} [audit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTransactionTags(transactionId: string, includedDeleted?: boolean, audit?: 'FULL' | 'MINIMAL' | 'NONE', options?: any): AxiosPromise<Array<Tag>>;
    /**
     *
     * @summary Modify custom fields to payment transaction
     * @param {Array<CustomField>} body
     * @param {string} transactionId
     * @param {string} xKillbillCreatedBy
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    modifyTransactionCustomFields(body: Array<CustomField>, transactionId: string, xKillbillCreatedBy: string, xKillbillReason?: string, xKillbillComment?: string, options?: any): AxiosPromise<void>;
    /**
     *
     * @summary Mark a pending payment transaction as succeeded or failed
     * @param {PaymentTransaction} body
     * @param {string} transactionId
     * @param {string} xKillbillCreatedBy
     * @param {Array<string>} [controlPluginName]
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    notifyStateChanged(body: PaymentTransaction, transactionId: string, xKillbillCreatedBy: string, controlPluginName?: Array<string>, xKillbillReason?: string, xKillbillComment?: string, options?: any): AxiosPromise<Payment>;
};
/**
 * PaymentTransactionApi - object-oriented interface
 * @export
 * @class PaymentTransactionApi
 * @extends {BaseAPI}
 */
export declare class PaymentTransactionApi extends BaseAPI {
    /**
     *
     * @summary Add custom fields to payment transaction
     * @param {Array<CustomField>} body
     * @param {string} transactionId
     * @param {string} xKillbillCreatedBy
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentTransactionApi
     */
    createTransactionCustomFields(body: Array<CustomField>, transactionId: string, xKillbillCreatedBy: string, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<CustomField[], any>>;
    /**
     *
     * @summary Add tags to payment transaction
     * @param {Array<string>} body
     * @param {string} transactionId
     * @param {string} xKillbillCreatedBy
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentTransactionApi
     */
    createTransactionTags(body: Array<string>, transactionId: string, xKillbillCreatedBy: string, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Tag[], any>>;
    /**
     *
     * @summary Remove custom fields from payment transaction
     * @param {string} transactionId
     * @param {string} xKillbillCreatedBy
     * @param {Array<string>} [customField]
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentTransactionApi
     */
    deleteTransactionCustomFields(transactionId: string, xKillbillCreatedBy: string, customField?: Array<string>, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     *
     * @summary Remove tags from payment transaction
     * @param {string} transactionId
     * @param {string} xKillbillCreatedBy
     * @param {Array<string>} [tagDef]
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentTransactionApi
     */
    deleteTransactionTags(transactionId: string, xKillbillCreatedBy: string, tagDef?: Array<string>, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     *
     * @summary Retrieve a payment by transaction external key
     * @param {string} transactionExternalKey
     * @param {boolean} [withPluginInfo]
     * @param {boolean} [withAttempts]
     * @param {Array<string>} [pluginProperty]
     * @param {'FULL' | 'MINIMAL' | 'NONE'} [audit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentTransactionApi
     */
    getPaymentByTransactionExternalKey(transactionExternalKey: string, withPluginInfo?: boolean, withAttempts?: boolean, pluginProperty?: Array<string>, audit?: 'FULL' | 'MINIMAL' | 'NONE', options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Payment, any>>;
    /**
     *
     * @summary Retrieve a payment by transaction id
     * @param {string} transactionId
     * @param {boolean} [withPluginInfo]
     * @param {boolean} [withAttempts]
     * @param {Array<string>} [pluginProperty]
     * @param {'FULL' | 'MINIMAL' | 'NONE'} [audit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentTransactionApi
     */
    getPaymentByTransactionId(transactionId: string, withPluginInfo?: boolean, withAttempts?: boolean, pluginProperty?: Array<string>, audit?: 'FULL' | 'MINIMAL' | 'NONE', options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Payment, any>>;
    /**
     *
     * @summary Retrieve payment transaction audit logs with history by id
     * @param {string} transactionId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentTransactionApi
     */
    getTransactionAuditLogsWithHistory(transactionId: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<AuditLog[], any>>;
    /**
     *
     * @summary Retrieve payment transaction custom fields
     * @param {string} transactionId
     * @param {'FULL' | 'MINIMAL' | 'NONE'} [audit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentTransactionApi
     */
    getTransactionCustomFields(transactionId: string, audit?: 'FULL' | 'MINIMAL' | 'NONE', options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<CustomField[], any>>;
    /**
     *
     * @summary Retrieve payment transaction tags
     * @param {string} transactionId
     * @param {boolean} [includedDeleted]
     * @param {'FULL' | 'MINIMAL' | 'NONE'} [audit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentTransactionApi
     */
    getTransactionTags(transactionId: string, includedDeleted?: boolean, audit?: 'FULL' | 'MINIMAL' | 'NONE', options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Tag[], any>>;
    /**
     *
     * @summary Modify custom fields to payment transaction
     * @param {Array<CustomField>} body
     * @param {string} transactionId
     * @param {string} xKillbillCreatedBy
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentTransactionApi
     */
    modifyTransactionCustomFields(body: Array<CustomField>, transactionId: string, xKillbillCreatedBy: string, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     *
     * @summary Mark a pending payment transaction as succeeded or failed
     * @param {PaymentTransaction} body
     * @param {string} transactionId
     * @param {string} xKillbillCreatedBy
     * @param {Array<string>} [controlPluginName]
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PaymentTransactionApi
     */
    notifyStateChanged(body: PaymentTransaction, transactionId: string, xKillbillCreatedBy: string, controlPluginName?: Array<string>, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Payment, any>>;
}
/**
 * PluginInfoApi - axios parameter creator
 * @export
 */
export declare const PluginInfoApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Retrieve the list of registered plugins
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPluginsInfo: (options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * PluginInfoApi - functional programming interface
 * @export
 */
export declare const PluginInfoApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary Retrieve the list of registered plugins
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPluginsInfo(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<PluginInfo>>>;
};
/**
 * PluginInfoApi - factory interface
 * @export
 */
export declare const PluginInfoApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Retrieve the list of registered plugins
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPluginsInfo(options?: any): AxiosPromise<Array<PluginInfo>>;
};
/**
 * PluginInfoApi - object-oriented interface
 * @export
 * @class PluginInfoApi
 * @extends {BaseAPI}
 */
export declare class PluginInfoApi extends BaseAPI {
    /**
     *
     * @summary Retrieve the list of registered plugins
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PluginInfoApi
     */
    getPluginsInfo(options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<PluginInfo[], any>>;
}
/**
 * SecurityApi - axios parameter creator
 * @export
 */
export declare const SecurityApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Add a new role definition)
     * @param {RoleDefinition} body
     * @param {string} xKillbillCreatedBy
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addRoleDefinition: (body: RoleDefinition, xKillbillCreatedBy: string, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Add a new user with roles (to make api requests)
     * @param {UserRoles} body
     * @param {string} xKillbillCreatedBy
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addUserRoles: (body: UserRoles, xKillbillCreatedBy: string, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary List user permissions
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCurrentUserPermissions: (options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Get user information
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCurrentUserSubject: (options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Get role definition
     * @param {string} role
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getRoleDefinition: (role: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Get roles associated to a user
     * @param {string} username
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserRoles: (username: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Invalidate an existing user
     * @param {string} username
     * @param {string} xKillbillCreatedBy
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    invalidateUser: (username: string, xKillbillCreatedBy: string, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Update a new role definition)
     * @param {RoleDefinition} body
     * @param {string} xKillbillCreatedBy
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateRoleDefinition: (body: RoleDefinition, xKillbillCreatedBy: string, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Update a user password
     * @param {UserRoles} body
     * @param {string} username
     * @param {string} xKillbillCreatedBy
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateUserPassword: (body: UserRoles, username: string, xKillbillCreatedBy: string, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Update roles associated to a user
     * @param {UserRoles} body
     * @param {string} username
     * @param {string} xKillbillCreatedBy
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateUserRoles: (body: UserRoles, username: string, xKillbillCreatedBy: string, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * SecurityApi - functional programming interface
 * @export
 */
export declare const SecurityApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary Add a new role definition)
     * @param {RoleDefinition} body
     * @param {string} xKillbillCreatedBy
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addRoleDefinition(body: RoleDefinition, xKillbillCreatedBy: string, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RoleDefinition>>;
    /**
     *
     * @summary Add a new user with roles (to make api requests)
     * @param {UserRoles} body
     * @param {string} xKillbillCreatedBy
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addUserRoles(body: UserRoles, xKillbillCreatedBy: string, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserRoles>>;
    /**
     *
     * @summary List user permissions
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCurrentUserPermissions(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<string>>>;
    /**
     *
     * @summary Get user information
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCurrentUserSubject(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Subject>>;
    /**
     *
     * @summary Get role definition
     * @param {string} role
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getRoleDefinition(role: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RoleDefinition>>;
    /**
     *
     * @summary Get roles associated to a user
     * @param {string} username
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserRoles(username: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserRoles>>;
    /**
     *
     * @summary Invalidate an existing user
     * @param {string} username
     * @param {string} xKillbillCreatedBy
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    invalidateUser(username: string, xKillbillCreatedBy: string, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary Update a new role definition)
     * @param {RoleDefinition} body
     * @param {string} xKillbillCreatedBy
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateRoleDefinition(body: RoleDefinition, xKillbillCreatedBy: string, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary Update a user password
     * @param {UserRoles} body
     * @param {string} username
     * @param {string} xKillbillCreatedBy
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateUserPassword(body: UserRoles, username: string, xKillbillCreatedBy: string, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary Update roles associated to a user
     * @param {UserRoles} body
     * @param {string} username
     * @param {string} xKillbillCreatedBy
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateUserRoles(body: UserRoles, username: string, xKillbillCreatedBy: string, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
};
/**
 * SecurityApi - factory interface
 * @export
 */
export declare const SecurityApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Add a new role definition)
     * @param {RoleDefinition} body
     * @param {string} xKillbillCreatedBy
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addRoleDefinition(body: RoleDefinition, xKillbillCreatedBy: string, xKillbillReason?: string, xKillbillComment?: string, options?: any): AxiosPromise<RoleDefinition>;
    /**
     *
     * @summary Add a new user with roles (to make api requests)
     * @param {UserRoles} body
     * @param {string} xKillbillCreatedBy
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addUserRoles(body: UserRoles, xKillbillCreatedBy: string, xKillbillReason?: string, xKillbillComment?: string, options?: any): AxiosPromise<UserRoles>;
    /**
     *
     * @summary List user permissions
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCurrentUserPermissions(options?: any): AxiosPromise<Array<string>>;
    /**
     *
     * @summary Get user information
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getCurrentUserSubject(options?: any): AxiosPromise<Subject>;
    /**
     *
     * @summary Get role definition
     * @param {string} role
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getRoleDefinition(role: string, options?: any): AxiosPromise<RoleDefinition>;
    /**
     *
     * @summary Get roles associated to a user
     * @param {string} username
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserRoles(username: string, options?: any): AxiosPromise<UserRoles>;
    /**
     *
     * @summary Invalidate an existing user
     * @param {string} username
     * @param {string} xKillbillCreatedBy
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    invalidateUser(username: string, xKillbillCreatedBy: string, xKillbillReason?: string, xKillbillComment?: string, options?: any): AxiosPromise<void>;
    /**
     *
     * @summary Update a new role definition)
     * @param {RoleDefinition} body
     * @param {string} xKillbillCreatedBy
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateRoleDefinition(body: RoleDefinition, xKillbillCreatedBy: string, xKillbillReason?: string, xKillbillComment?: string, options?: any): AxiosPromise<void>;
    /**
     *
     * @summary Update a user password
     * @param {UserRoles} body
     * @param {string} username
     * @param {string} xKillbillCreatedBy
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateUserPassword(body: UserRoles, username: string, xKillbillCreatedBy: string, xKillbillReason?: string, xKillbillComment?: string, options?: any): AxiosPromise<void>;
    /**
     *
     * @summary Update roles associated to a user
     * @param {UserRoles} body
     * @param {string} username
     * @param {string} xKillbillCreatedBy
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateUserRoles(body: UserRoles, username: string, xKillbillCreatedBy: string, xKillbillReason?: string, xKillbillComment?: string, options?: any): AxiosPromise<void>;
};
/**
 * SecurityApi - object-oriented interface
 * @export
 * @class SecurityApi
 * @extends {BaseAPI}
 */
export declare class SecurityApi extends BaseAPI {
    /**
     *
     * @summary Add a new role definition)
     * @param {RoleDefinition} body
     * @param {string} xKillbillCreatedBy
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SecurityApi
     */
    addRoleDefinition(body: RoleDefinition, xKillbillCreatedBy: string, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<RoleDefinition, any>>;
    /**
     *
     * @summary Add a new user with roles (to make api requests)
     * @param {UserRoles} body
     * @param {string} xKillbillCreatedBy
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SecurityApi
     */
    addUserRoles(body: UserRoles, xKillbillCreatedBy: string, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<UserRoles, any>>;
    /**
     *
     * @summary List user permissions
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SecurityApi
     */
    getCurrentUserPermissions(options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<string[], any>>;
    /**
     *
     * @summary Get user information
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SecurityApi
     */
    getCurrentUserSubject(options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Subject, any>>;
    /**
     *
     * @summary Get role definition
     * @param {string} role
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SecurityApi
     */
    getRoleDefinition(role: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<RoleDefinition, any>>;
    /**
     *
     * @summary Get roles associated to a user
     * @param {string} username
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SecurityApi
     */
    getUserRoles(username: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<UserRoles, any>>;
    /**
     *
     * @summary Invalidate an existing user
     * @param {string} username
     * @param {string} xKillbillCreatedBy
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SecurityApi
     */
    invalidateUser(username: string, xKillbillCreatedBy: string, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     *
     * @summary Update a new role definition)
     * @param {RoleDefinition} body
     * @param {string} xKillbillCreatedBy
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SecurityApi
     */
    updateRoleDefinition(body: RoleDefinition, xKillbillCreatedBy: string, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     *
     * @summary Update a user password
     * @param {UserRoles} body
     * @param {string} username
     * @param {string} xKillbillCreatedBy
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SecurityApi
     */
    updateUserPassword(body: UserRoles, username: string, xKillbillCreatedBy: string, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     *
     * @summary Update roles associated to a user
     * @param {UserRoles} body
     * @param {string} username
     * @param {string} xKillbillCreatedBy
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SecurityApi
     */
    updateUserRoles(body: UserRoles, username: string, xKillbillCreatedBy: string, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
}
/**
 * SubscriptionApi - axios parameter creator
 * @export
 */
export declare const SubscriptionApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Block a subscription
     * @param {BlockingState} body
     * @param {string} subscriptionId
     * @param {string} xKillbillCreatedBy
     * @param {string} [requestedDate]
     * @param {Array<string>} [pluginProperty]
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addSubscriptionBlockingState: (body: BlockingState, subscriptionId: string, xKillbillCreatedBy: string, requestedDate?: string, pluginProperty?: Array<string>, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Cancel an entitlement plan
     * @param {string} subscriptionId
     * @param {string} xKillbillCreatedBy
     * @param {string} [requestedDate]
     * @param {boolean} [callCompletion]
     * @param {number} [callTimeoutSec]
     * @param {'IMMEDIATE' | 'END_OF_TERM'} [entitlementPolicy]
     * @param {'START_OF_TERM' | 'END_OF_TERM' | 'IMMEDIATE' | 'ILLEGAL'} [billingPolicy]
     * @param {boolean} [useRequestedDateForBilling]
     * @param {Array<string>} [pluginProperty]
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    cancelSubscriptionPlan: (subscriptionId: string, xKillbillCreatedBy: string, requestedDate?: string, callCompletion?: boolean, callTimeoutSec?: number, entitlementPolicy?: 'IMMEDIATE' | 'END_OF_TERM', billingPolicy?: 'START_OF_TERM' | 'END_OF_TERM' | 'IMMEDIATE' | 'ILLEGAL', useRequestedDateForBilling?: boolean, pluginProperty?: Array<string>, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Change entitlement plan
     * @param {Subscription} body
     * @param {string} subscriptionId
     * @param {string} xKillbillCreatedBy
     * @param {string} [requestedDate]
     * @param {boolean} [callCompletion]
     * @param {number} [callTimeoutSec]
     * @param {'START_OF_TERM' | 'END_OF_TERM' | 'IMMEDIATE' | 'ILLEGAL'} [billingPolicy]
     * @param {Array<string>} [pluginProperty]
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    changeSubscriptionPlan: (body: Subscription, subscriptionId: string, xKillbillCreatedBy: string, requestedDate?: string, callCompletion?: boolean, callTimeoutSec?: number, billingPolicy?: 'START_OF_TERM' | 'END_OF_TERM' | 'IMMEDIATE' | 'ILLEGAL', pluginProperty?: Array<string>, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Create an subscription
     * @param {Subscription} body
     * @param {string} xKillbillCreatedBy
     * @param {string} [entitlementDate]
     * @param {string} [billingDate]
     * @param {boolean} [renameKeyIfExistsAndUnused]
     * @param {boolean} [migrated]
     * @param {boolean} [skipResponse]
     * @param {boolean} [callCompletion]
     * @param {number} [callTimeoutSec]
     * @param {Array<string>} [pluginProperty]
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createSubscription: (body: Subscription, xKillbillCreatedBy: string, entitlementDate?: string, billingDate?: string, renameKeyIfExistsAndUnused?: boolean, migrated?: boolean, skipResponse?: boolean, callCompletion?: boolean, callTimeoutSec?: number, pluginProperty?: Array<string>, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Add custom fields to subscription
     * @param {Array<CustomField>} body
     * @param {string} subscriptionId
     * @param {string} xKillbillCreatedBy
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createSubscriptionCustomFields: (body: Array<CustomField>, subscriptionId: string, xKillbillCreatedBy: string, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @param {Array<string>} body
     * @param {string} subscriptionId
     * @param {string} xKillbillCreatedBy
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createSubscriptionTags: (body: Array<string>, subscriptionId: string, xKillbillCreatedBy: string, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Create an entitlement with addOn products
     * @param {Array<Subscription>} body
     * @param {string} xKillbillCreatedBy
     * @param {string} [entitlementDate]
     * @param {string} [billingDate]
     * @param {boolean} [migrated]
     * @param {boolean} [skipResponse]
     * @param {boolean} [renameKeyIfExistsAndUnused]
     * @param {boolean} [callCompletion]
     * @param {number} [callTimeoutSec]
     * @param {Array<string>} [pluginProperty]
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createSubscriptionWithAddOns: (body: Array<Subscription>, xKillbillCreatedBy: string, entitlementDate?: string, billingDate?: string, migrated?: boolean, skipResponse?: boolean, renameKeyIfExistsAndUnused?: boolean, callCompletion?: boolean, callTimeoutSec?: number, pluginProperty?: Array<string>, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Create multiple entitlements with addOn products
     * @param {Array<BulkSubscriptionsBundle>} body
     * @param {string} xKillbillCreatedBy
     * @param {string} [entitlementDate]
     * @param {string} [billingDate]
     * @param {boolean} [renameKeyIfExistsAndUnused]
     * @param {boolean} [migrated]
     * @param {boolean} [skipResponse]
     * @param {boolean} [callCompletion]
     * @param {number} [callTimeoutSec]
     * @param {Array<string>} [pluginProperty]
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createSubscriptionsWithAddOns: (body: Array<BulkSubscriptionsBundle>, xKillbillCreatedBy: string, entitlementDate?: string, billingDate?: string, renameKeyIfExistsAndUnused?: boolean, migrated?: boolean, skipResponse?: boolean, callCompletion?: boolean, callTimeoutSec?: number, pluginProperty?: Array<string>, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Remove custom fields from subscription
     * @param {string} subscriptionId
     * @param {string} xKillbillCreatedBy
     * @param {Array<string>} [customField]
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteSubscriptionCustomFields: (subscriptionId: string, xKillbillCreatedBy: string, customField?: Array<string>, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Remove tags from subscription
     * @param {string} subscriptionId
     * @param {string} xKillbillCreatedBy
     * @param {Array<string>} [tagDef]
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteSubscriptionTags: (subscriptionId: string, xKillbillCreatedBy: string, tagDef?: Array<string>, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Retrieve a subscription by id
     * @param {string} subscriptionId
     * @param {'FULL' | 'MINIMAL' | 'NONE'} [audit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSubscription: (subscriptionId: string, audit?: 'FULL' | 'MINIMAL' | 'NONE', options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Retrieve subscription audit logs with history by id
     * @param {string} subscriptionId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSubscriptionAuditLogsWithHistory: (subscriptionId: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Retrieve a subscription by external key
     * @param {string} externalKey
     * @param {'FULL' | 'MINIMAL' | 'NONE'} [audit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSubscriptionByKey: (externalKey: string, audit?: 'FULL' | 'MINIMAL' | 'NONE', options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Retrieve subscription custom fields
     * @param {string} subscriptionId
     * @param {'FULL' | 'MINIMAL' | 'NONE'} [audit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSubscriptionCustomFields: (subscriptionId: string, audit?: 'FULL' | 'MINIMAL' | 'NONE', options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Retrieve subscription event audit logs with history by id
     * @param {string} eventId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSubscriptionEventAuditLogsWithHistory: (eventId: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Retrieve subscription tags
     * @param {string} subscriptionId
     * @param {boolean} [includedDeleted]
     * @param {'FULL' | 'MINIMAL' | 'NONE'} [audit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSubscriptionTags: (subscriptionId: string, includedDeleted?: boolean, audit?: 'FULL' | 'MINIMAL' | 'NONE', options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Modify custom fields to subscription
     * @param {Array<CustomField>} body
     * @param {string} subscriptionId
     * @param {string} xKillbillCreatedBy
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    modifySubscriptionCustomFields: (body: Array<CustomField>, subscriptionId: string, xKillbillCreatedBy: string, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Un-cancel an entitlement
     * @param {string} subscriptionId
     * @param {string} xKillbillCreatedBy
     * @param {Array<string>} [pluginProperty]
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    uncancelSubscriptionPlan: (subscriptionId: string, xKillbillCreatedBy: string, pluginProperty?: Array<string>, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Undo a pending change plan on an entitlement
     * @param {string} subscriptionId
     * @param {string} xKillbillCreatedBy
     * @param {Array<string>} [pluginProperty]
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    undoChangeSubscriptionPlan: (subscriptionId: string, xKillbillCreatedBy: string, pluginProperty?: Array<string>, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Update the BCD associated to a subscription
     * @param {Subscription} body
     * @param {string} subscriptionId
     * @param {string} xKillbillCreatedBy
     * @param {string} [effectiveFromDate]
     * @param {boolean} [forceNewBcdWithPastEffectiveDate]
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateSubscriptionBCD: (body: Subscription, subscriptionId: string, xKillbillCreatedBy: string, effectiveFromDate?: string, forceNewBcdWithPastEffectiveDate?: boolean, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Update the quantity associated to a subscription
     * @param {Subscription} body
     * @param {string} subscriptionId
     * @param {string} xKillbillCreatedBy
     * @param {string} [effectiveFromDate]
     * @param {boolean} [forceNewQuantityWithPastEffectiveDate]
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateSubscriptionQuantity: (body: Subscription, subscriptionId: string, xKillbillCreatedBy: string, effectiveFromDate?: string, forceNewQuantityWithPastEffectiveDate?: boolean, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * SubscriptionApi - functional programming interface
 * @export
 */
export declare const SubscriptionApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary Block a subscription
     * @param {BlockingState} body
     * @param {string} subscriptionId
     * @param {string} xKillbillCreatedBy
     * @param {string} [requestedDate]
     * @param {Array<string>} [pluginProperty]
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addSubscriptionBlockingState(body: BlockingState, subscriptionId: string, xKillbillCreatedBy: string, requestedDate?: string, pluginProperty?: Array<string>, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<BlockingState>>>;
    /**
     *
     * @summary Cancel an entitlement plan
     * @param {string} subscriptionId
     * @param {string} xKillbillCreatedBy
     * @param {string} [requestedDate]
     * @param {boolean} [callCompletion]
     * @param {number} [callTimeoutSec]
     * @param {'IMMEDIATE' | 'END_OF_TERM'} [entitlementPolicy]
     * @param {'START_OF_TERM' | 'END_OF_TERM' | 'IMMEDIATE' | 'ILLEGAL'} [billingPolicy]
     * @param {boolean} [useRequestedDateForBilling]
     * @param {Array<string>} [pluginProperty]
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    cancelSubscriptionPlan(subscriptionId: string, xKillbillCreatedBy: string, requestedDate?: string, callCompletion?: boolean, callTimeoutSec?: number, entitlementPolicy?: 'IMMEDIATE' | 'END_OF_TERM', billingPolicy?: 'START_OF_TERM' | 'END_OF_TERM' | 'IMMEDIATE' | 'ILLEGAL', useRequestedDateForBilling?: boolean, pluginProperty?: Array<string>, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary Change entitlement plan
     * @param {Subscription} body
     * @param {string} subscriptionId
     * @param {string} xKillbillCreatedBy
     * @param {string} [requestedDate]
     * @param {boolean} [callCompletion]
     * @param {number} [callTimeoutSec]
     * @param {'START_OF_TERM' | 'END_OF_TERM' | 'IMMEDIATE' | 'ILLEGAL'} [billingPolicy]
     * @param {Array<string>} [pluginProperty]
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    changeSubscriptionPlan(body: Subscription, subscriptionId: string, xKillbillCreatedBy: string, requestedDate?: string, callCompletion?: boolean, callTimeoutSec?: number, billingPolicy?: 'START_OF_TERM' | 'END_OF_TERM' | 'IMMEDIATE' | 'ILLEGAL', pluginProperty?: Array<string>, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary Create an subscription
     * @param {Subscription} body
     * @param {string} xKillbillCreatedBy
     * @param {string} [entitlementDate]
     * @param {string} [billingDate]
     * @param {boolean} [renameKeyIfExistsAndUnused]
     * @param {boolean} [migrated]
     * @param {boolean} [skipResponse]
     * @param {boolean} [callCompletion]
     * @param {number} [callTimeoutSec]
     * @param {Array<string>} [pluginProperty]
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createSubscription(body: Subscription, xKillbillCreatedBy: string, entitlementDate?: string, billingDate?: string, renameKeyIfExistsAndUnused?: boolean, migrated?: boolean, skipResponse?: boolean, callCompletion?: boolean, callTimeoutSec?: number, pluginProperty?: Array<string>, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Subscription>>;
    /**
     *
     * @summary Add custom fields to subscription
     * @param {Array<CustomField>} body
     * @param {string} subscriptionId
     * @param {string} xKillbillCreatedBy
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createSubscriptionCustomFields(body: Array<CustomField>, subscriptionId: string, xKillbillCreatedBy: string, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @param {Array<string>} body
     * @param {string} subscriptionId
     * @param {string} xKillbillCreatedBy
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createSubscriptionTags(body: Array<string>, subscriptionId: string, xKillbillCreatedBy: string, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary Create an entitlement with addOn products
     * @param {Array<Subscription>} body
     * @param {string} xKillbillCreatedBy
     * @param {string} [entitlementDate]
     * @param {string} [billingDate]
     * @param {boolean} [migrated]
     * @param {boolean} [skipResponse]
     * @param {boolean} [renameKeyIfExistsAndUnused]
     * @param {boolean} [callCompletion]
     * @param {number} [callTimeoutSec]
     * @param {Array<string>} [pluginProperty]
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createSubscriptionWithAddOns(body: Array<Subscription>, xKillbillCreatedBy: string, entitlementDate?: string, billingDate?: string, migrated?: boolean, skipResponse?: boolean, renameKeyIfExistsAndUnused?: boolean, callCompletion?: boolean, callTimeoutSec?: number, pluginProperty?: Array<string>, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Bundle>>;
    /**
     *
     * @summary Create multiple entitlements with addOn products
     * @param {Array<BulkSubscriptionsBundle>} body
     * @param {string} xKillbillCreatedBy
     * @param {string} [entitlementDate]
     * @param {string} [billingDate]
     * @param {boolean} [renameKeyIfExistsAndUnused]
     * @param {boolean} [migrated]
     * @param {boolean} [skipResponse]
     * @param {boolean} [callCompletion]
     * @param {number} [callTimeoutSec]
     * @param {Array<string>} [pluginProperty]
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createSubscriptionsWithAddOns(body: Array<BulkSubscriptionsBundle>, xKillbillCreatedBy: string, entitlementDate?: string, billingDate?: string, renameKeyIfExistsAndUnused?: boolean, migrated?: boolean, skipResponse?: boolean, callCompletion?: boolean, callTimeoutSec?: number, pluginProperty?: Array<string>, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Bundle>>>;
    /**
     *
     * @summary Remove custom fields from subscription
     * @param {string} subscriptionId
     * @param {string} xKillbillCreatedBy
     * @param {Array<string>} [customField]
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteSubscriptionCustomFields(subscriptionId: string, xKillbillCreatedBy: string, customField?: Array<string>, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary Remove tags from subscription
     * @param {string} subscriptionId
     * @param {string} xKillbillCreatedBy
     * @param {Array<string>} [tagDef]
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteSubscriptionTags(subscriptionId: string, xKillbillCreatedBy: string, tagDef?: Array<string>, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary Retrieve a subscription by id
     * @param {string} subscriptionId
     * @param {'FULL' | 'MINIMAL' | 'NONE'} [audit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSubscription(subscriptionId: string, audit?: 'FULL' | 'MINIMAL' | 'NONE', options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Subscription>>;
    /**
     *
     * @summary Retrieve subscription audit logs with history by id
     * @param {string} subscriptionId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSubscriptionAuditLogsWithHistory(subscriptionId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<AuditLog>>>;
    /**
     *
     * @summary Retrieve a subscription by external key
     * @param {string} externalKey
     * @param {'FULL' | 'MINIMAL' | 'NONE'} [audit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSubscriptionByKey(externalKey: string, audit?: 'FULL' | 'MINIMAL' | 'NONE', options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Subscription>>;
    /**
     *
     * @summary Retrieve subscription custom fields
     * @param {string} subscriptionId
     * @param {'FULL' | 'MINIMAL' | 'NONE'} [audit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSubscriptionCustomFields(subscriptionId: string, audit?: 'FULL' | 'MINIMAL' | 'NONE', options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CustomField>>>;
    /**
     *
     * @summary Retrieve subscription event audit logs with history by id
     * @param {string} eventId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSubscriptionEventAuditLogsWithHistory(eventId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<AuditLog>>>;
    /**
     *
     * @summary Retrieve subscription tags
     * @param {string} subscriptionId
     * @param {boolean} [includedDeleted]
     * @param {'FULL' | 'MINIMAL' | 'NONE'} [audit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSubscriptionTags(subscriptionId: string, includedDeleted?: boolean, audit?: 'FULL' | 'MINIMAL' | 'NONE', options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Tag>>>;
    /**
     *
     * @summary Modify custom fields to subscription
     * @param {Array<CustomField>} body
     * @param {string} subscriptionId
     * @param {string} xKillbillCreatedBy
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    modifySubscriptionCustomFields(body: Array<CustomField>, subscriptionId: string, xKillbillCreatedBy: string, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary Un-cancel an entitlement
     * @param {string} subscriptionId
     * @param {string} xKillbillCreatedBy
     * @param {Array<string>} [pluginProperty]
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    uncancelSubscriptionPlan(subscriptionId: string, xKillbillCreatedBy: string, pluginProperty?: Array<string>, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary Undo a pending change plan on an entitlement
     * @param {string} subscriptionId
     * @param {string} xKillbillCreatedBy
     * @param {Array<string>} [pluginProperty]
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    undoChangeSubscriptionPlan(subscriptionId: string, xKillbillCreatedBy: string, pluginProperty?: Array<string>, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary Update the BCD associated to a subscription
     * @param {Subscription} body
     * @param {string} subscriptionId
     * @param {string} xKillbillCreatedBy
     * @param {string} [effectiveFromDate]
     * @param {boolean} [forceNewBcdWithPastEffectiveDate]
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateSubscriptionBCD(body: Subscription, subscriptionId: string, xKillbillCreatedBy: string, effectiveFromDate?: string, forceNewBcdWithPastEffectiveDate?: boolean, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary Update the quantity associated to a subscription
     * @param {Subscription} body
     * @param {string} subscriptionId
     * @param {string} xKillbillCreatedBy
     * @param {string} [effectiveFromDate]
     * @param {boolean} [forceNewQuantityWithPastEffectiveDate]
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateSubscriptionQuantity(body: Subscription, subscriptionId: string, xKillbillCreatedBy: string, effectiveFromDate?: string, forceNewQuantityWithPastEffectiveDate?: boolean, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
};
/**
 * SubscriptionApi - factory interface
 * @export
 */
export declare const SubscriptionApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Block a subscription
     * @param {BlockingState} body
     * @param {string} subscriptionId
     * @param {string} xKillbillCreatedBy
     * @param {string} [requestedDate]
     * @param {Array<string>} [pluginProperty]
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    addSubscriptionBlockingState(body: BlockingState, subscriptionId: string, xKillbillCreatedBy: string, requestedDate?: string, pluginProperty?: Array<string>, xKillbillReason?: string, xKillbillComment?: string, options?: any): AxiosPromise<Array<BlockingState>>;
    /**
     *
     * @summary Cancel an entitlement plan
     * @param {string} subscriptionId
     * @param {string} xKillbillCreatedBy
     * @param {string} [requestedDate]
     * @param {boolean} [callCompletion]
     * @param {number} [callTimeoutSec]
     * @param {'IMMEDIATE' | 'END_OF_TERM'} [entitlementPolicy]
     * @param {'START_OF_TERM' | 'END_OF_TERM' | 'IMMEDIATE' | 'ILLEGAL'} [billingPolicy]
     * @param {boolean} [useRequestedDateForBilling]
     * @param {Array<string>} [pluginProperty]
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    cancelSubscriptionPlan(subscriptionId: string, xKillbillCreatedBy: string, requestedDate?: string, callCompletion?: boolean, callTimeoutSec?: number, entitlementPolicy?: 'IMMEDIATE' | 'END_OF_TERM', billingPolicy?: 'START_OF_TERM' | 'END_OF_TERM' | 'IMMEDIATE' | 'ILLEGAL', useRequestedDateForBilling?: boolean, pluginProperty?: Array<string>, xKillbillReason?: string, xKillbillComment?: string, options?: any): AxiosPromise<void>;
    /**
     *
     * @summary Change entitlement plan
     * @param {Subscription} body
     * @param {string} subscriptionId
     * @param {string} xKillbillCreatedBy
     * @param {string} [requestedDate]
     * @param {boolean} [callCompletion]
     * @param {number} [callTimeoutSec]
     * @param {'START_OF_TERM' | 'END_OF_TERM' | 'IMMEDIATE' | 'ILLEGAL'} [billingPolicy]
     * @param {Array<string>} [pluginProperty]
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    changeSubscriptionPlan(body: Subscription, subscriptionId: string, xKillbillCreatedBy: string, requestedDate?: string, callCompletion?: boolean, callTimeoutSec?: number, billingPolicy?: 'START_OF_TERM' | 'END_OF_TERM' | 'IMMEDIATE' | 'ILLEGAL', pluginProperty?: Array<string>, xKillbillReason?: string, xKillbillComment?: string, options?: any): AxiosPromise<void>;
    /**
     *
     * @summary Create an subscription
     * @param {Subscription} body
     * @param {string} xKillbillCreatedBy
     * @param {string} [entitlementDate]
     * @param {string} [billingDate]
     * @param {boolean} [renameKeyIfExistsAndUnused]
     * @param {boolean} [migrated]
     * @param {boolean} [skipResponse]
     * @param {boolean} [callCompletion]
     * @param {number} [callTimeoutSec]
     * @param {Array<string>} [pluginProperty]
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createSubscription(body: Subscription, xKillbillCreatedBy: string, entitlementDate?: string, billingDate?: string, renameKeyIfExistsAndUnused?: boolean, migrated?: boolean, skipResponse?: boolean, callCompletion?: boolean, callTimeoutSec?: number, pluginProperty?: Array<string>, xKillbillReason?: string, xKillbillComment?: string, options?: any): AxiosPromise<Subscription>;
    /**
     *
     * @summary Add custom fields to subscription
     * @param {Array<CustomField>} body
     * @param {string} subscriptionId
     * @param {string} xKillbillCreatedBy
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createSubscriptionCustomFields(body: Array<CustomField>, subscriptionId: string, xKillbillCreatedBy: string, xKillbillReason?: string, xKillbillComment?: string, options?: any): AxiosPromise<void>;
    /**
     *
     * @param {Array<string>} body
     * @param {string} subscriptionId
     * @param {string} xKillbillCreatedBy
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createSubscriptionTags(body: Array<string>, subscriptionId: string, xKillbillCreatedBy: string, xKillbillReason?: string, xKillbillComment?: string, options?: any): AxiosPromise<void>;
    /**
     *
     * @summary Create an entitlement with addOn products
     * @param {Array<Subscription>} body
     * @param {string} xKillbillCreatedBy
     * @param {string} [entitlementDate]
     * @param {string} [billingDate]
     * @param {boolean} [migrated]
     * @param {boolean} [skipResponse]
     * @param {boolean} [renameKeyIfExistsAndUnused]
     * @param {boolean} [callCompletion]
     * @param {number} [callTimeoutSec]
     * @param {Array<string>} [pluginProperty]
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createSubscriptionWithAddOns(body: Array<Subscription>, xKillbillCreatedBy: string, entitlementDate?: string, billingDate?: string, migrated?: boolean, skipResponse?: boolean, renameKeyIfExistsAndUnused?: boolean, callCompletion?: boolean, callTimeoutSec?: number, pluginProperty?: Array<string>, xKillbillReason?: string, xKillbillComment?: string, options?: any): AxiosPromise<Bundle>;
    /**
     *
     * @summary Create multiple entitlements with addOn products
     * @param {Array<BulkSubscriptionsBundle>} body
     * @param {string} xKillbillCreatedBy
     * @param {string} [entitlementDate]
     * @param {string} [billingDate]
     * @param {boolean} [renameKeyIfExistsAndUnused]
     * @param {boolean} [migrated]
     * @param {boolean} [skipResponse]
     * @param {boolean} [callCompletion]
     * @param {number} [callTimeoutSec]
     * @param {Array<string>} [pluginProperty]
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createSubscriptionsWithAddOns(body: Array<BulkSubscriptionsBundle>, xKillbillCreatedBy: string, entitlementDate?: string, billingDate?: string, renameKeyIfExistsAndUnused?: boolean, migrated?: boolean, skipResponse?: boolean, callCompletion?: boolean, callTimeoutSec?: number, pluginProperty?: Array<string>, xKillbillReason?: string, xKillbillComment?: string, options?: any): AxiosPromise<Array<Bundle>>;
    /**
     *
     * @summary Remove custom fields from subscription
     * @param {string} subscriptionId
     * @param {string} xKillbillCreatedBy
     * @param {Array<string>} [customField]
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteSubscriptionCustomFields(subscriptionId: string, xKillbillCreatedBy: string, customField?: Array<string>, xKillbillReason?: string, xKillbillComment?: string, options?: any): AxiosPromise<void>;
    /**
     *
     * @summary Remove tags from subscription
     * @param {string} subscriptionId
     * @param {string} xKillbillCreatedBy
     * @param {Array<string>} [tagDef]
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteSubscriptionTags(subscriptionId: string, xKillbillCreatedBy: string, tagDef?: Array<string>, xKillbillReason?: string, xKillbillComment?: string, options?: any): AxiosPromise<void>;
    /**
     *
     * @summary Retrieve a subscription by id
     * @param {string} subscriptionId
     * @param {'FULL' | 'MINIMAL' | 'NONE'} [audit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSubscription(subscriptionId: string, audit?: 'FULL' | 'MINIMAL' | 'NONE', options?: any): AxiosPromise<Subscription>;
    /**
     *
     * @summary Retrieve subscription audit logs with history by id
     * @param {string} subscriptionId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSubscriptionAuditLogsWithHistory(subscriptionId: string, options?: any): AxiosPromise<Array<AuditLog>>;
    /**
     *
     * @summary Retrieve a subscription by external key
     * @param {string} externalKey
     * @param {'FULL' | 'MINIMAL' | 'NONE'} [audit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSubscriptionByKey(externalKey: string, audit?: 'FULL' | 'MINIMAL' | 'NONE', options?: any): AxiosPromise<Subscription>;
    /**
     *
     * @summary Retrieve subscription custom fields
     * @param {string} subscriptionId
     * @param {'FULL' | 'MINIMAL' | 'NONE'} [audit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSubscriptionCustomFields(subscriptionId: string, audit?: 'FULL' | 'MINIMAL' | 'NONE', options?: any): AxiosPromise<Array<CustomField>>;
    /**
     *
     * @summary Retrieve subscription event audit logs with history by id
     * @param {string} eventId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSubscriptionEventAuditLogsWithHistory(eventId: string, options?: any): AxiosPromise<Array<AuditLog>>;
    /**
     *
     * @summary Retrieve subscription tags
     * @param {string} subscriptionId
     * @param {boolean} [includedDeleted]
     * @param {'FULL' | 'MINIMAL' | 'NONE'} [audit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getSubscriptionTags(subscriptionId: string, includedDeleted?: boolean, audit?: 'FULL' | 'MINIMAL' | 'NONE', options?: any): AxiosPromise<Array<Tag>>;
    /**
     *
     * @summary Modify custom fields to subscription
     * @param {Array<CustomField>} body
     * @param {string} subscriptionId
     * @param {string} xKillbillCreatedBy
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    modifySubscriptionCustomFields(body: Array<CustomField>, subscriptionId: string, xKillbillCreatedBy: string, xKillbillReason?: string, xKillbillComment?: string, options?: any): AxiosPromise<void>;
    /**
     *
     * @summary Un-cancel an entitlement
     * @param {string} subscriptionId
     * @param {string} xKillbillCreatedBy
     * @param {Array<string>} [pluginProperty]
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    uncancelSubscriptionPlan(subscriptionId: string, xKillbillCreatedBy: string, pluginProperty?: Array<string>, xKillbillReason?: string, xKillbillComment?: string, options?: any): AxiosPromise<void>;
    /**
     *
     * @summary Undo a pending change plan on an entitlement
     * @param {string} subscriptionId
     * @param {string} xKillbillCreatedBy
     * @param {Array<string>} [pluginProperty]
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    undoChangeSubscriptionPlan(subscriptionId: string, xKillbillCreatedBy: string, pluginProperty?: Array<string>, xKillbillReason?: string, xKillbillComment?: string, options?: any): AxiosPromise<void>;
    /**
     *
     * @summary Update the BCD associated to a subscription
     * @param {Subscription} body
     * @param {string} subscriptionId
     * @param {string} xKillbillCreatedBy
     * @param {string} [effectiveFromDate]
     * @param {boolean} [forceNewBcdWithPastEffectiveDate]
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateSubscriptionBCD(body: Subscription, subscriptionId: string, xKillbillCreatedBy: string, effectiveFromDate?: string, forceNewBcdWithPastEffectiveDate?: boolean, xKillbillReason?: string, xKillbillComment?: string, options?: any): AxiosPromise<void>;
    /**
     *
     * @summary Update the quantity associated to a subscription
     * @param {Subscription} body
     * @param {string} subscriptionId
     * @param {string} xKillbillCreatedBy
     * @param {string} [effectiveFromDate]
     * @param {boolean} [forceNewQuantityWithPastEffectiveDate]
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    updateSubscriptionQuantity(body: Subscription, subscriptionId: string, xKillbillCreatedBy: string, effectiveFromDate?: string, forceNewQuantityWithPastEffectiveDate?: boolean, xKillbillReason?: string, xKillbillComment?: string, options?: any): AxiosPromise<void>;
};
/**
 * SubscriptionApi - object-oriented interface
 * @export
 * @class SubscriptionApi
 * @extends {BaseAPI}
 */
export declare class SubscriptionApi extends BaseAPI {
    /**
     *
     * @summary Block a subscription
     * @param {BlockingState} body
     * @param {string} subscriptionId
     * @param {string} xKillbillCreatedBy
     * @param {string} [requestedDate]
     * @param {Array<string>} [pluginProperty]
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubscriptionApi
     */
    addSubscriptionBlockingState(body: BlockingState, subscriptionId: string, xKillbillCreatedBy: string, requestedDate?: string, pluginProperty?: Array<string>, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<BlockingState[], any>>;
    /**
     *
     * @summary Cancel an entitlement plan
     * @param {string} subscriptionId
     * @param {string} xKillbillCreatedBy
     * @param {string} [requestedDate]
     * @param {boolean} [callCompletion]
     * @param {number} [callTimeoutSec]
     * @param {'IMMEDIATE' | 'END_OF_TERM'} [entitlementPolicy]
     * @param {'START_OF_TERM' | 'END_OF_TERM' | 'IMMEDIATE' | 'ILLEGAL'} [billingPolicy]
     * @param {boolean} [useRequestedDateForBilling]
     * @param {Array<string>} [pluginProperty]
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubscriptionApi
     */
    cancelSubscriptionPlan(subscriptionId: string, xKillbillCreatedBy: string, requestedDate?: string, callCompletion?: boolean, callTimeoutSec?: number, entitlementPolicy?: 'IMMEDIATE' | 'END_OF_TERM', billingPolicy?: 'START_OF_TERM' | 'END_OF_TERM' | 'IMMEDIATE' | 'ILLEGAL', useRequestedDateForBilling?: boolean, pluginProperty?: Array<string>, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     *
     * @summary Change entitlement plan
     * @param {Subscription} body
     * @param {string} subscriptionId
     * @param {string} xKillbillCreatedBy
     * @param {string} [requestedDate]
     * @param {boolean} [callCompletion]
     * @param {number} [callTimeoutSec]
     * @param {'START_OF_TERM' | 'END_OF_TERM' | 'IMMEDIATE' | 'ILLEGAL'} [billingPolicy]
     * @param {Array<string>} [pluginProperty]
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubscriptionApi
     */
    changeSubscriptionPlan(body: Subscription, subscriptionId: string, xKillbillCreatedBy: string, requestedDate?: string, callCompletion?: boolean, callTimeoutSec?: number, billingPolicy?: 'START_OF_TERM' | 'END_OF_TERM' | 'IMMEDIATE' | 'ILLEGAL', pluginProperty?: Array<string>, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     *
     * @summary Create an subscription
     * @param {Subscription} body
     * @param {string} xKillbillCreatedBy
     * @param {string} [entitlementDate]
     * @param {string} [billingDate]
     * @param {boolean} [renameKeyIfExistsAndUnused]
     * @param {boolean} [migrated]
     * @param {boolean} [skipResponse]
     * @param {boolean} [callCompletion]
     * @param {number} [callTimeoutSec]
     * @param {Array<string>} [pluginProperty]
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubscriptionApi
     */
    createSubscription(body: Subscription, xKillbillCreatedBy: string, entitlementDate?: string, billingDate?: string, renameKeyIfExistsAndUnused?: boolean, migrated?: boolean, skipResponse?: boolean, callCompletion?: boolean, callTimeoutSec?: number, pluginProperty?: Array<string>, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Subscription, any>>;
    /**
     *
     * @summary Add custom fields to subscription
     * @param {Array<CustomField>} body
     * @param {string} subscriptionId
     * @param {string} xKillbillCreatedBy
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubscriptionApi
     */
    createSubscriptionCustomFields(body: Array<CustomField>, subscriptionId: string, xKillbillCreatedBy: string, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     *
     * @param {Array<string>} body
     * @param {string} subscriptionId
     * @param {string} xKillbillCreatedBy
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubscriptionApi
     */
    createSubscriptionTags(body: Array<string>, subscriptionId: string, xKillbillCreatedBy: string, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     *
     * @summary Create an entitlement with addOn products
     * @param {Array<Subscription>} body
     * @param {string} xKillbillCreatedBy
     * @param {string} [entitlementDate]
     * @param {string} [billingDate]
     * @param {boolean} [migrated]
     * @param {boolean} [skipResponse]
     * @param {boolean} [renameKeyIfExistsAndUnused]
     * @param {boolean} [callCompletion]
     * @param {number} [callTimeoutSec]
     * @param {Array<string>} [pluginProperty]
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubscriptionApi
     */
    createSubscriptionWithAddOns(body: Array<Subscription>, xKillbillCreatedBy: string, entitlementDate?: string, billingDate?: string, migrated?: boolean, skipResponse?: boolean, renameKeyIfExistsAndUnused?: boolean, callCompletion?: boolean, callTimeoutSec?: number, pluginProperty?: Array<string>, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Bundle, any>>;
    /**
     *
     * @summary Create multiple entitlements with addOn products
     * @param {Array<BulkSubscriptionsBundle>} body
     * @param {string} xKillbillCreatedBy
     * @param {string} [entitlementDate]
     * @param {string} [billingDate]
     * @param {boolean} [renameKeyIfExistsAndUnused]
     * @param {boolean} [migrated]
     * @param {boolean} [skipResponse]
     * @param {boolean} [callCompletion]
     * @param {number} [callTimeoutSec]
     * @param {Array<string>} [pluginProperty]
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubscriptionApi
     */
    createSubscriptionsWithAddOns(body: Array<BulkSubscriptionsBundle>, xKillbillCreatedBy: string, entitlementDate?: string, billingDate?: string, renameKeyIfExistsAndUnused?: boolean, migrated?: boolean, skipResponse?: boolean, callCompletion?: boolean, callTimeoutSec?: number, pluginProperty?: Array<string>, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Bundle[], any>>;
    /**
     *
     * @summary Remove custom fields from subscription
     * @param {string} subscriptionId
     * @param {string} xKillbillCreatedBy
     * @param {Array<string>} [customField]
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubscriptionApi
     */
    deleteSubscriptionCustomFields(subscriptionId: string, xKillbillCreatedBy: string, customField?: Array<string>, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     *
     * @summary Remove tags from subscription
     * @param {string} subscriptionId
     * @param {string} xKillbillCreatedBy
     * @param {Array<string>} [tagDef]
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubscriptionApi
     */
    deleteSubscriptionTags(subscriptionId: string, xKillbillCreatedBy: string, tagDef?: Array<string>, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     *
     * @summary Retrieve a subscription by id
     * @param {string} subscriptionId
     * @param {'FULL' | 'MINIMAL' | 'NONE'} [audit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubscriptionApi
     */
    getSubscription(subscriptionId: string, audit?: 'FULL' | 'MINIMAL' | 'NONE', options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Subscription, any>>;
    /**
     *
     * @summary Retrieve subscription audit logs with history by id
     * @param {string} subscriptionId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubscriptionApi
     */
    getSubscriptionAuditLogsWithHistory(subscriptionId: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<AuditLog[], any>>;
    /**
     *
     * @summary Retrieve a subscription by external key
     * @param {string} externalKey
     * @param {'FULL' | 'MINIMAL' | 'NONE'} [audit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubscriptionApi
     */
    getSubscriptionByKey(externalKey: string, audit?: 'FULL' | 'MINIMAL' | 'NONE', options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Subscription, any>>;
    /**
     *
     * @summary Retrieve subscription custom fields
     * @param {string} subscriptionId
     * @param {'FULL' | 'MINIMAL' | 'NONE'} [audit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubscriptionApi
     */
    getSubscriptionCustomFields(subscriptionId: string, audit?: 'FULL' | 'MINIMAL' | 'NONE', options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<CustomField[], any>>;
    /**
     *
     * @summary Retrieve subscription event audit logs with history by id
     * @param {string} eventId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubscriptionApi
     */
    getSubscriptionEventAuditLogsWithHistory(eventId: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<AuditLog[], any>>;
    /**
     *
     * @summary Retrieve subscription tags
     * @param {string} subscriptionId
     * @param {boolean} [includedDeleted]
     * @param {'FULL' | 'MINIMAL' | 'NONE'} [audit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubscriptionApi
     */
    getSubscriptionTags(subscriptionId: string, includedDeleted?: boolean, audit?: 'FULL' | 'MINIMAL' | 'NONE', options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Tag[], any>>;
    /**
     *
     * @summary Modify custom fields to subscription
     * @param {Array<CustomField>} body
     * @param {string} subscriptionId
     * @param {string} xKillbillCreatedBy
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubscriptionApi
     */
    modifySubscriptionCustomFields(body: Array<CustomField>, subscriptionId: string, xKillbillCreatedBy: string, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     *
     * @summary Un-cancel an entitlement
     * @param {string} subscriptionId
     * @param {string} xKillbillCreatedBy
     * @param {Array<string>} [pluginProperty]
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubscriptionApi
     */
    uncancelSubscriptionPlan(subscriptionId: string, xKillbillCreatedBy: string, pluginProperty?: Array<string>, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     *
     * @summary Undo a pending change plan on an entitlement
     * @param {string} subscriptionId
     * @param {string} xKillbillCreatedBy
     * @param {Array<string>} [pluginProperty]
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubscriptionApi
     */
    undoChangeSubscriptionPlan(subscriptionId: string, xKillbillCreatedBy: string, pluginProperty?: Array<string>, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     *
     * @summary Update the BCD associated to a subscription
     * @param {Subscription} body
     * @param {string} subscriptionId
     * @param {string} xKillbillCreatedBy
     * @param {string} [effectiveFromDate]
     * @param {boolean} [forceNewBcdWithPastEffectiveDate]
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubscriptionApi
     */
    updateSubscriptionBCD(body: Subscription, subscriptionId: string, xKillbillCreatedBy: string, effectiveFromDate?: string, forceNewBcdWithPastEffectiveDate?: boolean, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     *
     * @summary Update the quantity associated to a subscription
     * @param {Subscription} body
     * @param {string} subscriptionId
     * @param {string} xKillbillCreatedBy
     * @param {string} [effectiveFromDate]
     * @param {boolean} [forceNewQuantityWithPastEffectiveDate]
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubscriptionApi
     */
    updateSubscriptionQuantity(body: Subscription, subscriptionId: string, xKillbillCreatedBy: string, effectiveFromDate?: string, forceNewQuantityWithPastEffectiveDate?: boolean, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
}
/**
 * TagApi - axios parameter creator
 * @export
 */
export declare const TagApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Retrieve tag audit logs with history by id
     * @param {string} tagId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTagAuditLogsWithHistory: (tagId: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary List tags
     * @param {number} [offset]
     * @param {number} [limit]
     * @param {'FULL' | 'MINIMAL' | 'NONE'} [audit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTags: (offset?: number, limit?: number, audit?: 'FULL' | 'MINIMAL' | 'NONE', options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Search tags
     * @param {string} searchKey
     * @param {number} [offset]
     * @param {number} [limit]
     * @param {'FULL' | 'MINIMAL' | 'NONE'} [audit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchTags: (searchKey: string, offset?: number, limit?: number, audit?: 'FULL' | 'MINIMAL' | 'NONE', options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * TagApi - functional programming interface
 * @export
 */
export declare const TagApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary Retrieve tag audit logs with history by id
     * @param {string} tagId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTagAuditLogsWithHistory(tagId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<AuditLog>>>;
    /**
     *
     * @summary List tags
     * @param {number} [offset]
     * @param {number} [limit]
     * @param {'FULL' | 'MINIMAL' | 'NONE'} [audit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTags(offset?: number, limit?: number, audit?: 'FULL' | 'MINIMAL' | 'NONE', options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Tag>>>;
    /**
     *
     * @summary Search tags
     * @param {string} searchKey
     * @param {number} [offset]
     * @param {number} [limit]
     * @param {'FULL' | 'MINIMAL' | 'NONE'} [audit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchTags(searchKey: string, offset?: number, limit?: number, audit?: 'FULL' | 'MINIMAL' | 'NONE', options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Tag>>>;
};
/**
 * TagApi - factory interface
 * @export
 */
export declare const TagApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Retrieve tag audit logs with history by id
     * @param {string} tagId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTagAuditLogsWithHistory(tagId: string, options?: any): AxiosPromise<Array<AuditLog>>;
    /**
     *
     * @summary List tags
     * @param {number} [offset]
     * @param {number} [limit]
     * @param {'FULL' | 'MINIMAL' | 'NONE'} [audit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTags(offset?: number, limit?: number, audit?: 'FULL' | 'MINIMAL' | 'NONE', options?: any): AxiosPromise<Array<Tag>>;
    /**
     *
     * @summary Search tags
     * @param {string} searchKey
     * @param {number} [offset]
     * @param {number} [limit]
     * @param {'FULL' | 'MINIMAL' | 'NONE'} [audit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    searchTags(searchKey: string, offset?: number, limit?: number, audit?: 'FULL' | 'MINIMAL' | 'NONE', options?: any): AxiosPromise<Array<Tag>>;
};
/**
 * TagApi - object-oriented interface
 * @export
 * @class TagApi
 * @extends {BaseAPI}
 */
export declare class TagApi extends BaseAPI {
    /**
     *
     * @summary Retrieve tag audit logs with history by id
     * @param {string} tagId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TagApi
     */
    getTagAuditLogsWithHistory(tagId: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<AuditLog[], any>>;
    /**
     *
     * @summary List tags
     * @param {number} [offset]
     * @param {number} [limit]
     * @param {'FULL' | 'MINIMAL' | 'NONE'} [audit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TagApi
     */
    getTags(offset?: number, limit?: number, audit?: 'FULL' | 'MINIMAL' | 'NONE', options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Tag[], any>>;
    /**
     *
     * @summary Search tags
     * @param {string} searchKey
     * @param {number} [offset]
     * @param {number} [limit]
     * @param {'FULL' | 'MINIMAL' | 'NONE'} [audit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TagApi
     */
    searchTags(searchKey: string, offset?: number, limit?: number, audit?: 'FULL' | 'MINIMAL' | 'NONE', options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Tag[], any>>;
}
/**
 * TagDefinitionApi - axios parameter creator
 * @export
 */
export declare const TagDefinitionApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Create a tag definition
     * @param {TagDefinition} body
     * @param {string} xKillbillCreatedBy
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createTagDefinition: (body: TagDefinition, xKillbillCreatedBy: string, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Delete a tag definition
     * @param {string} tagDefinitionId
     * @param {string} xKillbillCreatedBy
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteTagDefinition: (tagDefinitionId: string, xKillbillCreatedBy: string, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Retrieve a tag definition
     * @param {string} tagDefinitionId
     * @param {'FULL' | 'MINIMAL' | 'NONE'} [audit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTagDefinition: (tagDefinitionId: string, audit?: 'FULL' | 'MINIMAL' | 'NONE', options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Retrieve tag definition audit logs with history by id
     * @param {string} tagDefinitionId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTagDefinitionAuditLogsWithHistory: (tagDefinitionId: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary List tag definitions
     * @param {'FULL' | 'MINIMAL' | 'NONE'} [audit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTagDefinitions: (audit?: 'FULL' | 'MINIMAL' | 'NONE', options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * TagDefinitionApi - functional programming interface
 * @export
 */
export declare const TagDefinitionApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary Create a tag definition
     * @param {TagDefinition} body
     * @param {string} xKillbillCreatedBy
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createTagDefinition(body: TagDefinition, xKillbillCreatedBy: string, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TagDefinition>>;
    /**
     *
     * @summary Delete a tag definition
     * @param {string} tagDefinitionId
     * @param {string} xKillbillCreatedBy
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteTagDefinition(tagDefinitionId: string, xKillbillCreatedBy: string, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary Retrieve a tag definition
     * @param {string} tagDefinitionId
     * @param {'FULL' | 'MINIMAL' | 'NONE'} [audit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTagDefinition(tagDefinitionId: string, audit?: 'FULL' | 'MINIMAL' | 'NONE', options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TagDefinition>>;
    /**
     *
     * @summary Retrieve tag definition audit logs with history by id
     * @param {string} tagDefinitionId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTagDefinitionAuditLogsWithHistory(tagDefinitionId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<AuditLog>>>;
    /**
     *
     * @summary List tag definitions
     * @param {'FULL' | 'MINIMAL' | 'NONE'} [audit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTagDefinitions(audit?: 'FULL' | 'MINIMAL' | 'NONE', options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<TagDefinition>>>;
};
/**
 * TagDefinitionApi - factory interface
 * @export
 */
export declare const TagDefinitionApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Create a tag definition
     * @param {TagDefinition} body
     * @param {string} xKillbillCreatedBy
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createTagDefinition(body: TagDefinition, xKillbillCreatedBy: string, xKillbillReason?: string, xKillbillComment?: string, options?: any): AxiosPromise<TagDefinition>;
    /**
     *
     * @summary Delete a tag definition
     * @param {string} tagDefinitionId
     * @param {string} xKillbillCreatedBy
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteTagDefinition(tagDefinitionId: string, xKillbillCreatedBy: string, xKillbillReason?: string, xKillbillComment?: string, options?: any): AxiosPromise<void>;
    /**
     *
     * @summary Retrieve a tag definition
     * @param {string} tagDefinitionId
     * @param {'FULL' | 'MINIMAL' | 'NONE'} [audit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTagDefinition(tagDefinitionId: string, audit?: 'FULL' | 'MINIMAL' | 'NONE', options?: any): AxiosPromise<TagDefinition>;
    /**
     *
     * @summary Retrieve tag definition audit logs with history by id
     * @param {string} tagDefinitionId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTagDefinitionAuditLogsWithHistory(tagDefinitionId: string, options?: any): AxiosPromise<Array<AuditLog>>;
    /**
     *
     * @summary List tag definitions
     * @param {'FULL' | 'MINIMAL' | 'NONE'} [audit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTagDefinitions(audit?: 'FULL' | 'MINIMAL' | 'NONE', options?: any): AxiosPromise<Array<TagDefinition>>;
};
/**
 * TagDefinitionApi - object-oriented interface
 * @export
 * @class TagDefinitionApi
 * @extends {BaseAPI}
 */
export declare class TagDefinitionApi extends BaseAPI {
    /**
     *
     * @summary Create a tag definition
     * @param {TagDefinition} body
     * @param {string} xKillbillCreatedBy
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TagDefinitionApi
     */
    createTagDefinition(body: TagDefinition, xKillbillCreatedBy: string, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<TagDefinition, any>>;
    /**
     *
     * @summary Delete a tag definition
     * @param {string} tagDefinitionId
     * @param {string} xKillbillCreatedBy
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TagDefinitionApi
     */
    deleteTagDefinition(tagDefinitionId: string, xKillbillCreatedBy: string, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     *
     * @summary Retrieve a tag definition
     * @param {string} tagDefinitionId
     * @param {'FULL' | 'MINIMAL' | 'NONE'} [audit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TagDefinitionApi
     */
    getTagDefinition(tagDefinitionId: string, audit?: 'FULL' | 'MINIMAL' | 'NONE', options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<TagDefinition, any>>;
    /**
     *
     * @summary Retrieve tag definition audit logs with history by id
     * @param {string} tagDefinitionId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TagDefinitionApi
     */
    getTagDefinitionAuditLogsWithHistory(tagDefinitionId: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<AuditLog[], any>>;
    /**
     *
     * @summary List tag definitions
     * @param {'FULL' | 'MINIMAL' | 'NONE'} [audit]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TagDefinitionApi
     */
    getTagDefinitions(audit?: 'FULL' | 'MINIMAL' | 'NONE', options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<TagDefinition[], any>>;
}
/**
 * TenantApi - axios parameter creator
 * @export
 */
export declare const TenantApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Create a tenant
     * @param {Tenant} body
     * @param {string} xKillbillCreatedBy
     * @param {boolean} [useGlobalDefault]
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createTenant: (body: Tenant, xKillbillCreatedBy: string, useGlobalDefault?: boolean, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Delete a per tenant configuration (system properties)
     * @param {string} xKillbillCreatedBy
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deletePerTenantConfiguration: (xKillbillCreatedBy: string, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Delete a per tenant configuration for a plugin
     * @param {string} pluginName
     * @param {string} xKillbillCreatedBy
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deletePluginConfiguration: (pluginName: string, xKillbillCreatedBy: string, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Delete a per tenant payment state machine for a plugin
     * @param {string} pluginName
     * @param {string} xKillbillCreatedBy
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deletePluginPaymentStateMachineConfig: (pluginName: string, xKillbillCreatedBy: string, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Delete a push notification
     * @param {string} xKillbillCreatedBy
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deletePushNotificationCallbacks: (xKillbillCreatedBy: string, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Delete  a per tenant user key/value
     * @param {string} keyName
     * @param {string} xKillbillCreatedBy
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteUserKeyValue: (keyName: string, xKillbillCreatedBy: string, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Retrieve a per tenant key value based on key prefix
     * @param {string} keyPrefix
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllPluginConfiguration: (keyPrefix: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Retrieve a per tenant configuration (system properties)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPerTenantConfiguration: (options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Retrieve a per tenant configuration for a plugin
     * @param {string} pluginName
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPluginConfiguration: (pluginName: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Retrieve a per tenant payment state machine for a plugin
     * @param {string} pluginName
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPluginPaymentStateMachineConfig: (pluginName: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Retrieve a push notification
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPushNotificationCallbacks: (options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Retrieve a tenant by id
     * @param {string} tenantId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTenant: (tenantId: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Retrieve a tenant by its API key
     * @param {string} [apiKey]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTenantByApiKey: (apiKey?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Retrieve a per tenant user key/value
     * @param {string} keyName
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserKeyValue: (keyName: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Add a per tenant user key/value
     * @param {string} body
     * @param {string} keyName
     * @param {string} xKillbillCreatedBy
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    insertUserKeyValue: (body: string, keyName: string, xKillbillCreatedBy: string, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Create a push notification
     * @param {string} xKillbillCreatedBy
     * @param {string} [cb]
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    registerPushNotificationCallback: (xKillbillCreatedBy: string, cb?: string, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Add a per tenant configuration (system properties)
     * @param {string} body
     * @param {string} xKillbillCreatedBy
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    uploadPerTenantConfiguration: (body: string, xKillbillCreatedBy: string, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Add a per tenant configuration for a plugin
     * @param {string} body
     * @param {string} pluginName
     * @param {string} xKillbillCreatedBy
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    uploadPluginConfiguration: (body: string, pluginName: string, xKillbillCreatedBy: string, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Add a per tenant payment state machine for a plugin
     * @param {string} body
     * @param {string} pluginName
     * @param {string} xKillbillCreatedBy
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    uploadPluginPaymentStateMachineConfig: (body: string, pluginName: string, xKillbillCreatedBy: string, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * TenantApi - functional programming interface
 * @export
 */
export declare const TenantApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary Create a tenant
     * @param {Tenant} body
     * @param {string} xKillbillCreatedBy
     * @param {boolean} [useGlobalDefault]
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createTenant(body: Tenant, xKillbillCreatedBy: string, useGlobalDefault?: boolean, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Tenant>>;
    /**
     *
     * @summary Delete a per tenant configuration (system properties)
     * @param {string} xKillbillCreatedBy
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deletePerTenantConfiguration(xKillbillCreatedBy: string, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary Delete a per tenant configuration for a plugin
     * @param {string} pluginName
     * @param {string} xKillbillCreatedBy
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deletePluginConfiguration(pluginName: string, xKillbillCreatedBy: string, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary Delete a per tenant payment state machine for a plugin
     * @param {string} pluginName
     * @param {string} xKillbillCreatedBy
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deletePluginPaymentStateMachineConfig(pluginName: string, xKillbillCreatedBy: string, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary Delete a push notification
     * @param {string} xKillbillCreatedBy
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deletePushNotificationCallbacks(xKillbillCreatedBy: string, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary Delete  a per tenant user key/value
     * @param {string} keyName
     * @param {string} xKillbillCreatedBy
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteUserKeyValue(keyName: string, xKillbillCreatedBy: string, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
    /**
     *
     * @summary Retrieve a per tenant key value based on key prefix
     * @param {string} keyPrefix
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllPluginConfiguration(keyPrefix: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<TenantKeyValue>>>;
    /**
     *
     * @summary Retrieve a per tenant configuration (system properties)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPerTenantConfiguration(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TenantKeyValue>>;
    /**
     *
     * @summary Retrieve a per tenant configuration for a plugin
     * @param {string} pluginName
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPluginConfiguration(pluginName: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TenantKeyValue>>;
    /**
     *
     * @summary Retrieve a per tenant payment state machine for a plugin
     * @param {string} pluginName
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPluginPaymentStateMachineConfig(pluginName: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TenantKeyValue>>;
    /**
     *
     * @summary Retrieve a push notification
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPushNotificationCallbacks(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TenantKeyValue>>;
    /**
     *
     * @summary Retrieve a tenant by id
     * @param {string} tenantId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTenant(tenantId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Tenant>>;
    /**
     *
     * @summary Retrieve a tenant by its API key
     * @param {string} [apiKey]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTenantByApiKey(apiKey?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Tenant>>;
    /**
     *
     * @summary Retrieve a per tenant user key/value
     * @param {string} keyName
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserKeyValue(keyName: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TenantKeyValue>>;
    /**
     *
     * @summary Add a per tenant user key/value
     * @param {string} body
     * @param {string} keyName
     * @param {string} xKillbillCreatedBy
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    insertUserKeyValue(body: string, keyName: string, xKillbillCreatedBy: string, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TenantKeyValue>>;
    /**
     *
     * @summary Create a push notification
     * @param {string} xKillbillCreatedBy
     * @param {string} [cb]
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    registerPushNotificationCallback(xKillbillCreatedBy: string, cb?: string, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TenantKeyValue>>;
    /**
     *
     * @summary Add a per tenant configuration (system properties)
     * @param {string} body
     * @param {string} xKillbillCreatedBy
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    uploadPerTenantConfiguration(body: string, xKillbillCreatedBy: string, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TenantKeyValue>>;
    /**
     *
     * @summary Add a per tenant configuration for a plugin
     * @param {string} body
     * @param {string} pluginName
     * @param {string} xKillbillCreatedBy
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    uploadPluginConfiguration(body: string, pluginName: string, xKillbillCreatedBy: string, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TenantKeyValue>>;
    /**
     *
     * @summary Add a per tenant payment state machine for a plugin
     * @param {string} body
     * @param {string} pluginName
     * @param {string} xKillbillCreatedBy
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    uploadPluginPaymentStateMachineConfig(body: string, pluginName: string, xKillbillCreatedBy: string, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TenantKeyValue>>;
};
/**
 * TenantApi - factory interface
 * @export
 */
export declare const TenantApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Create a tenant
     * @param {Tenant} body
     * @param {string} xKillbillCreatedBy
     * @param {boolean} [useGlobalDefault]
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    createTenant(body: Tenant, xKillbillCreatedBy: string, useGlobalDefault?: boolean, xKillbillReason?: string, xKillbillComment?: string, options?: any): AxiosPromise<Tenant>;
    /**
     *
     * @summary Delete a per tenant configuration (system properties)
     * @param {string} xKillbillCreatedBy
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deletePerTenantConfiguration(xKillbillCreatedBy: string, xKillbillReason?: string, xKillbillComment?: string, options?: any): AxiosPromise<void>;
    /**
     *
     * @summary Delete a per tenant configuration for a plugin
     * @param {string} pluginName
     * @param {string} xKillbillCreatedBy
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deletePluginConfiguration(pluginName: string, xKillbillCreatedBy: string, xKillbillReason?: string, xKillbillComment?: string, options?: any): AxiosPromise<void>;
    /**
     *
     * @summary Delete a per tenant payment state machine for a plugin
     * @param {string} pluginName
     * @param {string} xKillbillCreatedBy
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deletePluginPaymentStateMachineConfig(pluginName: string, xKillbillCreatedBy: string, xKillbillReason?: string, xKillbillComment?: string, options?: any): AxiosPromise<void>;
    /**
     *
     * @summary Delete a push notification
     * @param {string} xKillbillCreatedBy
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deletePushNotificationCallbacks(xKillbillCreatedBy: string, xKillbillReason?: string, xKillbillComment?: string, options?: any): AxiosPromise<void>;
    /**
     *
     * @summary Delete  a per tenant user key/value
     * @param {string} keyName
     * @param {string} xKillbillCreatedBy
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    deleteUserKeyValue(keyName: string, xKillbillCreatedBy: string, xKillbillReason?: string, xKillbillComment?: string, options?: any): AxiosPromise<void>;
    /**
     *
     * @summary Retrieve a per tenant key value based on key prefix
     * @param {string} keyPrefix
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllPluginConfiguration(keyPrefix: string, options?: any): AxiosPromise<Array<TenantKeyValue>>;
    /**
     *
     * @summary Retrieve a per tenant configuration (system properties)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPerTenantConfiguration(options?: any): AxiosPromise<TenantKeyValue>;
    /**
     *
     * @summary Retrieve a per tenant configuration for a plugin
     * @param {string} pluginName
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPluginConfiguration(pluginName: string, options?: any): AxiosPromise<TenantKeyValue>;
    /**
     *
     * @summary Retrieve a per tenant payment state machine for a plugin
     * @param {string} pluginName
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPluginPaymentStateMachineConfig(pluginName: string, options?: any): AxiosPromise<TenantKeyValue>;
    /**
     *
     * @summary Retrieve a push notification
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getPushNotificationCallbacks(options?: any): AxiosPromise<TenantKeyValue>;
    /**
     *
     * @summary Retrieve a tenant by id
     * @param {string} tenantId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTenant(tenantId: string, options?: any): AxiosPromise<Tenant>;
    /**
     *
     * @summary Retrieve a tenant by its API key
     * @param {string} [apiKey]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getTenantByApiKey(apiKey?: string, options?: any): AxiosPromise<Tenant>;
    /**
     *
     * @summary Retrieve a per tenant user key/value
     * @param {string} keyName
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUserKeyValue(keyName: string, options?: any): AxiosPromise<TenantKeyValue>;
    /**
     *
     * @summary Add a per tenant user key/value
     * @param {string} body
     * @param {string} keyName
     * @param {string} xKillbillCreatedBy
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    insertUserKeyValue(body: string, keyName: string, xKillbillCreatedBy: string, xKillbillReason?: string, xKillbillComment?: string, options?: any): AxiosPromise<TenantKeyValue>;
    /**
     *
     * @summary Create a push notification
     * @param {string} xKillbillCreatedBy
     * @param {string} [cb]
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    registerPushNotificationCallback(xKillbillCreatedBy: string, cb?: string, xKillbillReason?: string, xKillbillComment?: string, options?: any): AxiosPromise<TenantKeyValue>;
    /**
     *
     * @summary Add a per tenant configuration (system properties)
     * @param {string} body
     * @param {string} xKillbillCreatedBy
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    uploadPerTenantConfiguration(body: string, xKillbillCreatedBy: string, xKillbillReason?: string, xKillbillComment?: string, options?: any): AxiosPromise<TenantKeyValue>;
    /**
     *
     * @summary Add a per tenant configuration for a plugin
     * @param {string} body
     * @param {string} pluginName
     * @param {string} xKillbillCreatedBy
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    uploadPluginConfiguration(body: string, pluginName: string, xKillbillCreatedBy: string, xKillbillReason?: string, xKillbillComment?: string, options?: any): AxiosPromise<TenantKeyValue>;
    /**
     *
     * @summary Add a per tenant payment state machine for a plugin
     * @param {string} body
     * @param {string} pluginName
     * @param {string} xKillbillCreatedBy
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    uploadPluginPaymentStateMachineConfig(body: string, pluginName: string, xKillbillCreatedBy: string, xKillbillReason?: string, xKillbillComment?: string, options?: any): AxiosPromise<TenantKeyValue>;
};
/**
 * TenantApi - object-oriented interface
 * @export
 * @class TenantApi
 * @extends {BaseAPI}
 */
export declare class TenantApi extends BaseAPI {
    /**
     *
     * @summary Create a tenant
     * @param {Tenant} body
     * @param {string} xKillbillCreatedBy
     * @param {boolean} [useGlobalDefault]
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TenantApi
     */
    createTenant(body: Tenant, xKillbillCreatedBy: string, useGlobalDefault?: boolean, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Tenant, any>>;
    /**
     *
     * @summary Delete a per tenant configuration (system properties)
     * @param {string} xKillbillCreatedBy
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TenantApi
     */
    deletePerTenantConfiguration(xKillbillCreatedBy: string, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     *
     * @summary Delete a per tenant configuration for a plugin
     * @param {string} pluginName
     * @param {string} xKillbillCreatedBy
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TenantApi
     */
    deletePluginConfiguration(pluginName: string, xKillbillCreatedBy: string, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     *
     * @summary Delete a per tenant payment state machine for a plugin
     * @param {string} pluginName
     * @param {string} xKillbillCreatedBy
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TenantApi
     */
    deletePluginPaymentStateMachineConfig(pluginName: string, xKillbillCreatedBy: string, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     *
     * @summary Delete a push notification
     * @param {string} xKillbillCreatedBy
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TenantApi
     */
    deletePushNotificationCallbacks(xKillbillCreatedBy: string, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     *
     * @summary Delete  a per tenant user key/value
     * @param {string} keyName
     * @param {string} xKillbillCreatedBy
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TenantApi
     */
    deleteUserKeyValue(keyName: string, xKillbillCreatedBy: string, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
    /**
     *
     * @summary Retrieve a per tenant key value based on key prefix
     * @param {string} keyPrefix
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TenantApi
     */
    getAllPluginConfiguration(keyPrefix: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<TenantKeyValue[], any>>;
    /**
     *
     * @summary Retrieve a per tenant configuration (system properties)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TenantApi
     */
    getPerTenantConfiguration(options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<TenantKeyValue, any>>;
    /**
     *
     * @summary Retrieve a per tenant configuration for a plugin
     * @param {string} pluginName
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TenantApi
     */
    getPluginConfiguration(pluginName: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<TenantKeyValue, any>>;
    /**
     *
     * @summary Retrieve a per tenant payment state machine for a plugin
     * @param {string} pluginName
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TenantApi
     */
    getPluginPaymentStateMachineConfig(pluginName: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<TenantKeyValue, any>>;
    /**
     *
     * @summary Retrieve a push notification
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TenantApi
     */
    getPushNotificationCallbacks(options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<TenantKeyValue, any>>;
    /**
     *
     * @summary Retrieve a tenant by id
     * @param {string} tenantId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TenantApi
     */
    getTenant(tenantId: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Tenant, any>>;
    /**
     *
     * @summary Retrieve a tenant by its API key
     * @param {string} [apiKey]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TenantApi
     */
    getTenantByApiKey(apiKey?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<Tenant, any>>;
    /**
     *
     * @summary Retrieve a per tenant user key/value
     * @param {string} keyName
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TenantApi
     */
    getUserKeyValue(keyName: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<TenantKeyValue, any>>;
    /**
     *
     * @summary Add a per tenant user key/value
     * @param {string} body
     * @param {string} keyName
     * @param {string} xKillbillCreatedBy
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TenantApi
     */
    insertUserKeyValue(body: string, keyName: string, xKillbillCreatedBy: string, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<TenantKeyValue, any>>;
    /**
     *
     * @summary Create a push notification
     * @param {string} xKillbillCreatedBy
     * @param {string} [cb]
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TenantApi
     */
    registerPushNotificationCallback(xKillbillCreatedBy: string, cb?: string, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<TenantKeyValue, any>>;
    /**
     *
     * @summary Add a per tenant configuration (system properties)
     * @param {string} body
     * @param {string} xKillbillCreatedBy
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TenantApi
     */
    uploadPerTenantConfiguration(body: string, xKillbillCreatedBy: string, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<TenantKeyValue, any>>;
    /**
     *
     * @summary Add a per tenant configuration for a plugin
     * @param {string} body
     * @param {string} pluginName
     * @param {string} xKillbillCreatedBy
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TenantApi
     */
    uploadPluginConfiguration(body: string, pluginName: string, xKillbillCreatedBy: string, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<TenantKeyValue, any>>;
    /**
     *
     * @summary Add a per tenant payment state machine for a plugin
     * @param {string} body
     * @param {string} pluginName
     * @param {string} xKillbillCreatedBy
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TenantApi
     */
    uploadPluginPaymentStateMachineConfig(body: string, pluginName: string, xKillbillCreatedBy: string, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<TenantKeyValue, any>>;
}
/**
 * UsageApi - axios parameter creator
 * @export
 */
export declare const UsageApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     *
     * @summary Retrieve usage for a subscription
     * @param {string} subscriptionId
     * @param {string} [startDate]
     * @param {string} [endDate]
     * @param {Array<string>} [pluginProperty]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllUsage: (subscriptionId: string, startDate?: string, endDate?: string, pluginProperty?: Array<string>, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Retrieve usage for a subscription and unit type
     * @param {string} subscriptionId
     * @param {string} unitType
     * @param {string} [startDate]
     * @param {string} [endDate]
     * @param {Array<string>} [pluginProperty]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUsage: (subscriptionId: string, unitType: string, startDate?: string, endDate?: string, pluginProperty?: Array<string>, options?: AxiosRequestConfig) => Promise<RequestArgs>;
    /**
     *
     * @summary Record usage for a subscription
     * @param {SubscriptionUsageRecord} body
     * @param {string} xKillbillCreatedBy
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    recordUsage: (body: SubscriptionUsageRecord, xKillbillCreatedBy: string, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * UsageApi - functional programming interface
 * @export
 */
export declare const UsageApiFp: (configuration?: Configuration) => {
    /**
     *
     * @summary Retrieve usage for a subscription
     * @param {string} subscriptionId
     * @param {string} [startDate]
     * @param {string} [endDate]
     * @param {Array<string>} [pluginProperty]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllUsage(subscriptionId: string, startDate?: string, endDate?: string, pluginProperty?: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RolledUpUsage>>;
    /**
     *
     * @summary Retrieve usage for a subscription and unit type
     * @param {string} subscriptionId
     * @param {string} unitType
     * @param {string} [startDate]
     * @param {string} [endDate]
     * @param {Array<string>} [pluginProperty]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUsage(subscriptionId: string, unitType: string, startDate?: string, endDate?: string, pluginProperty?: Array<string>, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RolledUpUsage>>;
    /**
     *
     * @summary Record usage for a subscription
     * @param {SubscriptionUsageRecord} body
     * @param {string} xKillbillCreatedBy
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    recordUsage(body: SubscriptionUsageRecord, xKillbillCreatedBy: string, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
};
/**
 * UsageApi - factory interface
 * @export
 */
export declare const UsageApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     *
     * @summary Retrieve usage for a subscription
     * @param {string} subscriptionId
     * @param {string} [startDate]
     * @param {string} [endDate]
     * @param {Array<string>} [pluginProperty]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getAllUsage(subscriptionId: string, startDate?: string, endDate?: string, pluginProperty?: Array<string>, options?: any): AxiosPromise<RolledUpUsage>;
    /**
     *
     * @summary Retrieve usage for a subscription and unit type
     * @param {string} subscriptionId
     * @param {string} unitType
     * @param {string} [startDate]
     * @param {string} [endDate]
     * @param {Array<string>} [pluginProperty]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getUsage(subscriptionId: string, unitType: string, startDate?: string, endDate?: string, pluginProperty?: Array<string>, options?: any): AxiosPromise<RolledUpUsage>;
    /**
     *
     * @summary Record usage for a subscription
     * @param {SubscriptionUsageRecord} body
     * @param {string} xKillbillCreatedBy
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    recordUsage(body: SubscriptionUsageRecord, xKillbillCreatedBy: string, xKillbillReason?: string, xKillbillComment?: string, options?: any): AxiosPromise<void>;
};
/**
 * UsageApi - object-oriented interface
 * @export
 * @class UsageApi
 * @extends {BaseAPI}
 */
export declare class UsageApi extends BaseAPI {
    /**
     *
     * @summary Retrieve usage for a subscription
     * @param {string} subscriptionId
     * @param {string} [startDate]
     * @param {string} [endDate]
     * @param {Array<string>} [pluginProperty]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsageApi
     */
    getAllUsage(subscriptionId: string, startDate?: string, endDate?: string, pluginProperty?: Array<string>, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<RolledUpUsage, any>>;
    /**
     *
     * @summary Retrieve usage for a subscription and unit type
     * @param {string} subscriptionId
     * @param {string} unitType
     * @param {string} [startDate]
     * @param {string} [endDate]
     * @param {Array<string>} [pluginProperty]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsageApi
     */
    getUsage(subscriptionId: string, unitType: string, startDate?: string, endDate?: string, pluginProperty?: Array<string>, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<RolledUpUsage, any>>;
    /**
     *
     * @summary Record usage for a subscription
     * @param {SubscriptionUsageRecord} body
     * @param {string} xKillbillCreatedBy
     * @param {string} [xKillbillReason]
     * @param {string} [xKillbillComment]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsageApi
     */
    recordUsage(body: SubscriptionUsageRecord, xKillbillCreatedBy: string, xKillbillReason?: string, xKillbillComment?: string, options?: AxiosRequestConfig): Promise<import("axios").AxiosResponse<void, any>>;
}
